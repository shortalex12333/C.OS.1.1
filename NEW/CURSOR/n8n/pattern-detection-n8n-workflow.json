{
  "nodes": [
    {
      "parameters": {
        "content": "## 1. Universal Assumption Engine (Real-time)\n•\tTrigger: New message webhook\n•\tPurpose: Cold start \"impossibly personal\" assumptions\n•\tData: Message content + basic user context\n•\tOutput: Immediate behavioral prediction\n",
        "height": 180,
        "width": 680,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1960,
        -3540
      ],
      "id": "ceada4be-8ab6-46f4-b55e-961019b0fd41",
      "name": "Sticky Note6"
    },
    {
      "parameters": {},
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.cron",
      "position": [
        -1380,
        -2280
      ],
      "id": "ded1a696-2e9e-485f-9aac-ef50891aae6e",
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH active_users AS (\n  SELECT DISTINCT user_id \n  FROM conversations \n  WHERE created_at >= NOW() - INTERVAL '24 hours'\n  AND user_id IS NOT NULL\n),\ntemporal_activity AS (\n  SELECT \n    c.user_id,\n    EXTRACT(hour FROM c.created_at) as hour_of_day,\n    EXTRACT(dow FROM c.created_at) as day_of_week,\n    DATE(c.created_at) as activity_date,\n    COUNT(*) as message_count,\n    AVG(LENGTH(c.message)) as avg_message_length,\n    AVG(EXTRACT(epoch FROM (c.updated_at - c.created_at))) as avg_response_time_seconds,\n    MIN(c.created_at) as first_message_hour,\n    MAX(c.created_at) as last_message_hour\n  FROM conversations c\n  INNER JOIN active_users au ON c.user_id = au.user_id\n  WHERE c.created_at >= NOW() - INTERVAL '7 days'\n  AND c.message IS NOT NULL\n  GROUP BY c.user_id, EXTRACT(hour FROM c.created_at), EXTRACT(dow FROM c.created_at), DATE(c.created_at)\n),\ndaily_patterns AS (\n  SELECT \n    user_id,\n    hour_of_day,\n    AVG(message_count) as avg_hourly_activity,\n    AVG(avg_message_length) as complexity_score,\n    AVG(avg_response_time_seconds) as response_latency,\n    COUNT(DISTINCT activity_date) as active_days\n  FROM temporal_activity\n  GROUP BY user_id, hour_of_day\n  HAVING COUNT(DISTINCT activity_date) >= 2\n),\nweekly_rhythms AS (\n  SELECT \n    user_id,\n    day_of_week,\n    COUNT(*) as weekly_interactions,\n    AVG(message_count) as avg_daily_volume,\n    MIN(first_message_hour) as earliest_activity,\n    MAX(last_message_hour) as latest_activity\n  FROM temporal_activity\n  GROUP BY user_id, day_of_week\n),\nenergy_windows AS (\n  SELECT \n    dp.user_id,\n    dp.hour_of_day,\n    dp.avg_hourly_activity,\n    dp.complexity_score,\n    dp.response_latency,\n    CASE \n      WHEN dp.avg_hourly_activity >= 3 AND dp.complexity_score > 50 THEN 'peak'\n      WHEN dp.avg_hourly_activity >= 2 OR dp.complexity_score > 40 THEN 'moderate'\n      ELSE 'low'\n    END as energy_classification,\n    ROW_NUMBER() OVER (PARTITION BY dp.user_id ORDER BY dp.avg_hourly_activity DESC, dp.complexity_score DESC) as activity_rank\n  FROM daily_patterns dp\n)\nSELECT \n  au.user_id,\n  \n  -- Peak energy windows (top 3 hours)\n  string_agg(\n    CASE WHEN ew.activity_rank <= 3 \n    THEN ew.hour_of_day::text || ':00' \n    END, ', ' ORDER BY ew.activity_rank\n  ) as peak_energy_hours,\n  \n  -- Daily activity summary\n  ROUND(AVG(ew.avg_hourly_activity), 2) as avg_activity_level,\n  ROUND(AVG(ew.complexity_score), 1) as avg_message_complexity,\n  ROUND(AVG(ew.response_latency), 1) as avg_response_time,\n  \n  -- Energy pattern classification\n  CASE \n    WHEN MAX(CASE WHEN ew.hour_of_day BETWEEN 6 AND 11 THEN ew.avg_hourly_activity END) > \n         MAX(CASE WHEN ew.hour_of_day BETWEEN 14 AND 19 THEN ew.avg_hourly_activity END)\n    THEN 'morning_person'\n    WHEN MAX(CASE WHEN ew.hour_of_day BETWEEN 18 AND 23 THEN ew.avg_hourly_activity END) > \n         MAX(CASE WHEN ew.hour_of_day BETWEEN 6 AND 13 THEN ew.avg_hourly_activity END)\n    THEN 'evening_person' \n    ELSE 'midday_peak'\n  END as chronotype,\n  \n  -- Weekly rhythm analysis\n  wr.weekly_data,\n  \n  -- Productivity timing predictions\n  CASE \n    WHEN ew.hour_of_day BETWEEN 6 AND 10 AND ew.activity_rank = 1 THEN 'Best work: Early morning (6-10am)'\n    WHEN ew.hour_of_day BETWEEN 10 AND 14 AND ew.activity_rank = 1 THEN 'Best work: Late morning (10am-2pm)'\n    WHEN ew.hour_of_day BETWEEN 14 AND 18 AND ew.activity_rank = 1 THEN 'Best work: Afternoon (2-6pm)'\n    WHEN ew.hour_of_day BETWEEN 18 AND 22 AND ew.activity_rank = 1 THEN 'Best work: Evening (6-10pm)'\n    ELSE 'Inconsistent pattern'\n  END as productivity_recommendation,\n  \n  NOW() as analysis_timestamp\n  \nFROM active_users au\nLEFT JOIN energy_windows ew ON au.user_id = ew.user_id\nLEFT JOIN (\n  SELECT \n    user_id,\n    json_agg(json_build_object(\n      'day', day_of_week,\n      'interactions', weekly_interactions,\n      'volume', avg_daily_volume,\n      'start', earliest_activity,\n      'end', latest_activity\n    )) as weekly_data\n  FROM weekly_rhythms\n  GROUP BY user_id\n) wr ON au.user_id = wr.user_id\nGROUP BY au.user_id, wr.weekly_data\nHAVING COUNT(ew.user_id) > 0",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1180,
        -2280
      ],
      "id": "b5c6f0ff-88c8-46e8-bbed-0a6cd02c3d2e",
      "name": "Get Temporal Data",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process temporal patterns and generate predictions\nconst temporalData = $input.all();\n\nfunction analyzeTemporalPatterns(userData) {\n  const patterns = [];\n  \n  for (const user of userData) {\n    const pattern = {\n      user_id: user.json.user_id,\n      pattern_type: 'temporal_rhythm',\n      analysis_timestamp: user.json.analysis_timestamp,\n      \n      // Energy pattern analysis\n      peak_hours: user.json.peak_energy_hours ? user.json.peak_energy_hours.split(', ') : [],\n      chronotype: user.json.chronotype,\n      avg_activity: user.json.avg_activity_level,\n      message_complexity: user.json.avg_message_complexity,\n      response_timing: user.json.avg_response_time,\n      \n      // Pattern predictions\n      predictions: generateTemporalPredictions(user.json),\n      \n      // Confidence scoring\n      confidence: calculatePatternConfidence(user.json),\n      \n      // Weekly rhythm data\n      weekly_patterns: user.json.weekly_data || []\n    };\n    \n    patterns.push(pattern);\n  }\n  \n  return patterns;\n}\n\nfunction generateTemporalPredictions(data) {\n  const predictions = [];\n  \n  // Energy crash prediction\n  if (data.chronotype === 'morning_person') {\n    predictions.push({\n      type: 'energy_crash',\n      prediction: 'Energy will drop 40-60% around 2-3pm. Plan easy tasks then.',\n      confidence: 0.84,\n      timing: '14:00-15:30',\n      intervention: 'Block 2:30-3:30pm for low-energy tasks or break'\n    });\n  }\n  \n  // Peak productivity window\n  if (data.peak_energy_hours) {\n    const peakHour = data.peak_energy_hours.split(', ')[0];\n    predictions.push({\n      type: 'peak_productivity',\n      prediction: `Maximum focus and decision-making power at ${peakHour}. Schedule hardest work then.`,\n      confidence: 0.87,\n      timing: peakHour,\n      intervention: `Block ${peakHour}-${parseInt(peakHour) + 2}:00 for most important work`\n    });\n  }\n  \n  // Response timing pattern\n  if (data.avg_response_time > 300) { // 5+ minutes\n    predictions.push({\n      type: 'processing_depth',\n      prediction: 'Longer response times indicate deeper thinking. You process before reacting.',\n      confidence: 0.78,\n      timing: 'consistent',\n      intervention: 'Use this thoughtfulness as strength in decision-making'\n    });\n  }\n  \n  // Weekly rhythm prediction\n  if (data.weekly_data && data.weekly_data.length > 0) {\n    const weekendActivity = data.weekly_data.filter(d => d.day === 0 || d.day === 6);\n    const weekdayActivity = data.weekly_data.filter(d => d.day >= 1 && d.day <= 5);\n    \n    if (weekendActivity.length && weekdayActivity.length) {\n      const weekendAvg = weekendActivity.reduce((sum, d) => sum + d.interactions, 0) / weekendActivity.length;\n      const weekdayAvg = weekdayActivity.reduce((sum, d) => sum + d.interactions, 0) / weekdayActivity.length;\n      \n      if (weekendAvg > weekdayAvg * 1.5) {\n        predictions.push({\n          type: 'weekend_warrior',\n          prediction: 'You work more on weekends than weekdays. Burnout risk detected.',\n          confidence: 0.82,\n          timing: 'weekly_pattern',\n          intervention: 'Schedule mandatory rest Sunday evening. Protect weekday boundaries.'\n        });\n      }\n    }\n  }\n  \n  return predictions;\n}\n\nfunction calculatePatternConfidence(data) {\n  let confidence = 0.5; // Base confidence\n  \n  // Boost confidence based on data quality\n  if (data.avg_activity_level >= 2) confidence += 0.2;\n  if (data.peak_energy_hours && data.peak_energy_hours.split(', ').length >= 2) confidence += 0.15;\n  if (data.weekly_data && data.weekly_data.length >= 5) confidence += 0.1;\n  if (data.avg_response_time > 0) confidence += 0.05;\n  \n  return Math.min(0.95, confidence);\n}\n\n// Generate intervention opportunities\nfunction generateInterventions(patterns) {\n  const interventions = [];\n  \n  for (const pattern of patterns) {\n    for (const prediction of pattern.predictions) {\n      if (prediction.confidence > 0.8) {\n        interventions.push({\n          user_id: pattern.user_id,\n          intervention_type: 'temporal_optimization',\n          reasons: `Pattern detected: ${prediction.type}`,\n          scheduled_for: calculateOptimalDeliveryTime(pattern, prediction),\n          message: prediction.intervention,\n          expected_impact: 'productivity_boost',\n          breakthrough_potential: prediction.confidence,\n          priority: prediction.confidence > 0.85 ? 1 : 2,\n          metadata: {\n            pattern_type: prediction.type,\n            confidence: prediction.confidence,\n            timing: prediction.timing\n          }\n        });\n      }\n    }\n  }\n  \n  return interventions;\n}\n\nfunction calculateOptimalDeliveryTime(pattern, prediction) {\n  const now = new Date();\n  \n  // For energy crash predictions, deliver 30 mins before predicted crash\n  if (prediction.type === 'energy_crash') {\n    const crashTime = new Date();\n    crashTime.setHours(14, 0, 0, 0); // 2pm crash\n    crashTime.setMinutes(crashTime.getMinutes() - 30);\n    return crashTime.toISOString();\n  }\n  \n  // For productivity windows, deliver early morning\n  if (prediction.type === 'peak_productivity') {\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(7, 30, 0, 0);\n    return tomorrow.toISOString();\n  }\n  \n  // Default: deliver in 1 hour\n  const defaultTime = new Date(now.getTime() + 60 * 60 * 1000);\n  return defaultTime.toISOString();\n}\n\n// Execute analysis\nconst patterns = analyzeTemporalPatterns(temporalData);\nconst interventions = generateInterventions(patterns);\n\nreturn {\n  temporal_patterns: patterns,\n  interventions_generated: interventions,\n  analysis_summary: {\n    users_analyzed: patterns.length,\n    interventions_created: interventions.length,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "name": "Analyze Patterns",
      "type": "n8n-nodes-base.code",
      "position": [
        -980,
        -2280
      ],
      "id": "228ff658-b7da-41fe-b363-49432acc48c9",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store temporal patterns\nINSERT INTO user_state_evolution (\n  user_id,\n  state_timestamp,\n  energy_trajectory,\n  focus_trajectory,\n  momentum_trajectory,\n  emotional_journey,\n  breakthrough_indicators,\n  risk_factors,\n  opportunity_windows,\n  next_evolution_predicted\n)\nSELECT \n  p.user_id,\n  NOW(),\n  json_build_object(\n    'peak_hours', p.peak_hours,\n    'chronotype', p.chronotype,\n    'avg_activity', p.avg_activity\n  ),\n  json_build_object(\n    'message_complexity', p.message_complexity,\n    'response_timing', p.response_timing\n  ),\n  json_build_object(\n    'weekly_patterns', p.weekly_patterns,\n    'consistency_score', p.confidence\n  ),\n  json_build_object(\n    'pattern_type', 'temporal_analysis',\n    'stability', CASE WHEN p.confidence > 0.8 THEN 'stable' ELSE 'developing' END\n  ),\n  json_build_object(\n    'predictions', p.predictions\n  ),\n  json_build_object(\n    'weekend_overwork', CASE WHEN EXISTS(\n      SELECT 1 FROM json_array_elements(p.predictions::json) pred \n      WHERE pred->>'type' = 'weekend_warrior'\n    ) THEN true ELSE false END\n  ),\n  json_build_object(\n    'optimal_work_windows', p.peak_hours,\n    'energy_optimization', p.predictions\n  ),\n  json_build_object(\n    'next_analysis', NOW() + INTERVAL '24 hours',\n    'pattern_evolution', 'temporal_refinement'\n  )\nFROM (\n  SELECT \n    '{{ $json.temporal_patterns[0].user_id }}' as user_id,\n    '{{ $json.temporal_patterns[0].peak_hours }}' as peak_hours,\n    '{{ $json.temporal_patterns[0].chronotype }}' as chronotype,\n    {{ $json.temporal_patterns[0].avg_activity }} as avg_activity,\n    {{ $json.temporal_patterns[0].message_complexity }} as message_complexity,\n    {{ $json.temporal_patterns[0].response_timing }} as response_timing,\n    '{{ JSON.stringify($json.temporal_patterns[0].weekly_patterns) }}'::json as weekly_patterns,\n    {{ $json.temporal_patterns[0].confidence }} as confidence,\n    '{{ JSON.stringify($json.temporal_patterns[0].predictions) }}'::json as predictions\n  WHERE '{{ $json.temporal_patterns[0].user_id }}' IS NOT NULL\n) p\nON CONFLICT (user_id, date_trunc('day', state_timestamp)) DO UPDATE SET\n  energy_trajectory = EXCLUDED.energy_trajectory,\n  focus_trajectory = EXCLUDED.focus_trajectory,\n  momentum_trajectory = EXCLUDED.momentum_trajectory,\n  opportunity_windows = EXCLUDED.opportunity_windows,\n  next_evolution_predicted = EXCLUDED.next_evolution_predicted",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -780,
        -2280
      ],
      "id": "94b15e5a-ec33-444b-bcf8-40bc0b79e22e",
      "name": "Store Patterns",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store pattern predictions\nINSERT INTO pattern_predictions (\n  prediction_id,\n  user_id,\n  pattern_id,\n  pattern_type,\n  prediction_text,\n  confidence_score,\n  source_type,\n  triggered_by,\n  prediction_timestamp,\n  outcome_recorded,\n  created_at\n)\nSELECT \n  gen_random_uuid(),\n  i.user_id,\n  i.pattern_type,\n  'temporal_pattern',\n  i.prediction_text,\n  i.confidence,\n  'scheduled_analysis',\n  'temporal_detector',\n  NOW(),\n  false,\n  NOW()\nFROM (\n  SELECT \n    '{{ $json.temporal_patterns[0].user_id }}' as user_id,\n    pred->>'type' as pattern_type,\n    pred->>'prediction' as prediction_text,\n    (pred->>'confidence')::numeric as confidence\n  FROM json_array_elements('{{ JSON.stringify($json.temporal_patterns[0].predictions) }}'::json) pred\n  WHERE '{{ $json.temporal_patterns[0].user_id }}' IS NOT NULL\n  AND (pred->>'confidence')::numeric > 0.75\n) i",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -580,
        -2280
      ],
      "id": "25f36c31-b8f4-4ead-b7b0-d181bb1857b2",
      "name": "Store Predictions",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Queue interventions for high-confidence patterns\nINSERT INTO intervention_queue (\n  user_id,\n  intervention_type,\n  reasons,\n  scheduled_for,\n  message,\n  expected_impact,\n  breakthrough_potential,\n  priority,\n  status,\n  metadata,\n  created_at\n)\nSELECT \n  i.user_id,\n  i.intervention_type,\n  i.reasons,\n  i.scheduled_for::timestamp,\n  i.message,\n  i.expected_impact,\n  i.breakthrough_potential,\n  i.priority,\n  'scheduled',\n  i.metadata::jsonb,\n  NOW()\nFROM (\n  SELECT \n    '{{ $json.interventions_generated[0].user_id }}' as user_id,\n    '{{ $json.interventions_generated[0].intervention_type }}' as intervention_type,\n    '{{ $json.interventions_generated[0].reasons }}' as reasons,\n    '{{ $json.interventions_generated[0].scheduled_for }}' as scheduled_for,\n    '{{ $json.interventions_generated[0].message }}' as message,\n    '{{ $json.interventions_generated[0].expected_impact }}' as expected_impact,\n    {{ $json.interventions_generated[0].breakthrough_potential }} as breakthrough_potential,\n    {{ $json.interventions_generated[0].priority }} as priority,\n    '{{ JSON.stringify($json.interventions_generated[0].metadata) }}' as metadata\n  WHERE '{{ $json.interventions_generated[0].user_id }}' IS NOT NULL\n) i",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -380,
        -2280
      ],
      "id": "2893dfb3-b397-4c35-8604-c2414cc40029",
      "name": "Queue Interventions",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "content": "## 2. Temporal Pattern Detector (15-min intervals)\n•\tTrigger: Schedule/cron\n•\tPurpose: Typing rhythms, response timing, daily patterns\n•\tData: conversations table timestamps + interaction metadata\n•\tOutput: Energy windows, peak productivity times\n",
        "height": 180,
        "width": 660,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1940,
        -2320
      ],
      "id": "08824477-e6c7-43d3-81b2-0ac2852b1d06",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## 3. Linguistic Evolution Tracker (Real-time)\n•\tTrigger: Message webhook (parallel processing)\n•\tPurpose: Cognitive load, agency language, complexity evolution\n•\tData: Message content + conversation history\n•\tOutput: Communication sophistication scoring\n",
        "height": 180,
        "width": 660,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1960,
        -3060
      ],
      "id": "d15e5ca8-2d07-4c15-8c55-52d2dc364b5d",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## 4. Business Model Classifier (Daily)\n•\tTrigger: Schedule + new user detection\n•\tPurpose: Revenue stage, business type, pressure points\n•\tData: Conversation content analysis\n•\tOutput: Business context for assumption personalization\n",
        "height": 180,
        "width": 660,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1920,
        -2020
      ],
      "id": "6f15b9cd-77fa-4b37-a486-9d246c97704c",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## 5. Breakthrough Proximity Monitor (Hourly)\n•\tTrigger: Schedule\n•\tPurpose: Detect when user is near behavioral shift\n•\tData: living_memory + user_state_evolution + recent patterns\n•\tOutput: Breakthrough timing predictions\n",
        "height": 180,
        "width": 680,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1940,
        -1760
      ],
      "id": "7342ee9b-fdde-405a-9250-93e9d3262a5a",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "## 7. Performance Feedback Loop (Real-time + Daily summary)\n•\tTrigger: User interaction + schedule\n•\tPurpose: Track assumption accuracy, adjust confidence scores\n•\tData: assumption_performance + user engagement metrics\n•\tOutput: Pattern effectiveness scores, confidence adjustments\n\n",
        "height": 220,
        "width": 680,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1980,
        -2640
      ],
      "id": "c93942a9-a9f9-491d-8a65-9976949e1dff",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\nconst message = data.current_message || '';\n\nfunction analyzeCognitiveLoad(text) {\n  const hedgeWords = (text.match(/maybe|perhaps|possibly|might|could/gi) || []).length;\n  const fillerWords = (text.match(/um|uh|like|you know|actually/gi) || []).length;\n  const loadScore = Math.min(1, (hedgeWords * 0.2 + fillerWords * 0.3) / 3);\n  \n  return {\n    score: loadScore,\n    classification: loadScore > 0.7 ? 'high_strain' : loadScore > 0.4 ? 'moderate' : 'clear'\n  };\n}\n\nfunction analyzeAgency(text) {\n  const highAgency = (text.match(/I will|I created|I decided|I chose/gi) || []).length;\n  const lowAgency = (text.match(/I can't|I have to|they made me/gi) || []).length;\n  const score = highAgency > lowAgency ? 0.8 : lowAgency > highAgency ? 0.3 : 0.5;\n  \n  return {\n    score: score,\n    classification: score > 0.6 ? 'high_agency' : score > 0.4 ? 'medium' : 'low_agency'\n  };\n}\n\nfunction analyzeBreakthrough(text) {\n  const breakthroughSignals = (text.match(/I realized|it clicked|I understand|eureka/gi) || []).length;\n  const score = Math.min(1, breakthroughSignals * 0.3);\n  \n  return {\n    score: score,\n    proximity: score > 0.7 ? 'imminent' : score > 0.4 ? 'near' : 'distant'\n  };\n}\n\nconst cognitive = analyzeCognitiveLoad(message);\nconst agency = analyzeAgency(message);\nconst breakthrough = analyzeBreakthrough(message);\n\nconst overallScore = (agency.score * 0.4) + (0.8 - cognitive.score) * 0.3 + (breakthrough.score * 0.3);\n\nreturn {\n  user_id: data.user_id,\n  cognitive_load: cognitive,\n  agency_language: agency,\n  breakthrough_proximity: breakthrough,\n  overall_sophistication: overallScore,\n  analysis_timestamp: new Date().toISOString(),\n  predictions: breakthrough.score > 0.7 ? [{\n    type: 'breakthrough_imminent',\n    prediction: 'Language patterns indicate breakthrough approaching',\n    confidence: breakthrough.score\n  }] : []\n};"
      },
      "name": "Analyze Language",
      "type": "n8n-nodes-base.code",
      "position": [
        -1000,
        -3020
      ],
      "id": "36ec03b2-c16d-44a7-a36a-137a27e12fcb",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO linguistic_evolution (user_id, analysis_date, vocabulary_complexity, emotional_expression_depth, certainty_language_ratio, ownership_language_score) VALUES ('{{ $json.user_id }}', CURRENT_DATE, {{ $json.overall_sophistication }}, {{ $json.agency_language.score }}, {{ $json.cognitive_load.score }}, {{ $json.agency_language.score }}) ON CONFLICT (user_id, analysis_date) DO UPDATE SET vocabulary_complexity = EXCLUDED.vocabulary_complexity, ownership_language_score = EXCLUDED.ownership_language_score",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -800,
        -3020
      ],
      "id": "6effbc18-db65-4019-9e50-a2e5be729ae0",
      "name": "Store Evolution",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.breakthrough_proximity.score }}",
              "rightValue": 0.7,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ]
        },
        "options": {}
      },
      "name": "Breakthrough Check",
      "type": "n8n-nodes-base.if",
      "position": [
        -600,
        -3020
      ],
      "id": "657d853e-6aa3-426d-8adc-5a0a6e717adb",
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\"type\": \"linguistic_complete\", \"sophistication\": {{ $json.overall_sophistication }}, \"breakthrough\": \"{{ $json.breakthrough_proximity.proximity }}\", \"success\": true}",
        "options": {}
      },
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -400,
        -3120
      ],
      "id": "c438e160-3a81-469d-905c-61907ec3907c",
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO intervention_queue (user_id, intervention_type, reasons, scheduled_for, message, priority, status, created_at) VALUES ('{{ $json.user_id }}', 'breakthrough_acceleration', 'Linguistic breakthrough detected', NOW() + INTERVAL '30 minutes', 'Your language patterns show breakthrough approaching', 1, 'scheduled', NOW())",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -400,
        -2920
      ],
      "id": "173c5421-8e24-4383-8091-fdeb159640e2",
      "name": "Queue Intervention1",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "content": "## 6. Pathway Assignment Engine (Weekly)\n•\tTrigger: Schedule\n•\tPurpose: Update user archetype classifications\n•\tData: All pattern data synthesis\n•\tOutput: Primary/secondary pathway assignments with confidence\n",
        "height": 180,
        "width": 680,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1940,
        -1500
      ],
      "id": "f4c422b8-1c10-417c-9081-96d7ba9a0fb9",
      "name": "Sticky Note13"
    },
    {
      "parameters": {},
      "name": "Daily Business Analysis",
      "type": "n8n-nodes-base.cron",
      "position": [
        -1360,
        -1980
      ],
      "id": "c3e61799-76fe-459f-9597-52b751241ebf",
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- COMPREHENSIVE BUSINESS MODEL ANALYSIS\n-- This is the most sophisticated business intelligence query ever written\n\nWITH business_financial_reality AS (\n  SELECT \n    bf.user_id,\n    -- Financial truth vs fiction\n    COALESCE(bf.gross_revenue, 0) as stated_revenue,\n    COALESCE(bf.net_revenue, 0) as actual_profit,\n    COALESCE(bf.cash_flow, 0) as cash_reality,\n    COALESCE(bf.runway_months, 0) as survival_time,\n    COALESCE(bf.burn_rate, 0) as money_hemorrhage,\n    COALESCE(bf.customer_acquisition_cost, 0) as acquisition_cost,\n    COALESCE(bf.lifetime_value, 0) as customer_value,\n    \n    -- Business health indicators\n    CASE \n      WHEN bf.gross_revenue > 0 AND bf.net_revenue <= 0 THEN 'revenue_without_profit'\n      WHEN bf.cash_flow < 0 AND bf.runway_months < 6 THEN 'death_spiral'\n      WHEN bf.customer_acquisition_cost > bf.lifetime_value THEN 'unsustainable_unit_economics'\n      WHEN bf.gross_revenue > 50000 AND bf.gross_margin_percentage < 0.6 THEN 'scaling_inefficiently'\n      ELSE 'financially_stable'\n    END as financial_diagnosis,\n    \n    -- Growth trajectory analysis\n    COALESCE(bf.revenue_growth_rate, 0) as growth_velocity,\n    bf.created_at as last_financial_update\n  FROM \"business:finance\" bf\n  WHERE bf.created_at >= NOW() - INTERVAL '30 days'\n),\n\nbusiness_operational_reality AS (\n  SELECT \n    user_id,\n    -- Sales reality check\n    COALESCE(COUNT(bs.id), 0) as actual_sales_activity,\n    COALESCE(AVG(bs.deal_value), 0) as avg_deal_size,\n    COALESCE(AVG(bs.time_to_close), 30) as sales_cycle_length,\n    COUNT(CASE WHEN bs.deal_stage = 'closed_won' THEN 1 END) as won_deals,\n    COUNT(CASE WHEN bs.deal_stage = 'closed_lost' THEN 1 END) as lost_deals,\n    \n    -- Activity vs results ratio\n    CASE \n      WHEN COUNT(bs.id) > 20 AND COUNT(CASE WHEN bs.deal_stage = 'closed_won' THEN 1 END) = 0 \n      THEN 'busy_but_broke'\n      WHEN COUNT(bs.id) < 5 AND COUNT(CASE WHEN bs.deal_stage = 'closed_won' THEN 1 END) > 2\n      THEN 'efficient_closer'\n      WHEN COUNT(bs.id) > 0 AND AVG(bs.time_to_close) > 90\n      THEN 'long_sales_cycles'\n      ELSE 'normal_sales_pattern'\n    END as sales_efficiency_diagnosis\n    \n  FROM \"business:sales\" bs\n  WHERE bs.created_at >= NOW() - INTERVAL '30 days'\n  GROUP BY bs.user_id\n),\n\nbusiness_model_signals AS (\n  SELECT \n    user_id,\n    -- Detect actual business model from data patterns\n    CASE \n      WHEN saas_revenue.monthly_recurring_revenue > 0 THEN 'saas'\n      WHEN agency_revenue.average_project_value > 0 AND agency_revenue.client_count > 0 THEN 'agency'\n      WHEN ecom_revenue.conversion_rate > 0 AND ecom_revenue.inventory_count > 0 THEN 'ecommerce'\n      WHEN content_revenue.follower_count > 1000 AND content_revenue.engagement_rate > 0.02 THEN 'content_creator'\n      WHEN ad_revenue.roi_percentage > 0 AND ad_revenue.ad_spend > 1000 THEN 'performance_marketing'\n      ELSE 'unclear_or_hybrid'\n    END as detected_business_model,\n    \n    -- Revenue diversification analysis\n    CASE \n      WHEN saas_revenue.monthly_recurring_revenue > 0 AND agency_revenue.average_project_value > 0 \n      THEN 'dangerously_diversified'\n      WHEN saas_revenue.monthly_recurring_revenue = 0 AND agency_revenue.average_project_value = 0 \n      AND ecom_revenue.conversion_rate = 0 THEN 'no_clear_model'\n      ELSE 'focused_model'\n    END as model_focus_diagnosis,\n    \n    -- Scale indicators\n    COALESCE(saas_revenue.monthly_recurring_revenue, 0) as saas_mrr,\n    COALESCE(agency_revenue.client_count, 0) as agency_clients,\n    COALESCE(ecom_revenue.conversion_rate, 0) as ecom_conversion,\n    COALESCE(content_revenue.follower_count, 0) as content_following\n    \n  FROM (\n    SELECT DISTINCT user_id FROM \"business:finance\" \n    UNION SELECT DISTINCT user_id FROM \"business:sales\"\n  ) users\n  LEFT JOIN (\n    SELECT user_id, monthly_recurring_revenue, active_subscribers, churn_rate\n    FROM \"business:saas\" WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) saas_revenue ON users.user_id = saas_revenue.user_id\n  LEFT JOIN (\n    SELECT user_id, average_project_value, client_count, client_retention_rate\n    FROM \"business:agency\" WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) agency_revenue ON users.user_id = agency_revenue.user_id\n  LEFT JOIN (\n    SELECT user_id, conversion_rate, inventory_count, average_order_value\n    FROM \"business:ecommerce\" WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) ecom_revenue ON users.user_id = ecom_revenue.user_id\n  LEFT JOIN (\n    SELECT user_id, follower_count, engagement_rate, monetization_methods\n    FROM \"business:content\" WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) content_revenue ON users.user_id = content_revenue.user_id\n  LEFT JOIN (\n    SELECT user_id, roi_percentage, ad_spend, conversions\n    FROM \"business:advertisments\" WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) ad_revenue ON users.user_id = ad_revenue.user_id\n),\n\ngoal_reality_gap_analysis AS (\n  SELECT \n    g.user_id,\n    -- Goals vs reality comparison\n    COUNT(g.id) as total_goals_set,\n    COUNT(CASE WHEN g.status = 'completed' THEN 1 END) as goals_achieved,\n    COUNT(CASE WHEN g.deadline < CURRENT_DATE AND g.status != 'completed' THEN 1 END) as overdue_goals,\n    \n    -- Revenue goal vs actual analysis\n    MAX(CASE WHEN g.goal_type = 'revenue' THEN g.target_value END) as revenue_goal,\n    MAX(CASE WHEN g.goal_type = 'revenue' THEN g.current_value::numeric END) as revenue_progress,\n    \n    -- Goal realism scoring\n    CASE \n      WHEN COUNT(CASE WHEN g.deadline < CURRENT_DATE AND g.status != 'completed' THEN 1 END) > \n           COUNT(CASE WHEN g.status = 'completed' THEN 1 END) * 2\n      THEN 'chronic_overcommitter'\n      WHEN COUNT(g.id) > 10 AND COUNT(CASE WHEN g.status = 'completed' THEN 1 END) < 2\n      THEN 'goal_hoarder'\n      WHEN MAX(CASE WHEN g.goal_type = 'revenue' THEN g.target_value END) > \n           COALESCE(MAX(CASE WHEN g.goal_type = 'revenue' THEN g.current_value::numeric END), 0) * 10\n      THEN 'delusional_targets'\n      ELSE 'realistic_goal_setter'\n    END as goal_psychology_diagnosis\n    \n  FROM goals g\n  WHERE g.created_at >= NOW() - INTERVAL '90 days'\n  GROUP BY g.user_id\n),\n\nemotional_business_psychology AS (\n  SELECT \n    e.user_id,\n    -- Fear-based decision making analysis\n    COUNT(CASE WHEN e.fears ILIKE '%money%' OR e.fears ILIKE '%broke%' OR e.fears ILIKE '%fail%' THEN 1 END) as financial_fear_frequency,\n    COUNT(CASE WHEN e.fears ILIKE '%not good enough%' OR e.fears ILIKE '%imposter%' THEN 1 END) as imposter_syndrome_frequency,\n    COUNT(CASE WHEN e.fears ILIKE '%scale%' OR e.fears ILIKE '%grow%' OR e.fears ILIKE '%big%' THEN 1 END) as scale_anxiety_frequency,\n    \n    -- Emotional volatility in business context\n    COUNT(CASE WHEN e.emotions ILIKE '%overwhelmed%' OR e.emotions ILIKE '%stressed%' THEN 1 END) as stress_episodes,\n    COUNT(CASE WHEN e.emotions ILIKE '%excited%' OR e.emotions ILIKE '%confident%' THEN 1 END) as confidence_episodes,\n    \n    -- Psychological business diagnosis\n    CASE \n      WHEN COUNT(CASE WHEN e.fears ILIKE '%money%' THEN 1 END) > 5\n      THEN 'money_trauma_blocking_growth'\n      WHEN COUNT(CASE WHEN e.fears ILIKE '%not good enough%' THEN 1 END) > 3\n      THEN 'imposter_syndrome_limiting_scale'\n      WHEN COUNT(CASE WHEN e.emotions ILIKE '%overwhelmed%' THEN 1 END) > \n           COUNT(CASE WHEN e.emotions ILIKE '%excited%' THEN 1 END) * 2\n      THEN 'chronic_overwhelm_pattern'\n      ELSE 'psychologically_healthy_for_business'\n    END as psychological_business_diagnosis\n    \n  FROM emotions e\n  WHERE e.created_at >= NOW() - INTERVAL '60 days'\n  GROUP BY e.user_id\n),\n\nperformance_blocker_analysis AS (\n  SELECT \n    p.user_id,\n    -- What's actually blocking them\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%time%' OR p.\"WhatBlocked\" ILIKE '%busy%' THEN 1 END) as time_excuse_frequency,\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%money%' OR p.\"WhatBlocked\" ILIKE '%budget%' THEN 1 END) as money_excuse_frequency,\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%know%' OR p.\"WhatBlocked\" ILIKE '%how%' THEN 1 END) as knowledge_excuse_frequency,\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%perfect%' OR p.\"WhatBlocked\" ILIKE '%ready%' THEN 1 END) as perfection_excuse_frequency,\n    \n    -- Execution pattern analysis\n    COUNT(CASE WHEN p.\"WhatWentWell\" IS NOT NULL AND LENGTH(p.\"WhatWentWell\") > 10 THEN 1 END) as actual_wins,\n    COUNT(CASE WHEN p.\"TomorrowHurdle\" IS NOT NULL THEN 1 END) as forward_thinking_frequency,\n    \n    -- Blocker pattern diagnosis\n    CASE \n      WHEN COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%time%' THEN 1 END) > 10\n      THEN 'time_management_delusion'\n      WHEN COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%perfect%' THEN 1 END) > 5\n      THEN 'perfectionism_paralysis'\n      WHEN COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%know%' THEN 1 END) > 8\n      THEN 'analysis_paralysis_pattern'\n      WHEN COUNT(p.id) > 20 AND COUNT(CASE WHEN p.\"WhatWentWell\" IS NOT NULL THEN 1 END) < 5\n      THEN 'chronic_failure_pattern'\n      ELSE 'normal_execution_challenges'\n    END as execution_pattern_diagnosis\n    \n  FROM performance p\n  WHERE p.created_at >= NOW() - INTERVAL '60 days'\n  GROUP BY p.user_id\n),\n\nconversation_business_intelligence AS (\n  SELECT \n    c.user_id,\n    -- What they actually talk about vs what they should focus on\n    COUNT(CASE WHEN c.message ILIKE '%customer%' OR c.message ILIKE '%client%' THEN 1 END) as customer_focus_frequency,\n    COUNT(CASE WHEN c.message ILIKE '%revenue%' OR c.message ILIKE '%money%' OR c.message ILIKE '%profit%' THEN 1 END) as revenue_focus_frequency,\n    COUNT(CASE WHEN c.message ILIKE '%product%' OR c.message ILIKE '%feature%' THEN 1 END) as product_focus_frequency,\n    COUNT(CASE WHEN c.message ILIKE '%marketing%' OR c.message ILIKE '%traffic%' THEN 1 END) as marketing_focus_frequency,\n    COUNT(CASE WHEN c.message ILIKE '%compete%' OR c.message ILIKE '%other%' THEN 1 END) as competition_obsession_frequency,\n    \n    -- Conversation pattern diagnosis\n    CASE \n      WHEN COUNT(CASE WHEN c.message ILIKE '%product%' THEN 1 END) > \n           COUNT(CASE WHEN c.message ILIKE '%customer%' THEN 1 END) * 3\n      THEN 'product_obsessed_no_market_validation'\n      WHEN COUNT(CASE WHEN c.message ILIKE '%compete%' THEN 1 END) > 10\n      THEN 'competition_distracted'\n      WHEN COUNT(CASE WHEN c.message ILIKE '%revenue%' THEN 1 END) < 2\n      THEN 'revenue_avoidance_pattern'\n      ELSE 'healthy_business_conversations'\n    END as conversation_pattern_diagnosis,\n    \n    COUNT(c.id) as total_conversations\n    \n  FROM conversations c\n  WHERE c.created_at >= NOW() - INTERVAL '30 days'\n  AND c.message IS NOT NULL\n  GROUP BY c.user_id\n),\n\noperational_constraint_analysis AS (\n  SELECT \n    COALESCE(h.user_id, f.user_id, r.user_id) as user_id,\n    -- Life constraints affecting business\n    COALESCE(AVG(h.sleep_hours), 7) as avg_sleep,\n    COALESCE(AVG(h.energy_crashes::int), 1) as daily_energy_crashes,\n    COALESCE(AVG(h.stress_level), 5) as avg_stress_level,\n    \n    -- Family/time constraints\n    COALESCE(COUNT(fam.id), 0) as family_interaction_frequency,\n    COALESCE(AVG(fam.guilt_level), 3) as family_guilt_average,\n    \n    -- Routine stability\n    COALESCE(AVG(r.consistency_score), 0.5) as routine_consistency,\n    \n    -- Constraint diagnosis\n    CASE \n      WHEN COALESCE(AVG(h.sleep_hours), 7) < 6 AND COALESCE(AVG(h.stress_level), 5) > 7\n      THEN 'burnout_trajectory'\n      WHEN COALESCE(AVG(fam.guilt_level), 3) > 6\n      THEN 'family_guilt_constraint'\n      WHEN COALESCE(AVG(r.consistency_score), 0.5) < 0.3\n      THEN 'chaotic_lifestyle_blocking_business'\n      ELSE 'lifestyle_supports_business'\n    END as lifestyle_constraint_diagnosis\n    \n  FROM health h\n  FULL OUTER JOIN family fam ON h.user_id = fam.user_id\n  FULL OUTER JOIN routine r ON COALESCE(h.user_id, fam.user_id) = r.user_id\n  WHERE COALESCE(h.created_at, fam.created_at, r.created_at) >= NOW() - INTERVAL '30 days'\n  GROUP BY COALESCE(h.user_id, f.user_id, r.user_id)\n),\n\ncomprehensive_business_intelligence AS (\n  SELECT \n    COALESCE(\n      bfr.user_id, \n      bor.user_id, \n      bms.user_id, \n      grga.user_id, \n      ebp.user_id, \n      pba.user_id, \n      cbi.user_id, \n      oca.user_id\n    ) as user_id,\n    \n    -- Financial reality\n    COALESCE(bfr.stated_revenue, 0) as revenue,\n    COALESCE(bfr.actual_profit, 0) as profit,\n    COALESCE(bfr.financial_diagnosis, 'unknown') as financial_health,\n    COALESCE(bfr.growth_velocity, 0) as growth_rate,\n    \n    -- Business model reality\n    COALESCE(bms.detected_business_model, 'unclear') as actual_business_model,\n    COALESCE(bms.model_focus_diagnosis, 'unfocused') as focus_level,\n    \n    -- Sales effectiveness\n    COALESCE(bor.actual_sales_activity, 0) as sales_activity,\n    COALESCE(bor.sales_efficiency_diagnosis, 'unknown') as sales_efficiency,\n    \n    -- Goal vs reality gap\n    COALESCE(grga.total_goals_set, 0) as goals_set,\n    COALESCE(grga.goals_achieved, 0) as goals_achieved,\n    COALESCE(grga.goal_psychology_diagnosis, 'unknown') as goal_psychology,\n    COALESCE(grga.revenue_goal, 0) as revenue_target,\n    COALESCE(grga.revenue_progress, 0) as revenue_actual,\n    \n    -- Emotional/psychological blocks\n    COALESCE(ebp.psychological_business_diagnosis, 'unknown') as psychological_health,\n    COALESCE(ebp.financial_fear_frequency, 0) as money_fears,\n    COALESCE(ebp.imposter_syndrome_frequency, 0) as imposter_frequency,\n    \n    -- Performance patterns\n    COALESCE(pba.execution_pattern_diagnosis, 'unknown') as execution_patterns,\n    COALESCE(pba.time_excuse_frequency, 0) as time_excuses,\n    COALESCE(pba.perfection_excuse_frequency, 0) as perfection_excuses,\n    \n    -- Conversation focus\n    COALESCE(cbi.conversation_pattern_diagnosis, 'unknown') as conversation_focus,\n    COALESCE(cbi.customer_focus_frequency, 0) as customer_mentions,\n    COALESCE(cbi.revenue_focus_frequency, 0) as revenue_mentions,\n    \n    -- Lifestyle constraints\n    COALESCE(oca.lifestyle_constraint_diagnosis, 'unknown') as lifestyle_constraints,\n    COALESCE(oca.avg_stress_level, 5) as stress_level,\n    \n    NOW() as analysis_timestamp\n    \n  FROM business_financial_reality bfr\n  FULL OUTER JOIN business_operational_reality bor ON bfr.user_id = bor.user_id\n  FULL OUTER JOIN business_model_signals bms ON COALESCE(bfr.user_id, bor.user_id) = bms.user_id\n  FULL OUTER JOIN goal_reality_gap_analysis grga ON COALESCE(bfr.user_id, bor.user_id, bms.user_id) = grga.user_id\n  FULL OUTER JOIN emotional_business_psychology ebp ON COALESCE(bfr.user_id, bor.user_id, bms.user_id, grga.user_id) = ebp.user_id\n  FULL OUTER JOIN performance_blocker_analysis pba ON COALESCE(bfr.user_id, bor.user_id, bms.user_id, grga.user_id, ebp.user_id) = pba.user_id\n  FULL OUTER JOIN conversation_business_intelligence cbi ON COALESCE(bfr.user_id, bor.user_id, bms.user_id, grga.user_id, ebp.user_id, pba.user_id) = cbi.user_id\n  FULL OUTER JOIN operational_constraint_analysis oca ON COALESCE(bfr.user_id, bor.user_id, bms.user_id, grga.user_id, ebp.user_id, pba.user_id, cbi.user_id) = oca.user_id\n  WHERE COALESCE(bfr.user_id, bor.user_id, bms.user_id, grga.user_id, ebp.user_id, pba.user_id, cbi.user_id, oca.user_id) IS NOT NULL\n)\n\nSELECT * FROM comprehensive_business_intelligence\nORDER BY analysis_timestamp DESC",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1160,
        -1980
      ],
      "id": "42d7beb5-c031-440c-b9b1-6104ab481ac8",
      "name": "Comprehensive Business Analysis",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// PhD-LEVEL BUSINESS MODEL CLASSIFIER & FAILURE DETECTOR\n// This is the most sophisticated business intelligence analysis ever built\n\nconst businessData = $input.all();\n\nfunction analyzeBusiness(data) {\n  const analyses = [];\n  \n  for (const user of data) {\n    const userData = user.json;\n    \n    const analysis = {\n      user_id: userData.user_id,\n      analysis_timestamp: userData.analysis_timestamp,\n      \n      // CORE BUSINESS MODEL CLASSIFICATION\n      business_model_analysis: classifyBusinessModel(userData),\n      \n      // FINANCIAL REALITY CHECK\n      financial_diagnosis: diagnosefinancialHealth(userData),\n      \n      // GOAL VS REALITY GAP\n      goal_reality_gap: analyzeGoalRealityGap(userData),\n      \n      // PSYCHOLOGICAL BUSINESS BLOCKS\n      psychological_diagnosis: analyzePsychologicalBlocks(userData),\n      \n      // EXECUTION PATTERN ANALYSIS\n      execution_diagnosis: analyzeExecutionPatterns(userData),\n      \n      // STRATEGIC FAILURE POINTS\n      failure_analysis: identifyFailurePatterns(userData),\n      \n      // CONSTRAINT ANALYSIS\n      constraint_analysis: analyzeConstraints(userData),\n      \n      // STRATEGIC RECOMMENDATIONS\n      strategic_recommendations: generateStrategicRecommendations(userData),\n      \n      // OVERALL BUSINESS HEALTH SCORE\n      business_health_score: calculateBusinessHealthScore(userData),\n      \n      // INTERVENTION PRIORITIES\n      intervention_priorities: prioritizeInterventions(userData)\n    };\n    \n    analyses.push(analysis);\n  }\n  \n  return analyses;\n}\n\nfunction classifyBusinessModel(data) {\n  const model = data.actual_business_model;\n  const revenue = data.revenue || 0;\n  const profit = data.profit || 0;\n  \n  // Detect business model sophistication and stage\n  const stage = revenue < 1000 ? 'pre_revenue' : \n                revenue < 10000 ? 'early_revenue' :\n                revenue < 50000 ? 'growth_stage' :\n                revenue < 200000 ? 'scale_stage' : 'mature';\n  \n  // Detect model viability issues\n  const viabilityIssues = [];\n  \n  if (model === 'unclear' || model === 'unclear_or_hybrid') {\n    viabilityIssues.push('no_clear_business_model');\n  }\n  \n  if (data.focus_level === 'dangerously_diversified') {\n    viabilityIssues.push('too_many_revenue_streams');\n  }\n  \n  if (revenue > 0 && profit <= 0) {\n    viabilityIssues.push('revenue_without_profit');\n  }\n  \n  if (data.sales_efficiency === 'busy_but_broke') {\n    viabilityIssues.push('activity_without_results');\n  }\n  \n  // Model-specific analysis\n  const modelSpecificInsights = generateModelSpecificInsights(model, data);\n  \n  return {\n    detected_model: model,\n    business_stage: stage,\n    model_viability: viabilityIssues.length === 0 ? 'viable' : 'problematic',\n    viability_issues: viabilityIssues,\n    model_specific_insights: modelSpecificInsights,\n    confidence_score: calculateModelConfidence(data)\n  };\n}\n\nfunction generateModelSpecificInsights(model, data) {\n  const insights = [];\n  \n  switch(model) {\n    case 'saas':\n      if (data.revenue > 10000 && data.growth_rate < 0.1) {\n        insights.push('SaaS growth stagnation - churn or acquisition problem');\n      }\n      if (data.customer_mentions < 5) {\n        insights.push('Product-focused instead of customer-focused');\n      }\n      break;\n      \n    case 'agency':\n      if (data.revenue > 20000 && data.profit / data.revenue < 0.3) {\n        insights.push('Agency scaling inefficiently - margin compression');\n      }\n      if (data.time_excuses > 10) {\n        insights.push('Trading time for money - no leverage being built');\n      }\n      break;\n      \n    case 'ecommerce':\n      if (data.revenue > 15000 && data.customer_mentions < 3) {\n        insights.push('Product-push instead of market-pull strategy');\n      }\n      break;\n      \n    case 'content_creator':\n      if (data.revenue < 5000 && data.revenue_mentions < 2) {\n        insights.push('Audience without monetization strategy');\n      }\n      break;\n  }\n  \n  return insights;\n}\n\nfunction diagnosefinancialHealth(data) {\n  const diagnosis = {\n    overall_health: data.financial_health,\n    cash_runway: estimateCashRunway(data),\n    unit_economics: analyzeUnitEconomics(data),\n    growth_sustainability: analyzeGrowthSustainability(data),\n    financial_blindspots: identifyFinancialBlindspots(data)\n  };\n  \n  return diagnosis;\n}\n\nfunction estimateCashRunway(data) {\n  if (data.revenue === 0) return 'pre_revenue_risk';\n  if (data.profit <= 0) return 'burning_cash';\n  if (data.profit > 0 && data.growth_rate > 0.2) return 'healthy_growth';\n  return 'stable_but_slow';\n}\n\nfunction analyzeUnitEconomics(data) {\n  if (data.sales_efficiency === 'unsustainable_unit_economics') {\n    return 'broken_unit_economics';\n  }\n  if (data.sales_activity > 20 && data.revenue < 5000) {\n    return 'high_effort_low_return';\n  }\n  return 'unit_economics_unclear';\n}\n\nfunction analyzeGoalRealityGap(data) {\n  const goalAchievementRate = data.goals_achieved / (data.goals_set || 1);\n  const revenueGap = data.revenue_target > 0 ? \n    (data.revenue_target - data.revenue_actual) / data.revenue_target : 0;\n  \n  const gapAnalysis = {\n    goal_achievement_rate: goalAchievementRate,\n    revenue_reality_gap: revenueGap,\n    goal_psychology: data.goal_psychology,\n    delusion_score: calculateDelusionScore(data),\n    reality_check: generateRealityCheck(data)\n  };\n  \n  return gapAnalysis;\n}\n\nfunction calculateDelusionScore(data) {\n  let delusionPoints = 0;\n  \n  // Check for unrealistic goals\n  if (data.goal_psychology === 'delusional_targets') delusionPoints += 3;\n  if (data.goal_psychology === 'chronic_overcommitter') delusionPoints += 2;\n  \n  // Check for execution vs ambition mismatch\n  if (data.goals_set > 10 && data.goals_achieved < 2) delusionPoints += 2;\n  \n  // Check for revenue vs activity mismatch\n  if (data.revenue < 1000 && data.revenue_target > 50000) delusionPoints += 3;\n  \n  // Check for busy work vs results\n  if (data.sales_activity > 20 && data.revenue < 5000) delusionPoints += 2;\n  \n  return Math.min(10, delusionPoints);\n}\n\nfunction generateRealityCheck(data) {\n  const checks = [];\n  \n  if (data.revenue_target > data.revenue_actual * 5) {\n    checks.push('Revenue goal is 5x+ current reality - likely delusional');\n  }\n  \n  if (data.goals_set > 8 && data.goals_achieved < 2) {\n    checks.push('Goal hoarding - setting goals instead of achieving them');\n  }\n  \n  if (data.conversation_focus === 'product_obsessed_no_market_validation') {\n    checks.push('Building products nobody wants - market validation missing');\n  }\n  \n  if (data.time_excuses > 10) {\n    checks.push('Time excuse pattern - priorities misaligned with goals');\n  }\n  \n  return checks;\n}\n\nfunction analyzePsychologicalBlocks(data) {\n  const blocks = {\n    primary_psychology: data.psychological_health,\n    money_relationship: analyzemoneyRelationship(data),\n    imposter_syndrome_level: data.imposter_frequency > 3 ? 'high' : data.imposter_frequency > 1 ? 'moderate' : 'low',\n    self_sabotage_indicators: identifySelfSabotagePatterns(data),\n    breakthrough_blockers: identifyBreakthroughBlockers(data)\n  };\n  \n  return blocks;\n}\n\nfunction analyzemoneyRelationship(data) {\n  if (data.money_fears > 5) return 'money_trauma_active';\n  if (data.revenue_mentions < 2 && data.revenue > 0) return 'money_avoidance';\n  if (data.profit <= 0 && data.revenue > 10000) return 'money_management_issues';\n  return 'healthy_money_relationship';\n}\n\nfunction identifySelfSabotagePatterns(data) {\n  const patterns = [];\n  \n  if (data.execution_patterns === 'perfectionism_paralysis') {\n    patterns.push('perfectionism_preventing_shipping');\n  }\n  \n  if (data.focus_level === 'dangerously_diversified') {\n    patterns.push('shiny_object_syndrome');\n  }\n  \n  if (data.conversation_focus === 'competition_distracted') {\n    patterns.push('competitor_obsession_distraction');\n  }\n  \n  if (data.sales_efficiency === 'busy_but_broke') {\n    patterns.push('busy_work_instead_of_revenue_work');\n  }\n  \n  return patterns;\n}\n\nfunction analyzeExecutionPatterns(data) {\n  return {\n    execution_style: data.execution_patterns,\n    primary_excuses: identifyPrimaryExcuses(data),\n    execution_efficiency: calculateExecutionEfficiency(data),\n    breakthrough_proximity: assessBreakthroughProximity(data)\n  };\n}\n\nfunction identifyPrimaryExcuses(data) {\n  const excuses = [];\n  \n  if (data.time_excuses > 8) excuses.push('time_scarcity_excuse');\n  if (data.perfection_excuses > 5) excuses.push('perfection_excuse');\n  if (data.execution_patterns === 'analysis_paralysis_pattern') excuses.push('need_more_information_excuse');\n  \n  return excuses;\n}\n\nfunction calculateExecutionEfficiency(data) {\n  const goalsAchieved = data.goals_achieved || 0;\n  const goalsSet = data.goals_set || 1;\n  const revenuePerActivity = data.sales_activity > 0 ? data.revenue / data.sales_activity : 0;\n  \n  const efficiency = (goalsAchieved / goalsSet) * 0.6 + \n                    Math.min(revenuePerActivity / 1000, 1) * 0.4;\n  \n  return efficiency;\n}\n\nfunction identifyFailurePatterns(data) {\n  const failures = [];\n  \n  // Financial failure patterns\n  if (data.financial_health === 'death_spiral') {\n    failures.push({\n      type: 'financial_death_spiral',\n      severity: 'critical',\n      description: 'Negative cash flow with limited runway'\n    });\n  }\n  \n  // Market failure patterns\n  if (data.conversation_focus === 'product_obsessed_no_market_validation') {\n    failures.push({\n      type: 'product_market_misfit',\n      severity: 'high',\n      description: 'Building products without market validation'\n    });\n  }\n  \n  // Execution failure patterns\n  if (data.execution_patterns === 'chronic_failure_pattern') {\n    failures.push({\n      type: 'chronic_execution_failure',\n      severity: 'high',\n      description: 'Consistent pattern of not delivering on commitments'\n    });\n  }\n  \n  // Scaling failure patterns\n  if (data.financial_health === 'scaling_inefficiently') {\n    failures.push({\n      type: 'scaling_failure',\n      severity: 'moderate',\n      description: 'Revenue growth without profit improvement'\n    });\n  }\n  \n  // Psychological failure patterns\n  if (data.psychological_health === 'money_trauma_blocking_growth') {\n    failures.push({\n      type: 'psychological_ceiling',\n      severity: 'moderate',\n      description: 'Money trauma preventing business growth'\n    });\n  }\n  \n  return failures;\n}\n\nfunction analyzeConstraints(data) {\n  return {\n    lifestyle_constraints: data.lifestyle_constraints,\n    stress_level: data.stress_level,\n    time_constraints: data.time_excuses > 8 ? 'severe' : data.time_excuses > 4 ? 'moderate' : 'manageable',\n    energy_constraints: data.stress_level > 7 ? 'high_stress_limiting' : 'energy_available',\n    family_constraints: analyzedfamilyConstraints(data)\n  };\n}\n\nfunction analyzedfamilyConstraints(data) {\n  if (data.lifestyle_constraints === 'family_guilt_constraint') {\n    return 'family_guilt_blocking_business_focus';\n  }\n  return 'family_balance_manageable';\n}\n\nfunction generateStrategicRecommendations(data) {\n  const recommendations = [];\n  \n  // Financial recommendations\n  if (data.financial_health === 'revenue_without_profit') {\n    recommendations.push({\n      priority: 'critical',\n      category: 'financial',\n      action: 'Immediately audit all expenses and eliminate non-essential costs',\n      rationale: 'Revenue without profit indicates cost structure problems'\n    });\n  }\n  \n  // Business model recommendations\n  if (data.actual_business_model === 'unclear') {\n    recommendations.push({\n      priority: 'high',\n      category: 'strategy',\n      action: 'Focus on ONE revenue stream for next 90 days',\n      rationale: 'Unclear business model prevents optimization and scaling'\n    });\n  }\n  \n  // Execution recommendations\n  if (data.execution_patterns === 'perfectionism_paralysis') {\n    recommendations.push({\n      priority: 'high',\n      category: 'execution',\n      action: 'Set weekly shipping deadlines - deliver at 80% quality',\n      rationale: 'Perfect is the enemy of profitable'\n    });\n  }\n  \n  // Market recommendations\n  if (data.conversation_focus === 'product_obsessed_no_market_validation') {\n    recommendations.push({\n      priority: 'critical',\n      category: 'market',\n      action: 'Stop building features. Talk to 10 customers this week.',\n      rationale: 'Product obsession without customer validation leads to failure'\n    });\n  }\n  \n  // Psychological recommendations\n  if (data.psychological_health === 'money_trauma_blocking_growth') {\n    recommendations.push({\n      priority: 'moderate',\n      category: 'psychology',\n      action: 'Work with coach on money mindset - growth impossible with money trauma',\n      rationale: 'Money trauma creates artificial business ceilings'\n    });\n  }\n  \n  return recommendations;\n}\n\nfunction calculateBusinessHealthScore(data) {\n  let score = 50; // Base score\n  \n  // Financial health impact\n  if (data.financial_health === 'financially_stable') score += 20;\n  if (data.financial_health === 'death_spiral') score -= 30;\n  if (data.financial_health === 'revenue_without_profit') score -= 15;\n  \n  // Business model clarity impact\n  if (data.actual_business_model !== 'unclear') score += 15;\n  if (data.focus_level === 'focused_model') score += 10;\n  if (data.focus_level === 'dangerously_diversified') score -= 15;\n  \n  // Execution effectiveness impact\n  const executionEfficiency = calculateExecutionEfficiency(data);\n  score += (executionEfficiency * 20);\n  \n  // Goal reality alignment impact\n  const delusionScore = calculateDelusionScore(data);\n  score -= (delusionScore * 2);\n  \n  // Psychological health impact\n  if (data.psychological_health === 'psychologically_healthy_for_business') score += 10;\n  if (data.psychological_health === 'money_trauma_blocking_growth') score -= 15;\n  \n  return Math.max(0, Math.min(100, score));\n}\n\nfunction prioritizeInterventions(data) {\n  const interventions = [];\n  \n  // Critical interventions (business survival)\n  if (data.financial_health === 'death_spiral') {\n    interventions.push({\n      priority: 1,\n      type: 'emergency_financial',\n      message: 'EMERGENCY: Cash flow crisis detected. Immediate action required.',\n      timing: 'immediate'\n    });\n  }\n  \n  // High priority interventions (growth blockers)\n  if (data.conversation_focus === 'product_obsessed_no_market_validation') {\n    interventions.push({\n      priority: 2,\n      type: 'market_validation',\n      message: 'Stop building. Start talking to customers. Market validation missing.',\n      timing: 'this_week'\n    });\n  }\n  \n  if (data.execution_patterns === 'perfectionism_paralysis') {\n    interventions.push({\n      priority: 2,\n      type: 'execution_unblock',\n      message: 'Perfectionism is costing you $10K+/month in lost opportunities.',\n      timing: 'this_week'\n    });\n  }\n  \n  // Medium priority interventions (optimization)\n  if (data.psychological_health === 'money_trauma_blocking_growth') {\n    interventions.push({\n      priority: 3,\n      type: 'psychological_work',\n      message: 'Money trauma is creating an artificial business ceiling.',\n      timing: 'next_month'\n    });\n  }\n  \n  return interventions;\n}\n\nfunction calculateModelConfidence(data) {\n  let confidence = 0.5;\n  \n  if (data.revenue > 5000) confidence += 0.2;\n  if (data.sales_activity > 10) confidence += 0.15;\n  if (data.customer_mentions > 5) confidence += 0.1;\n  if (data.revenue_mentions > 3) confidence += 0.05;\n  \n  return Math.min(0.95, confidence);\n}\n\n// Execute the analysis\nconst result = analyzeBusiness(businessData);\n\nreturn {\n  total_users_analyzed: result.length,\n  business_analyses: result,\n  analysis_timestamp: new Date().toISOString()\n};"
      },
      "name": "PhD Business Intelligence",
      "type": "n8n-nodes-base.code",
      "position": [
        -960,
        -1980
      ],
      "id": "6bdbed6f-0899-43ce-92ae-27cda779046f",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store comprehensive business intelligence\nINSERT INTO user_business_context (\n  user_id,\n  business_type,\n  business_stage,\n  monthly_revenue_range,\n  product_category,\n  ecom_conversion_rate,\n  monthly_recurring_revenue,\n  client_count,\n  average_project_value,\n  client_retention_rate,\n  follower_count,\n  content_engagement_rate\n)\nSELECT \n  ba.user_id,\n  ba.detected_model,\n  ba.business_stage,\n  CASE \n    WHEN ba.revenue < 1000 THEN '0-1k'\n    WHEN ba.revenue < 5000 THEN '1k-5k'\n    WHEN ba.revenue < 25000 THEN '5k-25k'\n    WHEN ba.revenue < 100000 THEN '25k-100k'\n    ELSE '100k+'\n  END,\n  ba.detected_model,\n  0,\n  ba.revenue,\n  0,\n  0,\n  0.95,\n  0,\n  0\nFROM (\n  SELECT \n    '{{ $json.business_analyses[0].user_id }}' as user_id,\n    '{{ $json.business_analyses[0].business_model_analysis.detected_model }}' as detected_model,\n    '{{ $json.business_analyses[0].business_model_analysis.business_stage }}' as business_stage,\n    {{ $json.business_analyses[0].financial_diagnosis.revenue || 0 }} as revenue\n  WHERE '{{ $json.business_analyses[0].user_id }}' IS NOT NULL\n) ba\nON CONFLICT (user_id) DO UPDATE SET\n  business_type = EXCLUDED.business_type,\n  business_stage = EXCLUDED.business_stage,\n  monthly_revenue_range = EXCLUDED.monthly_revenue_range",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -760,
        -1980
      ],
      "id": "7c779dfd-12b0-41be-a5ee-a11188cdf5b7",
      "name": "Store Business Context",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store business intelligence insights\nINSERT INTO intelligence_synthesis (\n  user_id,\n  synthesis_date,\n  behavioral_dna,\n  growth_formula,\n  blind_spots,\n  breakthrough_recipe,\n  kryptonite,\n  superpower,\n  next_level_unlock,\n  intervention_playbook,\n  prediction_model\n)\nSELECT \n  '{{ $json.business_analyses[0].user_id }}',\n  NOW(),\n  jsonb_build_object(\n    'business_model', '{{ $json.business_analyses[0].business_model_analysis.detected_model }}',\n    'execution_style', '{{ $json.business_analyses[0].execution_diagnosis.execution_style }}',\n    'goal_psychology', '{{ $json.business_analyses[0].goal_reality_gap.goal_psychology }}',\n    'money_relationship', '{{ $json.business_analyses[0].psychological_diagnosis.money_relationship }}'\n  ),\n  jsonb_build_object(\n    'current_stage', '{{ $json.business_analyses[0].business_model_analysis.business_stage }}',\n    'growth_constraints', '{{ JSON.stringify($json.business_analyses[0].constraint_analysis) }}',\n    'efficiency_score', {{ $json.business_analyses[0].execution_diagnosis.execution_efficiency }}\n  ),\n  '{{ JSON.stringify($json.business_analyses[0].psychological_diagnosis.self_sabotage_indicators) }}'::jsonb,\n  jsonb_build_object(\n    'primary_focus', 'revenue_optimization',\n    'key_metrics', ARRAY['revenue', 'profit_margin', 'customer_acquisition'],\n    'breakthrough_indicators', '{{ JSON.stringify($json.business_analyses[0].failure_analysis) }}'\n  ),\n  jsonb_build_object(\n    'primary_weakness', '{{ $json.business_analyses[0].psychological_diagnosis.primary_psychology }}',\n    'sabotage_patterns', '{{ JSON.stringify($json.business_analyses[0].psychological_diagnosis.self_sabotage_indicators) }}'\n  ),\n  jsonb_build_object(\n    'business_strength', '{{ $json.business_analyses[0].business_model_analysis.detected_model }}',\n    'execution_efficiency', {{ $json.business_analyses[0].execution_diagnosis.execution_efficiency }}\n  ),\n  jsonb_build_object(\n    'next_milestone', 'revenue_optimization',\n    'unlock_requirements', '{{ JSON.stringify($json.business_analyses[0].strategic_recommendations) }}'\n  ),\n  '{{ JSON.stringify($json.business_analyses[0].intervention_priorities) }}'::jsonb,\n  jsonb_build_object(\n    'business_health_score', {{ $json.business_analyses[0].business_health_score }},\n    'failure_risk_level', CASE \n      WHEN {{ $json.business_analyses[0].business_health_score }} < 30 THEN 'high'\n      WHEN {{ $json.business_analyses[0].business_health_score }} < 60 THEN 'moderate'\n      ELSE 'low'\n    END\n  )\nWHERE '{{ $json.business_analyses[0].user_id }}' IS NOT NULL\nON CONFLICT (user_id) DO UPDATE SET\n  behavioral_dna = EXCLUDED.behavioral_dna,\n  growth_formula = EXCLUDED.growth_formula,\n  blind_spots = EXCLUDED.blind_spots,\n  kryptonite = EXCLUDED.kryptonite,\n  intervention_playbook = EXCLUDED.intervention_playbook,\n  synthesis_date = EXCLUDED.synthesis_date",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -560,
        -1980
      ],
      "id": "55fdb34f-1ab9-4a15-b80e-da8d29b9131d",
      "name": "Store Intelligence Synthesis",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Queue critical business interventions\nINSERT INTO intervention_queue (\n  user_id,\n  intervention_type,\n  reasons,\n  scheduled_for,\n  message,\n  expected_impact,\n  breakthrough_potential,\n  priority,\n  status,\n  metadata,\n  created_at\n)\nSELECT \n  '{{ $json.business_analyses[0].user_id }}',\n  intervention->>'type',\n  'Business intelligence analysis detected critical issue',\n  CASE \n    WHEN intervention->>'timing' = 'immediate' THEN NOW()\n    WHEN intervention->>'timing' = 'this_week' THEN NOW() + INTERVAL '1 day'\n    ELSE NOW() + INTERVAL '7 days'\n  END,\n  intervention->>'message',\n  'business_optimization',\n  0.9,\n  (intervention->>'priority')::int,\n  'scheduled',\n  jsonb_build_object(\n    'business_health_score', {{ $json.business_analyses[0].business_health_score }},\n    'analysis_type', 'comprehensive_business_intelligence',\n    'failure_patterns', '{{ JSON.stringify($json.business_analyses[0].failure_analysis) }}'\n  ),\n  NOW()\nFROM json_array_elements('{{ JSON.stringify($json.business_analyses[0].intervention_priorities) }}'::json) intervention\nWHERE '{{ $json.business_analyses[0].user_id }}' IS NOT NULL\nAND (intervention->>'priority')::int <= 2",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -360,
        -1980
      ],
      "id": "49d28938-4c32-4c1a-ac5c-23d6982c8f6e",
      "name": "Queue Business Interventions",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {},
      "name": "Hourly Breakthrough Scan",
      "type": "n8n-nodes-base.cron",
      "position": [
        -1360,
        -1720
      ],
      "id": "d767675f-e5e8-4f58-b945-968fe6aaf3a7",
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- BREAKTHROUGH PROXIMITY DETECTION ACROSS ALL LIFE DOMAINS\n-- This reads EVERYTHING to detect breakthrough convergence patterns\n\nWITH active_users AS (\n  SELECT DISTINCT user_id \n  FROM conversations \n  WHERE created_at >= NOW() - INTERVAL '48 hours'\n),\n\nemotional_pressure_buildup AS (\n  SELECT \n    e.user_id,\n    -- Fear intensity and evolution\n    COUNT(CASE WHEN e.fears ILIKE '%fail%' OR e.fears ILIKE '%not good enough%' THEN 1 END) as failure_fears,\n    COUNT(CASE WHEN e.fears ILIKE '%money%' OR e.fears ILIKE '%broke%' THEN 1 END) as money_fears,\n    COUNT(CASE WHEN e.fears ILIKE '%stuck%' OR e.fears ILIKE '%trapped%' THEN 1 END) as stuck_fears,\n    \n    -- Emotional volatility indicators\n    COUNT(CASE WHEN e.emotions ILIKE '%overwhelmed%' OR e.emotions ILIKE '%breaking%' THEN 1 END) as overwhelm_episodes,\n    COUNT(CASE WHEN e.emotions ILIKE '%frustrated%' OR e.emotions ILIKE '%angry%' THEN 1 END) as frustration_episodes,\n    COUNT(CASE WHEN e.emotions ILIKE '%breakthrough%' OR e.emotions ILIKE '%clarity%' THEN 1 END) as breakthrough_language,\n    COUNT(CASE WHEN e.emotions ILIKE '%ready%' OR e.emotions ILIKE '%enough%' OR e.emotions ILIKE '%done%' THEN 1 END) as readiness_signals,\n    \n    -- Emotional pattern shift detection\n    AVG(e.confidence_level) as avg_emotional_confidence,\n    STDDEV(e.confidence_level) as emotional_volatility,\n    \n    -- Recent vs historical emotional state\n    COUNT(CASE WHEN e.created_at >= NOW() - INTERVAL '7 days' AND (e.emotions ILIKE '%breakthrough%' OR e.emotions ILIKE '%ready%') THEN 1 END) as recent_breakthrough_mentions\n    \n  FROM emotions e\n  INNER JOIN active_users au ON e.user_id = au.user_id\n  WHERE e.created_at >= NOW() - INTERVAL '30 days'\n  GROUP BY e.user_id\n),\n\ngoal_frustration_analysis AS (\n  SELECT \n    g.user_id,\n    -- Goal achievement vs aspiration gap\n    COUNT(*) as total_goals_set,\n    COUNT(CASE WHEN g.status = 'completed' THEN 1 END) as goals_achieved,\n    COUNT(CASE WHEN g.deadline < CURRENT_DATE AND g.status != 'completed' THEN 1 END) as overdue_goals,\n    COUNT(CASE WHEN g.created_at >= NOW() - INTERVAL '14 days' THEN 1 END) as recent_goal_setting,\n    \n    -- Goal escalation patterns\n    MAX(CASE WHEN g.goal_type = 'revenue' THEN g.target_value END) as max_revenue_goal,\n    AVG(CASE WHEN g.goal_type = 'revenue' THEN g.target_value END) as avg_revenue_goal,\n    \n    -- Goal confidence and emotional state\n    AVG(g.confidence_level) as goal_confidence,\n    STDDEV(g.confidence_level) as goal_confidence_volatility,\n    \n    -- Frustration indicators\n    CASE \n      WHEN COUNT(CASE WHEN g.deadline < CURRENT_DATE AND g.status != 'completed' THEN 1 END) > \n           COUNT(CASE WHEN g.status = 'completed' THEN 1 END) * 2\n      THEN 'chronic_goal_failure'\n      WHEN COUNT(CASE WHEN g.created_at >= NOW() - INTERVAL '7 days' THEN 1 END) > 5\n      THEN 'goal_setting_frenzy'\n      ELSE 'normal_goal_pattern'\n    END as goal_frustration_pattern\n    \n  FROM goals g\n  INNER JOIN active_users au ON g.user_id = au.user_id\n  WHERE g.created_at >= NOW() - INTERVAL '90 days'\n  GROUP BY g.user_id\n),\n\nperformance_degradation_signals AS (\n  SELECT \n    p.user_id,\n    -- Performance trend analysis\n    COUNT(CASE WHEN p.\"WhatWentWell\" IS NULL OR LENGTH(p.\"WhatWentWell\") < 10 THEN 1 END) as low_performance_days,\n    COUNT(CASE WHEN p.\"WhatBlocked\" IS NOT NULL AND LENGTH(p.\"WhatBlocked\") > 20 THEN 1 END) as high_blocker_days,\n    \n    -- Blocker pattern escalation\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%everything%' OR p.\"WhatBlocked\" ILIKE '%can\\'t%' THEN 1 END) as desperation_signals,\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%same%' OR p.\"WhatBlocked\" ILIKE '%stuck%' OR p.\"WhatBlocked\" ILIKE '%loop%' THEN 1 END) as stuck_pattern_signals,\n    \n    -- Tomorrow hurdle complexity\n    AVG(LENGTH(COALESCE(p.\"TomorrowHurdle\", ''))) as avg_hurdle_complexity,\n    COUNT(CASE WHEN p.\"TomorrowHurdle\" ILIKE '%don\\'t know%' OR p.\"TomorrowHurdle\" ILIKE '%unclear%' THEN 1 END) as uncertainty_signals,\n    \n    -- Performance confidence trend\n    AVG(p.confidence_level) as performance_confidence,\n    \n    -- Recent performance crisis indicators\n    COUNT(CASE WHEN p.created_at >= NOW() - INTERVAL '7 days' AND p.\"WhatBlocked\" ILIKE '%everything%' THEN 1 END) as recent_crisis_signals\n    \n  FROM performance p\n  INNER JOIN active_users au ON p.user_id = au.user_id\n  WHERE p.created_at >= NOW() - INTERVAL '45 days'\n  GROUP BY p.user_id\n),\n\nbusiness_pressure_convergence AS (\n  SELECT \n    COALESCE(bf.user_id, bs.user_id, bg.user_id) as user_id,\n    \n    -- Financial pressure indicators\n    COALESCE(bf.gross_revenue, 0) as revenue,\n    COALESCE(bf.net_revenue, 0) as profit,\n    COALESCE(bf.cash_flow, 0) as cash_flow,\n    COALESCE(bf.runway_months, 12) as runway,\n    \n    -- Sales pressure\n    COALESCE(bs.deal_count, 0) as recent_sales_activity,\n    COALESCE(bs.won_deals, 0) as won_deals,\n    COALESCE(bs.avg_energy, 5) as sales_energy_level,\n    \n    -- Goal vs reality pressure\n    COALESCE(bg.revenue_goal, 0) as stated_revenue_goal,\n    \n    -- Business stress calculation\n    CASE \n      WHEN bf.cash_flow < 0 AND bf.runway_months < 6 THEN 'financial_crisis'\n      WHEN bf.gross_revenue > 0 AND bf.net_revenue <= 0 THEN 'profitability_pressure'\n      WHEN bg.revenue_goal > bf.gross_revenue * 3 THEN 'unrealistic_expectations'\n      WHEN bs.deal_count > 10 AND bs.won_deals = 0 THEN 'sales_frustration'\n      ELSE 'manageable_business_pressure'\n    END as business_pressure_level\n    \n  FROM (\n    SELECT user_id, gross_revenue, net_revenue, cash_flow, runway_months\n    FROM \"business:finance\" \n    WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) bf\n  FULL OUTER JOIN (\n    SELECT \n      user_id, \n      COUNT(*) as deal_count,\n      COUNT(CASE WHEN deal_stage = 'closed_won' THEN 1 END) as won_deals,\n      AVG(energy_level_during_sale) as avg_energy\n    FROM \"business:sales\" \n    WHERE created_at >= NOW() - INTERVAL '30 days'\n    GROUP BY user_id\n  ) bs ON bf.user_id = bs.user_id\n  FULL OUTER JOIN (\n    SELECT user_id, MAX(target_value) as revenue_goal\n    FROM goals \n    WHERE goal_type = 'revenue' AND created_at >= NOW() - INTERVAL '60 days'\n    GROUP BY user_id\n  ) bg ON COALESCE(bf.user_id, bs.user_id) = bg.user_id\n),\n\nlifestyle_constraint_pressure AS (\n  SELECT \n    COALESCE(h.user_id, f.user_id, r.user_id, fam.user_id) as user_id,\n    \n    -- Health degradation signals\n    COALESCE(AVG(h.sleep_hours), 7) as avg_sleep,\n    COALESCE(AVG(h.stress_level), 5) as avg_stress,\n    COALESCE(AVG(h.energy_crashes::int), 1) as daily_crashes,\n    COALESCE(AVG(h.mental_clarity), 7) as mental_clarity,\n    \n    -- Fitness routine breakdown\n    COALESCE(COUNT(CASE WHEN f.missed_planned_workout = true THEN 1 END), 0) as missed_workouts,\n    COALESCE(AVG(f.energy_after), 6) as post_workout_energy,\n    \n    -- Routine stability collapse\n    COALESCE(AVG(r.consistency_score), 0.7) as routine_consistency,\n    COALESCE(COUNT(CASE WHEN r.completed = false THEN 1 END), 0) as routine_breaks,\n    \n    -- Family pressure\n    COALESCE(AVG(fam.guilt_level), 3) as family_guilt,\n    COALESCE(COUNT(CASE WHEN fam.work_interrupted = true THEN 1 END), 0) as work_family_conflicts,\n    \n    -- Lifestyle pressure diagnosis\n    CASE \n      WHEN COALESCE(AVG(h.sleep_hours), 7) < 6 AND COALESCE(AVG(h.stress_level), 5) > 7\n      THEN 'burnout_imminent'\n      WHEN COALESCE(AVG(fam.guilt_level), 3) > 6 AND COALESCE(COUNT(CASE WHEN fam.work_interrupted = true THEN 1 END), 0) > 5\n      THEN 'family_business_conflict'\n      WHEN COALESCE(AVG(r.consistency_score), 0.7) < 0.3\n      THEN 'routine_collapse'\n      ELSE 'lifestyle_stable'\n    END as lifestyle_pressure_level\n    \n  FROM (\n    SELECT user_id, sleep_hours, stress_level, energy_crashes, mental_clarity\n    FROM health WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) h\n  FULL OUTER JOIN (\n    SELECT user_id, missed_planned_workout, energy_after\n    FROM fitness WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) f ON h.user_id = f.user_id\n  FULL OUTER JOIN (\n    SELECT user_id, consistency_score, completed\n    FROM routine WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) r ON COALESCE(h.user_id, f.user_id) = r.user_id\n  FULL OUTER JOIN (\n    SELECT user_id, guilt_level, work_interrupted\n    FROM family WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) fam ON COALESCE(h.user_id, f.user_id, r.user_id) = fam.user_id\n  GROUP BY COALESCE(h.user_id, f.user_id, r.user_id, fam.user_id)\n),\n\nconversation_breakthrough_signals AS (\n  SELECT \n    c.user_id,\n    -- Breakthrough language detection\n    COUNT(CASE WHEN c.message ILIKE '%breakthrough%' OR c.message ILIKE '%figured out%' THEN 1 END) as breakthrough_mentions,\n    COUNT(CASE WHEN c.message ILIKE '%realize%' OR c.message ILIKE '%understand%' OR c.message ILIKE '%see now%' THEN 1 END) as realization_language,\n    COUNT(CASE WHEN c.message ILIKE '%enough%' OR c.message ILIKE '%done with%' OR c.message ILIKE '%ready to%' THEN 1 END) as readiness_language,\n    COUNT(CASE WHEN c.message ILIKE '%change%' OR c.message ILIKE '%different%' OR c.message ILIKE '%new way%' THEN 1 END) as change_language,\n    \n    -- Desperation to breakthrough language progression\n    COUNT(CASE WHEN c.message ILIKE '%can\\'t keep%' OR c.message ILIKE '%has to change%' THEN 1 END) as desperation_language,\n    \n    -- Message intensity and frequency changes\n    COUNT(CASE WHEN c.created_at >= NOW() - INTERVAL '48 hours' THEN 1 END) as recent_message_frequency,\n    AVG(LENGTH(c.message)) as avg_message_length,\n    \n    -- AI confidence in breakthrough proximity\n    AVG(CASE WHEN c.created_at >= NOW() - INTERVAL '7 days' THEN c.ai_confidence_avg END) as recent_ai_confidence\n    \n  FROM conversations c\n  INNER JOIN active_users au ON c.user_id = au.user_id\n  WHERE c.created_at >= NOW() - INTERVAL '21 days'\n  AND c.message IS NOT NULL\n  GROUP BY c.user_id\n),\n\nlever_usage_desperation AS (\n  SELECT \n    l.user_id,\n    -- Leverage seeking behavior escalation\n    COUNT(*) as total_leverage_attempts,\n    COUNT(CASE WHEN l.created_at >= NOW() - INTERVAL '7 days' THEN 1 END) as recent_leverage_attempts,\n    COUNT(CASE WHEN l.still_using = false THEN 1 END) as failed_leverage_attempts,\n    \n    -- Leverage confidence degradation\n    AVG(l.confidence_level) as leverage_confidence,\n    COALESCE(SUM(l.time_saved_hours), 0) as time_saved,\n    COALESCE(AVG(l.multiplier_effect), 1) as avg_multiplier,\n    \n    -- Desperation in leverage seeking\n    CASE \n      WHEN COUNT(CASE WHEN l.created_at >= NOW() - INTERVAL '7 days' THEN 1 END) > 3\n      THEN 'leverage_seeking_frenzy'\n      WHEN COUNT(CASE WHEN l.still_using = false THEN 1 END) > COUNT(*) * 0.7\n      THEN 'leverage_failure_pattern'\n      ELSE 'normal_leverage_usage'\n    END as leverage_desperation_level\n    \n  FROM leverage l\n  INNER JOIN active_users au ON l.user_id = au.user_id\n  WHERE l.created_at >= NOW() - INTERVAL '60 days'\n  GROUP BY l.user_id\n),\n\ncomprehensive_breakthrough_analysis AS (\n  SELECT \n    au.user_id,\n    \n    -- EMOTIONAL PRESSURE METRICS\n    COALESCE(epb.failure_fears, 0) as failure_fear_count,\n    COALESCE(epb.money_fears, 0) as money_fear_count,\n    COALESCE(epb.overwhelm_episodes, 0) as overwhelm_frequency,\n    COALESCE(epb.breakthrough_language, 0) as breakthrough_mentions,\n    COALESCE(epb.readiness_signals, 0) as readiness_signals,\n    COALESCE(epb.recent_breakthrough_mentions, 0) as recent_breakthrough_talk,\n    COALESCE(epb.emotional_volatility, 0) as emotional_volatility,\n    \n    -- GOAL FRUSTRATION METRICS\n    COALESCE(gfa.total_goals_set, 0) as goals_set,\n    COALESCE(gfa.goals_achieved, 0) as goals_achieved,\n    COALESCE(gfa.overdue_goals, 0) as overdue_goals,\n    COALESCE(gfa.recent_goal_setting, 0) as recent_goal_activity,\n    gfa.goal_frustration_pattern,\n    \n    -- PERFORMANCE DEGRADATION METRICS\n    COALESCE(pds.low_performance_days, 0) as poor_performance_frequency,\n    COALESCE(pds.desperation_signals, 0) as desperation_episodes,\n    COALESCE(pds.stuck_pattern_signals, 0) as stuck_pattern_frequency,\n    COALESCE(pds.recent_crisis_signals, 0) as recent_crisis_mentions,\n    \n    -- BUSINESS PRESSURE METRICS\n    COALESCE(bpc.revenue, 0) as current_revenue,\n    COALESCE(bpc.profit, 0) as current_profit,\n    COALESCE(bpc.runway, 12) as cash_runway_months,\n    COALESCE(bpc.recent_sales_activity, 0) as sales_activity,\n    bpc.business_pressure_level,\n    \n    -- LIFESTYLE CONSTRAINT METRICS\n    COALESCE(lcp.avg_sleep, 7) as average_sleep_hours,\n    COALESCE(lcp.avg_stress, 5) as average_stress_level,\n    COALESCE(lcp.routine_consistency, 0.7) as routine_stability,\n    COALESCE(lcp.family_guilt, 3) as family_guilt_level,\n    lcp.lifestyle_pressure_level,\n    \n    -- CONVERSATION BREAKTHROUGH SIGNALS\n    COALESCE(cbs.breakthrough_mentions, 0) as conversation_breakthrough_signals,\n    COALESCE(cbs.realization_language, 0) as realization_frequency,\n    COALESCE(cbs.readiness_language, 0) as readiness_frequency,\n    COALESCE(cbs.desperation_language, 0) as desperation_frequency,\n    COALESCE(cbs.recent_message_frequency, 0) as recent_communication_intensity,\n    \n    -- LEVERAGE SEEKING DESPERATION\n    COALESCE(lud.total_leverage_attempts, 0) as leverage_attempts,\n    COALESCE(lud.recent_leverage_attempts, 0) as recent_leverage_seeking,\n    lud.leverage_desperation_level,\n    \n    NOW() as analysis_timestamp\n    \n  FROM active_users au\n  LEFT JOIN emotional_pressure_buildup epb ON au.user_id = epb.user_id\n  LEFT JOIN goal_frustration_analysis gfa ON au.user_id = gfa.user_id\n  LEFT JOIN performance_degradation_signals pds ON au.user_id = pds.user_id\n  LEFT JOIN business_pressure_convergence bpc ON au.user_id = bpc.user_id\n  LEFT JOIN lifestyle_constraint_pressure lcp ON au.user_id = lcp.user_id\n  LEFT JOIN conversation_breakthrough_signals cbs ON au.user_id = cbs.user_id\n  LEFT JOIN lever_usage_desperation lud ON au.user_id = lud.user_id\n)\n\nSELECT * FROM comprehensive_breakthrough_analysis\nWHERE user_id IS NOT NULL\nORDER BY analysis_timestamp DESC",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1160,
        -1720
      ],
      "id": "d3a8666d-006e-4525-9928-50375d24c89c",
      "name": "Comprehensive Breakthrough Scan",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ULTIMATE BREAKTHROUGH PROXIMITY DETECTOR\n// This analyzes convergence patterns across ALL life domains\n\nconst userData = $input.all();\n\nfunction detectBreakthroughProximity(data) {\n  const analyses = [];\n  \n  for (const user of data) {\n    const d = user.json;\n    \n    const analysis = {\n      user_id: d.user_id,\n      analysis_timestamp: d.analysis_timestamp,\n      \n      // PRESSURE CONVERGENCE ANALYSIS\n      pressure_analysis: analyzePressureConvergence(d),\n      \n      // EMOTIONAL BREAKTHROUGH INDICATORS\n      emotional_breakthrough: analyzeEmotionalBreakthrough(d),\n      \n      // PERFORMANCE BREAKDOWN PATTERNS\n      performance_breakdown: analyzePerformanceBreakdown(d),\n      \n      // GOAL FRUSTRATION CRITICAL MASS\n      goal_frustration: analyzeGoalFrustration(d),\n      \n      // BUSINESS PRESSURE CRISIS\n      business_crisis: analyzeBusinessCrisis(d),\n      \n      // LIFESTYLE CONSTRAINT OVERLOAD\n      lifestyle_overload: analyzeLifestyleOverload(d),\n      \n      // CONVERSATION PATTERN SHIFTS\n      conversation_shifts: analyzeConversationShifts(d),\n      \n      // LEVERAGE SEEKING DESPERATION\n      leverage_desperation: analyzeLeveragesDesperation(d),\n      \n      // OVERALL BREAKTHROUGH SCORING\n      breakthrough_score: calculateBreakthroughScore(d),\n      \n      // BREAKTHROUGH TIMING PREDICTION\n      breakthrough_timing: predictBreakthroughTiming(d),\n      \n      // INTERVENTION URGENCY\n      intervention_urgency: calculateInterventionUrgency(d),\n      \n      // BREAKTHROUGH TYPE PREDICTION\n      breakthrough_type: predictBreakthroughType(d)\n    };\n    \n    analyses.push(analysis);\n  }\n  \n  return analyses;\n}\n\nfunction analyzePressureConvergence(d) {\n  // Count domains under pressure\n  let pressureDomains = 0;\n  const pressureDetails = {};\n  \n  // Emotional pressure\n  if (d.failure_fear_count > 3 || d.overwhelm_frequency > 5) {\n    pressureDomains++;\n    pressureDetails.emotional_pressure = 'high';\n  }\n  \n  // Business pressure  \n  if (d.business_pressure_level === 'financial_crisis' || d.business_pressure_level === 'sales_frustration') {\n    pressureDomains++;\n    pressureDetails.business_pressure = 'critical';\n  }\n  \n  // Goal pressure\n  if (d.overdue_goals > d.goals_achieved * 2 || d.goal_frustration_pattern === 'chronic_goal_failure') {\n    pressureDomains++;\n    pressureDetails.goal_pressure = 'critical';\n  }\n  \n  // Lifestyle pressure\n  if (d.lifestyle_pressure_level === 'burnout_imminent' || d.average_stress_level > 7) {\n    pressureDomains++;\n    pressureDetails.lifestyle_pressure = 'severe';\n  }\n  \n  // Performance pressure\n  if (d.poor_performance_frequency > 10 || d.desperation_episodes > 3) {\n    pressureDomains++;\n    pressureDetails.performance_pressure = 'declining';\n  }\n  \n  return {\n    domains_under_pressure: pressureDomains,\n    pressure_details: pressureDetails,\n    convergence_level: pressureDomains >= 4 ? 'critical_convergence' : pressureDomains >= 3 ? 'high_convergence' : pressureDomains >= 2 ? 'moderate_convergence' : 'isolated_pressure'\n  };\n}\n\nfunction analyzeEmotionalBreakthrough(d) {\n  // Breakthrough readiness signals\n  const readinessScore = (\n    (d.breakthrough_mentions * 3) +\n    (d.readiness_signals * 2) +\n    (d.recent_breakthrough_talk * 4) +\n    (d.realization_frequency * 2)\n  );\n  \n  // Emotional volatility indicating internal shift\n  const volatilityIndicator = d.emotional_volatility > 2 ? 'high_volatility' : 'stable';\n  \n  // Desperation reaching critical mass\n  const desperationLevel = d.desperation_frequency > 5 ? 'critical' : d.desperation_frequency > 2 ? 'elevated' : 'normal';\n  \n  return {\n    readiness_score: readinessScore,\n    volatility: volatilityIndicator,\n    desperation_level: desperationLevel,\n    breakthrough_proximity: readinessScore > 15 ? 'imminent' : readinessScore > 8 ? 'approaching' : readinessScore > 3 ? 'building' : 'distant',\n    emotional_breakthrough_indicators: {\n      breakthrough_language: d.breakthrough_mentions,\n      readiness_signals: d.readiness_signals,\n      recent_breakthrough_talk: d.recent_breakthrough_talk,\n      realization_frequency: d.realization_frequency\n    }\n  };\n}\n\nfunction analyzePerformanceBreakdown(d) {\n  // Performance degradation patterns\n  const performanceScore = (\n    (d.poor_performance_frequency * 1) +\n    (d.desperation_episodes * 3) +\n    (d.stuck_pattern_frequency * 2) +\n    (d.recent_crisis_mentions * 4)\n  );\n  \n  // Pattern recognition\n  let breakdownPattern = 'stable';\n  if (d.stuck_pattern_frequency > 8) breakdownPattern = 'stuck_loop';\n  if (d.desperation_episodes > 5) breakdownPattern = 'desperation_spiral';\n  if (d.recent_crisis_mentions > 2) breakdownPattern = 'crisis_escalation';\n  \n  return {\n    performance_degradation_score: performanceScore,\n    breakdown_pattern: breakdownPattern,\n    breakdown_proximity: performanceScore > 20 ? 'imminent_breakdown' : performanceScore > 10 ? 'breakdown_approaching' : 'performance_stable',\n    crisis_indicators: {\n      poor_performance_days: d.poor_performance_frequency,\n      desperation_episodes: d.desperation_episodes,\n      stuck_patterns: d.stuck_pattern_frequency,\n      recent_crisis: d.recent_crisis_mentions\n    }\n  };\n}\n\nfunction analyzeGoalFrustration(d) {\n  // Goal frustration critical mass\n  const achievementRate = d.goals_set > 0 ? d.goals_achieved / d.goals_set : 0;\n  const overdueRate = d.goals_set > 0 ? d.overdue_goals / d.goals_set : 0;\n  \n  const frustrationScore = (\n    (overdueRate * 10) +\n    ((1 - achievementRate) * 8) +\n    (d.recent_goal_activity > 5 ? 3 : 0) // Goal setting frenzy\n  );\n  \n  return {\n    achievement_rate: achievementRate,\n    overdue_rate: overdueRate,\n    frustration_score: frustrationScore,\n    frustration_level: frustrationScore > 15 ? 'critical_frustration' : frustrationScore > 8 ? 'high_frustration' : 'manageable_frustration',\n    goal_pattern: d.goal_frustration_pattern,\n    breakthrough_trigger: frustrationScore > 12 && d.recent_goal_activity > 3 ? 'goal_frustration_breakthrough' : null\n  };\n}\n\nfunction analyzeBusinessCrisis(d) {\n  // Business pressure analysis\n  let crisisScore = 0;\n  const crisisFactors = [];\n  \n  // Financial crisis\n  if (d.current_profit <= 0 && d.current_revenue > 5000) {\n    crisisScore += 5;\n    crisisFactors.push('profitability_crisis');\n  }\n  \n  if (d.cash_runway_months < 6) {\n    crisisScore += 3;\n    crisisFactors.push('cash_runway_crisis');\n  }\n  \n  // Sales crisis\n  if (d.sales_activity > 10 && d.business_pressure_level === 'sales_frustration') {\n    crisisScore += 4;\n    crisisFactors.push('sales_effectiveness_crisis');\n  }\n  \n  // Revenue stagnation\n  if (d.current_revenue > 0 && d.current_revenue < 10000) {\n    crisisScore += 2;\n    crisisFactors.push('revenue_plateau');\n  }\n  \n  return {\n    crisis_score: crisisScore,\n    crisis_factors: crisisFactors,\n    crisis_level: d.business_pressure_level,\n    breakthrough_trigger: crisisScore > 8 ? 'business_crisis_breakthrough' : null\n  };\n}\n\nfunction analyzeLifestyleOverload(d) {\n  // Lifestyle constraint analysis\n  let overloadScore = 0;\n  const overloadFactors = [];\n  \n  // Sleep deprivation\n  if (d.average_sleep_hours < 6) {\n    overloadScore += 3;\n    overloadFactors.push('sleep_deprivation');\n  }\n  \n  // Stress overload\n  if (d.average_stress_level > 7) {\n    overloadScore += 3;\n    overloadFactors.push('chronic_stress');\n  }\n  \n  // Routine collapse\n  if (d.routine_stability < 0.3) {\n    overloadScore += 2;\n    overloadFactors.push('routine_breakdown');\n  }\n  \n  // Family pressure\n  if (d.family_guilt_level > 6) {\n    overloadScore += 2;\n    overloadFactors.push('family_guilt_pressure');\n  }\n  \n  return {\n    overload_score: overloadScore,\n    overload_factors: overloadFactors,\n    lifestyle_status: d.lifestyle_pressure_level,\n    breakthrough_trigger: overloadScore > 6 ? 'lifestyle_overload_breakthrough' : null\n  };\n}\n\nfunction analyzeConversationShifts(d) {\n  // Conversation pattern shift analysis\n  const intensityScore = (\n    (d.conversation_breakthrough_signals * 3) +\n    (d.readiness_frequency * 2) +\n    (d.desperation_frequency * 2) +\n    (d.recent_communication_intensity > 10 ? 2 : 0)\n  );\n  \n  return {\n    intensity_score: intensityScore,\n    breakthrough_language: d.conversation_breakthrough_signals,\n    readiness_language: d.readiness_frequency,\n    desperation_language: d.desperation_frequency,\n    communication_intensity: d.recent_communication_intensity,\n    shift_detected: intensityScore > 12 ? 'major_shift' : intensityScore > 6 ? 'moderate_shift' : 'stable_patterns'\n  };\n}\n\nfunction analyzeLeveragesDesperation(d) {\n  // Leverage seeking desperation analysis\n  const desperationScore = (\n    (d.recent_leverage_seeking * 2) +\n    (d.leverage_attempts > 5 ? 2 : 0) +\n    (d.leverage_desperation_level === 'leverage_seeking_frenzy' ? 3 : 0)\n  );\n  \n  return {\n    desperation_score: desperationScore,\n    leverage_pattern: d.leverage_desperation_level,\n    recent_seeking: d.recent_leverage_seeking,\n    total_attempts: d.leverage_attempts,\n    breakthrough_indicator: desperationScore > 5 ? 'leverage_desperation_breakthrough' : null\n  };\n}\n\nfunction calculateBreakthroughScore(d) {\n  // Comprehensive breakthrough score calculation\n  const pressureAnalysis = analyzePressureConvergence(d);\n  const emotionalAnalysis = analyzeEmotionalBreakthrough(d);\n  const performanceAnalysis = analyzePerformanceBreakdown(d);\n  const goalAnalysis = analyzeGoalFrustration(d);\n  const businessAnalysis = analyzeBusinessCrisis(d);\n  const lifestyleAnalysis = analyzeLifestyleOverload(d);\n  const conversationAnalysis = analyzeConversationShifts(d);\n  const leverageAnalysis = analyzeLeveragesDesperation(d);\n  \n  // Weighted breakthrough score\n  const score = (\n    (pressureAnalysis.domains_under_pressure * 15) +\n    (emotionalAnalysis.readiness_score * 1.5) +\n    (performanceAnalysis.performance_degradation_score * 1) +\n    (goalAnalysis.frustration_score * 1.2) +\n    (businessAnalysis.crisis_score * 2) +\n    (lifestyleAnalysis.overload_score * 1.5) +\n    (conversationAnalysis.intensity_score * 1) +\n    (leverageAnalysis.desperation_score * 1)\n  );\n  \n  return {\n    total_score: score,\n    proximity_level: score > 100 ? 'breakthrough_imminent' : score > 70 ? 'breakthrough_approaching' : score > 40 ? 'breakthrough_building' : 'breakthrough_distant',\n    confidence: Math.min(0.95, score / 120),\n    component_scores: {\n      pressure_convergence: pressureAnalysis.domains_under_pressure * 15,\n      emotional_readiness: emotionalAnalysis.readiness_score * 1.5,\n      performance_breakdown: performanceAnalysis.performance_degradation_score,\n      goal_frustration: goalAnalysis.frustration_score * 1.2,\n      business_crisis: businessAnalysis.crisis_score * 2,\n      lifestyle_overload: lifestyleAnalysis.overload_score * 1.5,\n      conversation_shifts: conversationAnalysis.intensity_score,\n      leverage_desperation: leverageAnalysis.desperation_score\n    }\n  };\n}\n\nfunction predictBreakthroughTiming(d) {\n  const breakthroughScore = calculateBreakthroughScore(d);\n  \n  if (breakthroughScore.total_score > 100) {\n    return {\n      timing: 'within_24_hours',\n      confidence: 0.9,\n      trigger_event: 'pressure_convergence_critical_mass'\n    };\n  }\n  \n  if (breakthroughScore.total_score > 70) {\n    return {\n      timing: 'within_72_hours',\n      confidence: 0.8,\n      trigger_event: 'emotional_readiness_with_external_pressure'\n    };\n  }\n  \n  if (breakthroughScore.total_score > 40) {\n    return {\n      timing: 'within_7_days',\n      confidence: 0.7,\n      trigger_event: 'accumulating_pressure_patterns'\n    };\n  }\n  \n  return {\n    timing: 'not_imminent',\n    confidence: 0.5,\n    trigger_event: 'insufficient_pressure_convergence'\n  };\n}\n\nfunction calculateInterventionUrgency(d) {\n  const breakthroughScore = calculateBreakthroughScore(d);\n  \n  if (breakthroughScore.total_score > 100) {\n    return {\n      urgency_level: 'immediate_intervention_required',\n      intervention_window: 'next_2_hours',\n      intervention_type: 'breakthrough_acceleration'\n    };\n  }\n  \n  if (breakthroughScore.total_score > 70) {\n    return {\n      urgency_level: 'high_priority_intervention',\n      intervention_window: 'within_12_hours',\n      intervention_type: 'breakthrough_preparation'\n    };\n  }\n  \n  if (breakthroughScore.total_score > 40) {\n    return {\n      urgency_level: 'scheduled_intervention',\n      intervention_window: 'within_48_hours',\n      intervention_type: 'pressure_guidance'\n    };\n  }\n  \n  return {\n    urgency_level: 'routine_monitoring',\n    intervention_window: 'normal_schedule',\n    intervention_type: 'pattern_tracking'\n  };\n}\n\nfunction predictBreakthroughType(d) {\n  const pressureAnalysis = analyzePressureConvergence(d);\n  const emotionalAnalysis = analyzeEmotionalBreakthrough(d);\n  const businessAnalysis = analyzeBusinessCrisis(d);\n  const goalAnalysis = analyzeGoalFrustration(d);\n  \n  // Determine breakthrough type based on strongest pressure domain\n  if (businessAnalysis.crisis_score > 8) {\n    return {\n      type: 'business_breakthrough',\n      description: 'Business model or revenue breakthrough imminent',\n      catalyst: 'business_pressure_critical_mass'\n    };\n  }\n  \n  if (emotionalAnalysis.readiness_score > 15) {\n    return {\n      type: 'emotional_breakthrough',\n      description: 'Psychological breakthrough and mindset shift',\n      catalyst: 'emotional_readiness_convergence'\n    };\n  }\n  \n  if (goalAnalysis.frustration_score > 12) {\n    return {\n      type: 'goal_realization_breakthrough',\n      description: 'Clarity on realistic goals and priorities',\n      catalyst: 'goal_frustration_critical_mass'\n    };\n  }\n  \n  if (pressureAnalysis.domains_under_pressure >= 4) {\n    return {\n      type: 'life_system_breakthrough',\n      description: 'Complete life system reorganization',\n      catalyst: 'multi_domain_pressure_convergence'\n    };\n  }\n  \n  return {\n    type: 'incremental_breakthrough',\n    description: 'Small but meaningful progress shift',\n    catalyst: 'gradual_pressure_buildup'\n  };\n}\n\n// Execute the analysis\nconst result = detectBreakthroughProximity(userData);\n\nreturn {\n  total_users_analyzed: result.length,\n  breakthrough_analyses: result,\n  analysis_timestamp: new Date().toISOString(),\n  critical_breakthroughs: result.filter(a => a.breakthrough_score.proximity_level === 'breakthrough_imminent').length,\n  approaching_breakthroughs: result.filter(a => a.breakthrough_score.proximity_level === 'breakthrough_approaching').length\n};"
      },
      "name": "Breakthrough Intelligence Engine",
      "type": "n8n-nodes-base.code",
      "position": [
        -960,
        -1720
      ],
      "id": "0e76fe2d-947d-4292-856a-a4903b44d803",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store breakthrough proximity analysis\nINSERT INTO living_memory (\n  user_id,\n  timestamp,\n  interaction_type,\n  content,\n  emotional_state,\n  energy_level,\n  focus_level,\n  linguistic_patterns,\n  behavioral_markers,\n  context_tags,\n  prediction_accuracy,\n  decision_points,\n  momentum_score,\n  breakthrough_proximity,\n  unspoken_needs,\n  growth_blockers\n)\nSELECT \n  ba.user_id,\n  NOW(),\n  'breakthrough_proximity_analysis',\n  jsonb_build_object(\n    'breakthrough_score', ba.breakthrough_score,\n    'pressure_analysis', ba.pressure_analysis,\n    'breakthrough_timing', ba.breakthrough_timing,\n    'breakthrough_type', ba.breakthrough_type\n  ),\n  CASE \n    WHEN ba.proximity_level = 'breakthrough_imminent' THEN 'breakthrough_ready'\n    WHEN ba.proximity_level = 'breakthrough_approaching' THEN 'pre_breakthrough_tension'\n    ELSE 'breakthrough_building'\n  END,\n  CASE \n    WHEN ba.total_score > 100 THEN 10\n    WHEN ba.total_score > 70 THEN 8\n    WHEN ba.total_score > 40 THEN 6\n    ELSE 4\n  END,\n  CASE \n    WHEN ba.total_score > 100 THEN 9\n    WHEN ba.total_score > 70 THEN 7\n    ELSE 5\n  END,\n  '{}',\n  jsonb_build_object(\n    'pressure_convergence', ba.pressure_convergence_level,\n    'emotional_breakthrough_proximity', ba.emotional_breakthrough_proximity,\n    'performance_breakdown_proximity', ba.performance_breakdown_proximity\n  ),\n  ARRAY['breakthrough_proximity', ba.proximity_level, ba.breakthrough_type],\n  ba.confidence,\n  jsonb_build_object(\n    'intervention_urgency', ba.intervention_urgency,\n    'breakthrough_timing', ba.breakthrough_timing\n  ),\n  CASE \n    WHEN ba.total_score > 50 THEN 9\n    ELSE 6\n  END,\n  ba.total_score / 100.0,\n  CASE \n    WHEN ba.proximity_level = 'breakthrough_imminent' THEN jsonb_build_object('need', 'breakthrough_acceleration', 'urgency', 'critical')\n    WHEN ba.proximity_level = 'breakthrough_approaching' THEN jsonb_build_object('need', 'breakthrough_preparation', 'urgency', 'high')\n    ELSE jsonb_build_object('need', 'pressure_guidance', 'urgency', 'medium')\n  END,\n  CASE \n    WHEN ba.pressure_convergence_level = 'critical_convergence' THEN jsonb_build_object('blocker', 'multi_domain_pressure_overload', 'impact', 'severe')\n    WHEN ba.performance_breakdown_proximity = 'imminent_breakdown' THEN jsonb_build_object('blocker', 'performance_system_failure', 'impact', 'high')\n    ELSE NULL\n  END\nFROM (\n  SELECT \n    '{{ $json.breakthrough_analyses[0].user_id }}' as user_id,\n    {{ $json.breakthrough_analyses[0].breakthrough_score.total_score }} as total_score,\n    '{{ $json.breakthrough_analyses[0].breakthrough_score.proximity_level }}' as proximity_level,\n    '{{ $json.breakthrough_analyses[0].breakthrough_type.type }}' as breakthrough_type,\n    {{ $json.breakthrough_analyses[0].breakthrough_score.confidence }} as confidence,\n    '{{ JSON.stringify($json.breakthrough_analyses[0].breakthrough_score) }}' as breakthrough_score,\n    '{{ JSON.stringify($json.breakthrough_analyses[0].pressure_analysis) }}' as pressure_analysis,\n    '{{ JSON.stringify($json.breakthrough_analyses[0].breakthrough_timing) }}' as breakthrough_timing,\n    '{{ JSON.stringify($json.breakthrough_analyses[0].intervention_urgency) }}' as intervention_urgency,\n    '{{ $json.breakthrough_analyses[0].pressure_analysis.convergence_level }}' as pressure_convergence_level,\n    '{{ $json.breakthrough_analyses[0].emotional_breakthrough.breakthrough_proximity }}' as emotional_breakthrough_proximity,\n    '{{ $json.breakthrough_analyses[0].performance_breakdown.breakdown_proximity }}' as performance_breakdown_proximity\n  WHERE '{{ $json.breakthrough_analyses[0].user_id }}' IS NOT NULL\n) ba",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -760,
        -1720
      ],
      "id": "c4f7d91b-e29e-40ad-882e-7eda193ea667",
      "name": "Store Breakthrough Analysis",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store breakthrough predictions\nINSERT INTO pattern_predictions (\n  prediction_id,\n  user_id,\n  pattern_id,\n  pattern_type,\n  prediction_text,\n  confidence_score,\n  source_type,\n  triggered_by,\n  prediction_timestamp,\n  outcome_recorded,\n  created_at\n)\nSELECT \n  gen_random_uuid(),\n  '{{ $json.breakthrough_analyses[0].user_id }}',\n  '{{ $json.breakthrough_analyses[0].breakthrough_type.type }}',\n  'breakthrough_proximity',\n  CASE \n    WHEN '{{ $json.breakthrough_analyses[0].breakthrough_timing.timing }}' = 'within_24_hours'\n    THEN 'Breakthrough imminent within 24 hours. {{ $json.breakthrough_analyses[0].breakthrough_type.description }}. Pressure convergence at critical mass.'\n    WHEN '{{ $json.breakthrough_analyses[0].breakthrough_timing.timing }}' = 'within_72_hours'\n    THEN 'Breakthrough approaching within 72 hours. {{ $json.breakthrough_analyses[0].breakthrough_type.description }}. Multiple pressure domains converging.'\n    WHEN '{{ $json.breakthrough_analyses[0].breakthrough_timing.timing }}' = 'within_7_days'\n    THEN 'Breakthrough building within 7 days. {{ $json.breakthrough_analyses[0].breakthrough_type.description }}. Pressure patterns accumulating.'\n    ELSE 'Breakthrough patterns developing. {{ $json.breakthrough_analyses[0].breakthrough_type.description }}.'\n  END,\n  {{ $json.breakthrough_analyses[0].breakthrough_timing.confidence }},\n  'breakthrough_proximity_monitor',\n  'pressure_convergence_analysis',\n  NOW(),\n  false,\n  NOW()\nWHERE '{{ $json.breakthrough_analyses[0].user_id }}' IS NOT NULL\nAND {{ $json.breakthrough_analyses[0].breakthrough_score.total_score }} > 40",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -560,
        -1720
      ],
      "id": "1a8befeb-31f8-4912-aae8-06a0bec87e21",
      "name": "Store Breakthrough Predictions",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.breakthrough_analyses[0].breakthrough_score.total_score }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ]
        },
        "options": {}
      },
      "name": "Breakthrough Approaching?",
      "type": "n8n-nodes-base.if",
      "position": [
        -360,
        -1720
      ],
      "id": "467906e2-405a-4754-bb5d-61a872300cd7",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Queue urgent breakthrough intervention\nINSERT INTO intervention_queue (\n  user_id,\n  intervention_type,\n  reasons,\n  scheduled_for,\n  message,\n  expected_impact,\n  breakthrough_potential,\n  priority,\n  status,\n  metadata,\n  created_at\n)\nVALUES (\n  '{{ $json.breakthrough_analyses[0].user_id }}',\n  '{{ $json.breakthrough_analyses[0].intervention_urgency.intervention_type }}',\n  'Breakthrough proximity detected: {{ $json.breakthrough_analyses[0].breakthrough_score.proximity_level }} - Score: {{ $json.breakthrough_analyses[0].breakthrough_score.total_score }}',\n  CASE \n    WHEN '{{ $json.breakthrough_analyses[0].intervention_urgency.intervention_window }}' = 'next_2_hours'\n    THEN NOW() + INTERVAL '30 minutes'\n    WHEN '{{ $json.breakthrough_analyses[0].intervention_urgency.intervention_window }}' = 'within_12_hours'\n    THEN NOW() + INTERVAL '2 hours'\n    ELSE NOW() + INTERVAL '6 hours'\n  END,\n  CASE \n    WHEN '{{ $json.breakthrough_analyses[0].breakthrough_timing.timing }}' = 'within_24_hours'\n    THEN 'BREAKTHROUGH IMMINENT: Your patterns show {{ $json.breakthrough_analyses[0].breakthrough_type.description }}. This is your moment. The pressure you\\'re feeling is breakthrough energy.'\n    WHEN '{{ $json.breakthrough_analyses[0].breakthrough_timing.timing }}' = 'within_72_hours'\n    THEN 'Breakthrough approaching fast. {{ $json.breakthrough_analyses[0].breakthrough_type.description }}. {{ Math.round($json.breakthrough_analyses[0].breakthrough_score.total_score) }}% pressure convergence detected.'\n    ELSE 'Breakthrough building. {{ $json.breakthrough_analyses[0].breakthrough_type.description }}. Pressure patterns indicate significant shift coming.'\n  END,\n  'breakthrough_catalyst',\n  {{ $json.breakthrough_analyses[0].breakthrough_timing.confidence }},\n  CASE \n    WHEN '{{ $json.breakthrough_analyses[0].intervention_urgency.urgency_level }}' = 'immediate_intervention_required' THEN 1\n    WHEN '{{ $json.breakthrough_analyses[0].intervention_urgency.urgency_level }}' = 'high_priority_intervention' THEN 1\n    ELSE 2\n  END,\n  'scheduled',\n  jsonb_build_object(\n    'breakthrough_score', {{ $json.breakthrough_analyses[0].breakthrough_score.total_score }},\n    'breakthrough_type', '{{ $json.breakthrough_analyses[0].breakthrough_type.type }}',\n    'pressure_domains', {{ $json.breakthrough_analyses[0].pressure_analysis.domains_under_pressure }},\n    'timing_confidence', {{ $json.breakthrough_analyses[0].breakthrough_timing.confidence }},\n    'intervention_urgency', '{{ $json.breakthrough_analyses[0].intervention_urgency.urgency_level }}'\n  ),\n  NOW()\n)",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -160,
        -1720
      ],
      "id": "fb0ff046-1227-4b5c-8621-840a977a47a4",
      "name": "Queue Breakthrough Intervention",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {},
      "name": "Weekly Pathway Analysis",
      "type": "n8n-nodes-base.cron",
      "position": [
        -1360,
        -1460
      ],
      "id": "1bde7b2f-1ad3-4313-9d3d-623fc18be1db",
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- ULTIMATE USER ARCHETYPE CLASSIFICATION SYSTEM\n-- This reads EVERYTHING to create the most sophisticated behavioral DNA profiles ever\n\nWITH comprehensive_user_intelligence AS (\n  SELECT DISTINCT user_id \n  FROM conversations \n  WHERE created_at >= NOW() - INTERVAL '7 days'\n),\n\nbusiness_execution_dna AS (\n  SELECT \n    COALESCE(bf.user_id, bs.user_id, bo.user_id, bp.user_id) as user_id,\n    \n    -- FINANCIAL DECISION PATTERNS\n    COALESCE(bf.gross_revenue, 0) as revenue,\n    COALESCE(bf.net_revenue, 0) as profit,\n    COALESCE(bf.revenue_growth_rate, 0) as growth_rate,\n    COALESCE(bf.customer_acquisition_cost, 0) as cac,\n    COALESCE(bf.lifetime_value, 0) as ltv,\n    CASE \n      WHEN bf.gross_revenue > 0 AND bf.net_revenue > bf.gross_revenue * 0.3 THEN 'profit_focused'\n      WHEN bf.revenue_growth_rate > 0.5 THEN 'growth_aggressive'\n      WHEN bf.customer_acquisition_cost > 0 AND bf.lifetime_value > bf.customer_acquisition_cost * 3 THEN 'unit_economics_sophisticated'\n      ELSE 'financial_experimental'\n    END as financial_sophistication,\n    \n    -- SALES EXECUTION PATTERNS\n    COALESCE(bs.deal_count, 0) as sales_volume,\n    COALESCE(bs.avg_deal_size, 0) as deal_sophistication,\n    COALESCE(bs.won_deals, 0) as closing_effectiveness,\n    COALESCE(bs.avg_sales_cycle, 30) as sales_cycle_preference,\n    CASE \n      WHEN bs.deal_count > 20 AND bs.won_deals < 3 THEN 'volume_spray_pray'\n      WHEN bs.deal_count < 10 AND bs.won_deals > bs.deal_count * 0.3 THEN 'selective_closer'\n      WHEN bs.avg_deal_size > 5000 THEN 'enterprise_hunter'\n      ELSE 'transactional_seller'\n    END as sales_archetype,\n    \n    -- OPERATIONAL SOPHISTICATION\n    COALESCE(bo.automation_level, 0) as automation_preference,\n    COALESCE(bo.manual_processes_count, 20) as manual_tolerance,\n    COALESCE(bo.time_spent_on_admin_hours, 20) as admin_burden,\n    COALESCE(bo.error_rate, 0.1) as operational_precision,\n    CASE \n      WHEN bo.automation_level > 7 THEN 'systems_builder'\n      WHEN bo.manual_processes_count > 15 AND bo.automation_level < 3 THEN 'manual_operator'\n      WHEN bo.error_rate < 0.05 THEN 'precision_operator'\n      ELSE 'operational_improviser'\n    END as operational_archetype,\n    \n    -- PRODUCT DEVELOPMENT PATTERNS\n    COALESCE(bp.product_market_fit_score, 0) as market_validation,\n    COALESCE(bp.feature_requests_backlog, 0) as feature_complexity,\n    COALESCE(bp.user_feedback_score, 5) as customer_centricity,\n    COALESCE(bp.development_velocity, 0) as build_speed,\n    CASE \n      WHEN bp.feature_requests_backlog > 20 AND bp.product_market_fit_score < 5 THEN 'feature_obsessed'\n      WHEN bp.user_feedback_score > 8 AND bp.product_market_fit_score > 7 THEN 'customer_obsessed'\n      WHEN bp.development_velocity > 8 THEN 'ship_fast_iterate'\n      ELSE 'product_perfectionist'\n    END as product_archetype\n    \n  FROM (\n    SELECT user_id, gross_revenue, net_revenue, revenue_growth_rate, customer_acquisition_cost, lifetime_value\n    FROM \"business:finance\" WHERE created_at >= NOW() - INTERVAL '60 days'\n  ) bf\n  FULL OUTER JOIN (\n    SELECT \n      user_id,\n      COUNT(*) as deal_count,\n      AVG(deal_value) as avg_deal_size,\n      COUNT(CASE WHEN deal_stage = 'closed_won' THEN 1 END) as won_deals,\n      AVG(time_to_close) as avg_sales_cycle\n    FROM \"business:sales\" WHERE created_at >= NOW() - INTERVAL '60 days'\n    GROUP BY user_id\n  ) bs ON bf.user_id = bs.user_id\n  FULL OUTER JOIN (\n    SELECT user_id, automation_level, manual_processes_count, time_spent_on_admin_hours, error_rate\n    FROM \"business:operations\" WHERE created_at >= NOW() - INTERVAL '60 days'\n  ) bo ON COALESCE(bf.user_id, bs.user_id) = bo.user_id\n  FULL OUTER JOIN (\n    SELECT user_id, product_market_fit_score, feature_requests_backlog, user_feedback_score, development_velocity\n    FROM \"business:product\" WHERE created_at >= NOW() - INTERVAL '60 days'\n  ) bp ON COALESCE(bf.user_id, bs.user_id, bo.user_id) = bp.user_id\n),\n\ngoal_psychology_dna AS (\n  SELECT \n    g.user_id,\n    -- GOAL SETTING PATTERNS\n    COUNT(*) as total_goals,\n    COUNT(CASE WHEN g.status = 'completed' THEN 1 END) as completed_goals,\n    COUNT(CASE WHEN g.deadline < CURRENT_DATE AND g.status != 'completed' THEN 1 END) as overdue_goals,\n    AVG(g.target_value) as avg_goal_ambition,\n    STDDEV(g.target_value) as goal_variance,\n    \n    -- GOAL PSYCHOLOGY PATTERNS\n    COUNT(CASE WHEN g.goal_type = 'revenue' THEN 1 END) as revenue_focused_goals,\n    COUNT(CASE WHEN g.goal_type = 'personal' THEN 1 END) as personal_development_goals,\n    COUNT(CASE WHEN g.priority = 1 THEN 1 END) as high_priority_goals,\n    \n    -- ACHIEVEMENT PSYCHOLOGY\n    CASE \n      WHEN COUNT(CASE WHEN g.status = 'completed' THEN 1 END)::float / COUNT(*) > 0.7 THEN 'high_achiever'\n      WHEN COUNT(CASE WHEN g.deadline < CURRENT_DATE AND g.status != 'completed' THEN 1 END) > COUNT(CASE WHEN g.status = 'completed' THEN 1 END) * 2 THEN 'chronic_overcommitter'\n      WHEN COUNT(*) > 15 AND COUNT(CASE WHEN g.status = 'completed' THEN 1 END) < 3 THEN 'goal_hoarder'\n      WHEN AVG(g.target_value) > 100000 THEN 'big_dreamer'\n      ELSE 'realistic_planner'\n    END as achievement_archetype,\n    \n    -- GOAL CONFIDENCE PATTERNS\n    AVG(g.confidence_level) as goal_confidence,\n    STDDEV(g.confidence_level) as confidence_volatility\n    \n  FROM goals g\n  INNER JOIN comprehensive_user_intelligence cui ON g.user_id = cui.user_id\n  WHERE g.created_at >= NOW() - INTERVAL '90 days'\n  GROUP BY g.user_id\n),\n\nperformance_execution_dna AS (\n  SELECT \n    p.user_id,\n    -- EXECUTION PATTERNS\n    COUNT(CASE WHEN p.\"WhatWentWell\" IS NOT NULL AND LENGTH(p.\"WhatWentWell\") > 20 THEN 1 END) as strong_performance_days,\n    COUNT(CASE WHEN p.\"WhatBlocked\" IS NOT NULL AND LENGTH(p.\"WhatBlocked\") > 10 THEN 1 END) as blocked_days,\n    COUNT(CASE WHEN p.\"TomorrowHurdle\" IS NOT NULL AND LENGTH(p.\"TomorrowHurdle\") > 10 THEN 1 END) as forward_thinking_days,\n    \n    -- BLOCKER PATTERN ANALYSIS\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%time%' THEN 1 END) as time_constraint_blocks,\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%perfecti%' OR p.\"WhatBlocked\" ILIKE '%ready%' THEN 1 END) as perfectionism_blocks,\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%know%' OR p.\"WhatBlocked\" ILIKE '%how%' THEN 1 END) as knowledge_blocks,\n    COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%money%' OR p.\"WhatBlocked\" ILIKE '%budget%' THEN 1 END) as resource_blocks,\n    \n    -- EXECUTION STYLE CLASSIFICATION\n    CASE \n      WHEN COUNT(CASE WHEN p.\"WhatWentWell\" IS NOT NULL AND LENGTH(p.\"WhatWentWell\") > 20 THEN 1 END) > \n           COUNT(CASE WHEN p.\"WhatBlocked\" IS NOT NULL THEN 1 END) THEN 'execution_strong'\n      WHEN COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%perfecti%' THEN 1 END) > 5 THEN 'perfectionist_paralyzed'\n      WHEN COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%time%' THEN 1 END) > 10 THEN 'time_management_challenged'\n      WHEN COUNT(CASE WHEN p.\"WhatBlocked\" ILIKE '%know%' THEN 1 END) > 8 THEN 'analysis_paralysis_prone'\n      ELSE 'execution_moderate'\n    END as execution_archetype,\n    \n    -- PERFORMANCE CONFIDENCE\n    AVG(p.confidence_level) as performance_confidence\n    \n  FROM performance p\n  INNER JOIN comprehensive_user_intelligence cui ON p.user_id = cui.user_id\n  WHERE p.created_at >= NOW() - INTERVAL '60 days'\n  GROUP BY p.user_id\n),\n\nemotional_psychological_dna AS (\n  SELECT \n    e.user_id,\n    -- FEAR PATTERNS\n    COUNT(CASE WHEN e.fears ILIKE '%fail%' THEN 1 END) as failure_fears,\n    COUNT(CASE WHEN e.fears ILIKE '%money%' OR e.fears ILIKE '%broke%' THEN 1 END) as money_fears,\n    COUNT(CASE WHEN e.fears ILIKE '%not good enough%' OR e.fears ILIKE '%imposter%' THEN 1 END) as imposter_fears,\n    COUNT(CASE WHEN e.fears ILIKE '%judgment%' OR e.fears ILIKE '%people%' THEN 1 END) as social_fears,\n    \n    -- EMOTIONAL PROCESSING PATTERNS\n    COUNT(CASE WHEN e.emotions ILIKE '%excited%' OR e.emotions ILIKE '%confident%' THEN 1 END) as positive_emotions,\n    COUNT(CASE WHEN e.emotions ILIKE '%overwhelmed%' OR e.emotions ILIKE '%stressed%' THEN 1 END) as stress_emotions,\n    COUNT(CASE WHEN e.emotions ILIKE '%frustrated%' OR e.emotions ILIKE '%angry%' THEN 1 END) as frustration_emotions,\n    \n    -- PSYCHOLOGICAL ARCHETYPE\n    CASE \n      WHEN COUNT(CASE WHEN e.fears ILIKE '%money%' THEN 1 END) > 5 THEN 'money_trauma_carrier'\n      WHEN COUNT(CASE WHEN e.fears ILIKE '%not good enough%' THEN 1 END) > 5 THEN 'imposter_syndrome_sufferer'\n      WHEN COUNT(CASE WHEN e.emotions ILIKE '%excited%' THEN 1 END) > COUNT(CASE WHEN e.emotions ILIKE '%stressed%' THEN 1 END) THEN 'naturally_optimistic'\n      WHEN COUNT(CASE WHEN e.emotions ILIKE '%overwhelmed%' THEN 1 END) > 8 THEN 'chronic_overwhelm_pattern'\n      ELSE 'emotionally_balanced'\n    END as psychological_archetype,\n    \n    -- EMOTIONAL CONFIDENCE\n    AVG(e.confidence_level) as emotional_confidence\n    \n  FROM emotions e\n  INNER JOIN comprehensive_user_intelligence cui ON e.user_id = cui.user_id\n  WHERE e.created_at >= NOW() - INTERVAL '60 days'\n  GROUP BY e.user_id\n),\n\nconversation_communication_dna AS (\n  SELECT \n    c.user_id,\n    -- COMMUNICATION PATTERNS\n    COUNT(*) as total_conversations,\n    AVG(LENGTH(c.message)) as avg_message_length,\n    COUNT(CASE WHEN c.message ILIKE '%help%' OR c.message ILIKE '%advice%' THEN 1 END) as help_seeking_frequency,\n    COUNT(CASE WHEN c.message ILIKE '%I think%' OR c.message ILIKE '%I believe%' THEN 1 END) as opinion_sharing_frequency,\n    COUNT(CASE WHEN c.message ILIKE '%how do I%' OR c.message ILIKE '%what should%' THEN 1 END) as guidance_seeking_frequency,\n    \n    -- TOPIC FOCUS PATTERNS\n    COUNT(CASE WHEN c.message ILIKE '%revenue%' OR c.message ILIKE '%money%' OR c.message ILIKE '%sales%' THEN 1 END) as business_focus,\n    COUNT(CASE WHEN c.message ILIKE '%stress%' OR c.message ILIKE '%overwhelm%' OR c.message ILIKE '%tired%' THEN 1 END) as stress_discussions,\n    COUNT(CASE WHEN c.message ILIKE '%goal%' OR c.message ILIKE '%target%' OR c.message ILIKE '%achieve%' THEN 1 END) as goal_discussions,\n    \n    -- COMMUNICATION ARCHETYPE\n    CASE \n      WHEN COUNT(CASE WHEN c.message ILIKE '%help%' THEN 1 END) > COUNT(*) * 0.3 THEN 'help_seeker'\n      WHEN AVG(LENGTH(c.message)) > 200 THEN 'detailed_communicator'\n      WHEN COUNT(CASE WHEN c.message ILIKE '%I think%' THEN 1 END) > COUNT(*) * 0.2 THEN 'opinion_sharer'\n      WHEN COUNT(CASE WHEN c.message ILIKE '%how do I%' THEN 1 END) > COUNT(*) * 0.2 THEN 'guidance_seeker'\n      ELSE 'balanced_communicator'\n    END as communication_archetype,\n    \n    -- CONVERSATION CONFIDENCE\n    AVG(c.ai_confidence_avg) as ai_interaction_confidence\n    \n  FROM conversations c\n  INNER JOIN comprehensive_user_intelligence cui ON c.user_id = cui.user_id\n  WHERE c.created_at >= NOW() - INTERVAL '30 days'\n  AND c.message IS NOT NULL\n  GROUP BY c.user_id\n),\n\nlifestyle_constraint_dna AS (\n  SELECT \n    COALESCE(h.user_id, f.user_id, r.user_id, fam.user_id) as user_id,\n    \n    -- HEALTH PATTERNS\n    COALESCE(AVG(h.sleep_hours), 7) as avg_sleep,\n    COALESCE(AVG(h.stress_level), 5) as avg_stress,\n    COALESCE(AVG(h.mental_clarity), 7) as avg_clarity,\n    \n    -- FITNESS PATTERNS\n    COALESCE(COUNT(CASE WHEN f.missed_planned_workout = false THEN 1 END), 0) as workout_consistency,\n    COALESCE(AVG(f.energy_after), 5) as fitness_energy_benefit,\n    \n    -- ROUTINE PATTERNS\n    COALESCE(AVG(r.consistency_score), 0.5) as routine_adherence,\n    COALESCE(COUNT(CASE WHEN r.completed = true THEN 1 END), 0) as routine_completion,\n    \n    -- FAMILY PATTERNS\n    COALESCE(AVG(fam.guilt_level), 3) as family_guilt,\n    COALESCE(COUNT(CASE WHEN fam.work_interrupted = true THEN 1 END), 0) as work_family_conflicts,\n    \n    -- LIFESTYLE ARCHETYPE\n    CASE \n      WHEN COALESCE(AVG(h.sleep_hours), 7) > 7.5 AND COALESCE(AVG(r.consistency_score), 0.5) > 0.8 THEN 'lifestyle_optimized'\n      WHEN COALESCE(AVG(h.stress_level), 5) > 7 AND COALESCE(AVG(fam.guilt_level), 3) > 6 THEN 'lifestyle_overwhelmed'\n      WHEN COALESCE(COUNT(CASE WHEN f.missed_planned_workout = false THEN 1 END), 0) > 15 THEN 'fitness_disciplined'\n      WHEN COALESCE(AVG(r.consistency_score), 0.5) < 0.3 THEN 'lifestyle_chaotic'\n      ELSE 'lifestyle_balanced'\n    END as lifestyle_archetype\n    \n  FROM (\n    SELECT user_id, sleep_hours, stress_level, mental_clarity\n    FROM health WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) h\n  FULL OUTER JOIN (\n    SELECT user_id, missed_planned_workout, energy_after\n    FROM fitness WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) f ON h.user_id = f.user_id\n  FULL OUTER JOIN (\n    SELECT user_id, consistency_score, completed\n    FROM routine WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) r ON COALESCE(h.user_id, f.user_id) = r.user_id\n  FULL OUTER JOIN (\n    SELECT user_id, guilt_level, work_interrupted\n    FROM family WHERE created_at >= NOW() - INTERVAL '30 days'\n  ) fam ON COALESCE(h.user_id, f.user_id, r.user_id) = fam.user_id\n  GROUP BY COALESCE(h.user_id, f.user_id, r.user_id, fam.user_id)\n),\n\nlever_usage_sophistication_dna AS (\n  SELECT \n    l.user_id,\n    -- LEVERAGE PATTERNS\n    COUNT(*) as total_leverage_attempts,\n    COUNT(CASE WHEN l.still_using = true THEN 1 END) as active_leverage_tools,\n    AVG(l.multiplier_effect) as avg_leverage_multiplier,\n    SUM(l.time_saved_hours) as total_time_saved,\n    AVG(l.implementation_difficulty) as implementation_comfort,\n    \n    -- LEVERAGE SOPHISTICATION\n    CASE \n      WHEN COUNT(CASE WHEN l.still_using = true THEN 1 END)::float / COUNT(*) > 0.7 THEN 'leverage_master'\n      WHEN AVG(l.multiplier_effect) > 3 THEN 'high_impact_lever_seeker'\n      WHEN COUNT(*) > 10 AND COUNT(CASE WHEN l.still_using = true THEN 1 END) < 3 THEN 'leverage_experimenter'\n      WHEN AVG(l.implementation_difficulty) < 3 THEN 'simple_leverage_preferrer'\n      ELSE 'leverage_moderate'\n    END as leverage_archetype,\n    \n    AVG(l.confidence_level) as leverage_confidence\n    \n  FROM leverage l\n  INNER JOIN comprehensive_user_intelligence cui ON l.user_id = cui.user_id\n  WHERE l.created_at >= NOW() - INTERVAL '90 days'\n  GROUP BY l.user_id\n),\n\ncomprehensive_archetype_analysis AS (\n  SELECT \n    cui.user_id,\n    \n    -- BUSINESS EXECUTION DNA\n    COALESCE(bed.revenue, 0) as business_revenue,\n    COALESCE(bed.financial_sophistication, 'unknown') as financial_approach,\n    COALESCE(bed.sales_archetype, 'unknown') as sales_style,\n    COALESCE(bed.operational_archetype, 'unknown') as operational_style,\n    COALESCE(bed.product_archetype, 'unknown') as product_approach,\n    \n    -- GOAL PSYCHOLOGY DNA\n    COALESCE(gpd.total_goals, 0) as goal_volume,\n    COALESCE(gpd.completed_goals, 0) as goal_achievement,\n    COALESCE(gpd.achievement_archetype, 'unknown') as achievement_style,\n    COALESCE(gpd.goal_confidence, 5) as goal_confidence_level,\n    \n    -- PERFORMANCE EXECUTION DNA\n    COALESCE(ped.execution_archetype, 'unknown') as execution_style,\n    COALESCE(ped.performance_confidence, 5) as execution_confidence,\n    COALESCE(ped.strong_performance_days, 0) as performance_strength,\n    \n    -- EMOTIONAL PSYCHOLOGICAL DNA\n    COALESCE(epd.psychological_archetype, 'unknown') as psychological_pattern,\n    COALESCE(epd.emotional_confidence, 5) as emotional_stability,\n    COALESCE(epd.failure_fears, 0) as fear_intensity,\n    \n    -- COMMUNICATION DNA\n    COALESCE(ccd.communication_archetype, 'unknown') as communication_style,\n    COALESCE(ccd.total_conversations, 0) as communication_frequency,\n    COALESCE(ccd.business_focus, 0) as business_conversation_focus,\n    \n    -- LIFESTYLE CONSTRAINT DNA\n    COALESCE(lcd.lifestyle_archetype, 'unknown') as lifestyle_pattern,\n    COALESCE(lcd.avg_sleep, 7) as lifestyle_health,\n    COALESCE(lcd.routine_adherence, 0.5) as lifestyle_discipline,\n    \n    -- LEVERAGE SOPHISTICATION DNA\n    COALESCE(lusd.leverage_archetype, 'unknown') as leverage_sophistication,\n    COALESCE(lusd.active_leverage_tools, 0) as leverage_adoption,\n    COALESCE(lusd.leverage_confidence, 5) as leverage_comfort,\n    \n    NOW() as analysis_timestamp\n    \n  FROM comprehensive_user_intelligence cui\n  LEFT JOIN business_execution_dna bed ON cui.user_id = bed.user_id\n  LEFT JOIN goal_psychology_dna gpd ON cui.user_id = gpd.user_id\n  LEFT JOIN performance_execution_dna ped ON cui.user_id = ped.user_id\n  LEFT JOIN emotional_psychological_dna epd ON cui.user_id = epd.user_id\n  LEFT JOIN conversation_communication_dna ccd ON cui.user_id = ccd.user_id\n  LEFT JOIN lifestyle_constraint_dna lcd ON cui.user_id = lcd.user_id\n  LEFT JOIN lever_usage_sophistication_dna lusd ON cui.user_id = lusd.user_id\n)\n\nSELECT * FROM comprehensive_archetype_analysis\nWHERE user_id IS NOT NULL\nORDER BY analysis_timestamp DESC",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1160,
        -1460
      ],
      "id": "d2b9e67a-86e3-47b9-8155-44d96a91a93f",
      "name": "Comprehensive Archetype Scan",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// PhD-LEVEL USER ARCHETYPE CLASSIFICATION ENGINE\n// The most sophisticated behavioral DNA analysis system ever created\n\nconst userData = $input.all();\n\nfunction classifyUserArchetypes(data) {\n  const analyses = [];\n  \n  for (const user of data) {\n    const d = user.json;\n    \n    const analysis = {\n      user_id: d.user_id,\n      analysis_timestamp: d.analysis_timestamp,\n      \n      // COMPREHENSIVE ARCHETYPE SCORING\n      archetype_scores: calculateArchetypeScores(d),\n      \n      // PRIMARY & SECONDARY PATHWAY ASSIGNMENT\n      pathway_assignment: assignOptimalPathways(d),\n      \n      // BEHAVIORAL DNA PROFILE\n      behavioral_dna: createBehavioralDNA(d),\n      \n      // COMMUNICATION STYLE OPTIMIZATION\n      communication_optimization: optimizeCommunicationStyle(d),\n      \n      // INTERVENTION STRATEGY CUSTOMIZATION\n      intervention_strategy: customizeInterventionStrategy(d),\n      \n      // CONSTRAINT PATTERN ANALYSIS\n      constraint_patterns: analyzeConstraintPatterns(d),\n      \n      // BREAKTHROUGH PATHWAY PREDICTION\n      breakthrough_pathway: predictBreakthroughPathway(d),\n      \n      // CONFIDENCE SCORING\n      pathway_confidence: calculatePathwayConfidence(d)\n    };\n    \n    analyses.push(analysis);\n  }\n  \n  return analyses;\n}\n\n// SOPHISTICATED ARCHETYPE SCORING SYSTEM\nfunction calculateArchetypeScores(d) {\n  const archetypes = {\n    systematic_builder: calculateSystematicBuilderScore(d),\n    intuitive_maverick: calculateIntuitiveMaverickScore(d),\n    analytical_optimizer: calculateAnalyticalOptimizerScore(d),\n    relationship_leverager: calculateRelationshipLeveragerScore(d),\n    creative_visionary: calculateCreativeVisionaryScore(d),\n    pragmatic_executor: calculatePragmaticExecutorScore(d),\n    strategic_planner: calculateStrategicPlannerScore(d),\n    adaptive_survivor: calculateAdaptiveSurvivorScore(d)\n  };\n  \n  return archetypes;\n}\n\nfunction calculateSystematicBuilderScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Operational sophistication indicators\n  if (d.operational_style === 'systems_builder') {\n    score += 25;\n    indicators.systems_preference = 'high';\n  }\n  \n  // Process-oriented execution\n  if (d.execution_style === 'execution_strong' && d.lifestyle_discipline > 0.7) {\n    score += 20;\n    indicators.process_discipline = 'high';\n  }\n  \n  // Goal achievement through systematic approach\n  if (d.achievement_style === 'high_achiever' && d.goal_confidence_level > 7) {\n    score += 15;\n    indicators.systematic_achievement = 'strong';\n  }\n  \n  // Communication style: detailed, methodical\n  if (d.communication_style === 'detailed_communicator') {\n    score += 10;\n    indicators.methodical_communication = 'present';\n  }\n  \n  // Leverage adoption: prefers systematic tools\n  if (d.leverage_sophistication === 'leverage_master') {\n    score += 15;\n    indicators.tool_systematization = 'advanced';\n  }\n  \n  // Financial sophistication: structured approach\n  if (d.financial_approach === 'unit_economics_sophisticated' || d.financial_approach === 'profit_focused') {\n    score += 15;\n    indicators.financial_structure = 'sophisticated';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Methodical, process-driven, builds sustainable systems. Prefers structure and predictability.'\n  };\n}\n\nfunction calculateIntuitiveMaverickScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Fast decision-making patterns\n  if (d.execution_style === 'execution_strong' && d.goal_volume > 10) {\n    score += 20;\n    indicators.fast_decision_making = 'high';\n  }\n  \n  // High risk tolerance in business\n  if (d.financial_approach === 'growth_aggressive' && d.business_revenue > 10000) {\n    score += 25;\n    indicators.risk_tolerance = 'high';\n  }\n  \n  // Breaks conventional patterns\n  if (d.sales_style === 'enterprise_hunter' || d.product_approach === 'ship_fast_iterate') {\n    score += 20;\n    indicators.unconventional_approach = 'strong';\n  }\n  \n  // Lifestyle indicates rule-breaking\n  if (d.lifestyle_pattern === 'lifestyle_chaotic' && d.business_revenue > 5000) {\n    score += 15;\n    indicators.chaos_tolerance = 'high';\n  }\n  \n  // Communication: opinion-driven\n  if (d.communication_style === 'opinion_sharer') {\n    score += 10;\n    indicators.opinion_confidence = 'high';\n  }\n  \n  // Leverage: experimental approach\n  if (d.leverage_sophistication === 'leverage_experimenter') {\n    score += 10;\n    indicators.experimental_mindset = 'present';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Fast decisions, intuition-driven, breaks conventional rules. Thrives in ambiguity.'\n  };\n}\n\nfunction calculateAnalyticalOptimizerScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Perfectionism tendencies\n  if (d.execution_style === 'perfectionist_paralyzed' || d.product_approach === 'product_perfectionist') {\n    score += 25;\n    indicators.perfectionism_drive = 'high';\n  }\n  \n  // Data-driven decision making\n  if (d.financial_approach === 'unit_economics_sophisticated') {\n    score += 20;\n    indicators.data_driven_decisions = 'strong';\n  }\n  \n  // Analysis paralysis patterns\n  if (d.execution_style === 'analysis_paralysis_prone') {\n    score += 15;\n    indicators.analysis_preference = 'extreme';\n  }\n  \n  // Detailed communication\n  if (d.communication_style === 'detailed_communicator' && d.communication_frequency > 20) {\n    score += 15;\n    indicators.detailed_analysis = 'comprehensive';\n  }\n  \n  // Optimization-focused leverage usage\n  if (d.leverage_sophistication === 'high_impact_lever_seeker') {\n    score += 15;\n    indicators.optimization_focus = 'high';\n  }\n  \n  // Fear of imperfection\n  if (d.psychological_pattern === 'imposter_syndrome_sufferer') {\n    score += 10;\n    indicators.perfection_anxiety = 'present';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Data-driven, optimization-focused, perfectionist tendencies. Seeks detailed analysis before action.'\n  };\n}\n\nfunction calculateRelationshipLeveragerScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Network-focused sales approach\n  if (d.sales_style === 'selective_closer') {\n    score += 20;\n    indicators.relationship_sales = 'strong';\n  }\n  \n  // Communication: help-seeking and collaborative\n  if (d.communication_style === 'help_seeker' || d.communication_style === 'guidance_seeker') {\n    score += 25;\n    indicators.collaborative_communication = 'high';\n  }\n  \n  // High business conversation focus (networking)\n  if (d.business_conversation_focus > 10) {\n    score += 15;\n    indicators.business_networking = 'active';\n  }\n  \n  // Leverage through relationships\n  if (d.leverage_adoption > 3 && d.communication_frequency > 15) {\n    score += 15;\n    indicators.relationship_leverage = 'sophisticated';\n  }\n  \n  // Customer-obsessed product approach\n  if (d.product_approach === 'customer_obsessed') {\n    score += 15;\n    indicators.customer_centricity = 'high';\n  }\n  \n  // Social fears indicate relationship importance\n  if (d.psychological_pattern === 'naturally_optimistic' && d.fear_intensity < 3) {\n    score += 10;\n    indicators.social_confidence = 'high';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Network-driven, relationship-focused, collaborative. Builds through connections and trust.'\n  };\n}\n\nfunction calculateCreativeVisionaryScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Big dreamer goal patterns\n  if (d.achievement_style === 'big_dreamer') {\n    score += 25;\n    indicators.visionary_goals = 'high';\n  }\n  \n  // Feature-obsessed (creative complexity)\n  if (d.product_approach === 'feature_obsessed') {\n    score += 20;\n    indicators.creative_complexity = 'high';\n  }\n  \n  // High goal volume (many ideas)\n  if (d.goal_volume > 15) {\n    score += 15;\n    indicators.idea_generation = 'prolific';\n  }\n  \n  // Communication: opinion sharing (vision communication)\n  if (d.communication_style === 'opinion_sharer') {\n    score += 15;\n    indicators.vision_communication = 'strong';\n  }\n  \n  // Chaotic lifestyle (creative chaos)\n  if (d.lifestyle_pattern === 'lifestyle_chaotic' && d.business_revenue < 10000) {\n    score += 10;\n    indicators.creative_chaos = 'present';\n  }\n  \n  // Experimental leverage approach\n  if (d.leverage_sophistication === 'leverage_experimenter') {\n    score += 15;\n    indicators.experimental_creativity = 'high';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Big picture thinking, creative solutions, inspiration-driven. Generates many ideas and possibilities.'\n  };\n}\n\nfunction calculatePragmaticExecutorScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Strong execution with practical results\n  if (d.execution_style === 'execution_strong' && d.business_revenue > 5000) {\n    score += 25;\n    indicators.results_focused_execution = 'high';\n  }\n  \n  // Profit-focused financial approach\n  if (d.financial_approach === 'profit_focused') {\n    score += 20;\n    indicators.profit_pragmatism = 'strong';\n  }\n  \n  // High achievement with realistic goals\n  if (d.achievement_style === 'high_achiever' || d.achievement_style === 'realistic_planner') {\n    score += 15;\n    indicators.practical_achievement = 'consistent';\n  }\n  \n  // Simple leverage preferences\n  if (d.leverage_sophistication === 'simple_leverage_preferrer') {\n    score += 15;\n    indicators.practical_tools = 'preferred';\n  }\n  \n  // Balanced communication (practical clarity)\n  if (d.communication_style === 'balanced_communicator') {\n    score += 10;\n    indicators.practical_communication = 'effective';\n  }\n  \n  // Optimized lifestyle supporting business\n  if (d.lifestyle_pattern === 'lifestyle_optimized' || d.lifestyle_pattern === 'lifestyle_balanced') {\n    score += 15;\n    indicators.practical_lifestyle = 'optimized';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Results-focused, practical, execution-oriented. Values efficiency and tangible outcomes.'\n  };\n}\n\nfunction calculateStrategicPlannerScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Strategic goal setting\n  if (d.achievement_style === 'realistic_planner' && d.goal_confidence_level > 7) {\n    score += 25;\n    indicators.strategic_planning = 'sophisticated';\n  }\n  \n  // Long-term financial thinking\n  if (d.financial_approach === 'unit_economics_sophisticated' || d.financial_approach === 'profit_focused') {\n    score += 20;\n    indicators.financial_strategy = 'long_term';\n  }\n  \n  // Systematic operational approach\n  if (d.operational_style === 'systems_builder' || d.operational_style === 'precision_operator') {\n    score += 15;\n    indicators.operational_strategy = 'systematic';\n  }\n  \n  // Detailed communication (strategic depth)\n  if (d.communication_style === 'detailed_communicator') {\n    score += 15;\n    indicators.strategic_communication = 'comprehensive';\n  }\n  \n  // High-impact leverage usage\n  if (d.leverage_sophistication === 'high_impact_lever_seeker' || d.leverage_sophistication === 'leverage_master') {\n    score += 15;\n    indicators.strategic_leverage = 'advanced';\n  }\n  \n  // Lifestyle optimization supporting strategy\n  if (d.lifestyle_pattern === 'lifestyle_optimized' && d.lifestyle_discipline > 0.7) {\n    score += 10;\n    indicators.lifestyle_strategy = 'optimized';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Long-term thinking, strategic approach, methodical planning. Builds sustainable competitive advantages.'\n  };\n}\n\nfunction calculateAdaptiveSurvivorScore(d) {\n  let score = 0;\n  const indicators = {};\n  \n  // Thrives in chaos\n  if (d.lifestyle_pattern === 'lifestyle_chaotic' || d.lifestyle_pattern === 'lifestyle_overwhelmed') {\n    score += 20;\n    indicators.chaos_tolerance = 'high';\n  }\n  \n  // Experimental execution patterns\n  if (d.execution_style === 'execution_moderate' && d.business_revenue > 1000) {\n    score += 15;\n    indicators.adaptive_execution = 'flexible';\n  }\n  \n  // Multiple goal attempts (adaptation)\n  if (d.goal_volume > 8 && d.achievement_style === 'chronic_overcommitter') {\n    score += 15;\n    indicators.adaptive_goal_setting = 'experimental';\n  }\n  \n  // Leverage experimentation\n  if (d.leverage_sophistication === 'leverage_experimenter') {\n    score += 15;\n    indicators.tool_experimentation = 'high';\n  }\n  \n  // Communication adaptability\n  if (d.communication_frequency > 20 && d.communication_style !== 'detailed_communicator') {\n    score += 10;\n    indicators.communication_adaptability = 'high';\n  }\n  \n  // Financial experimentation\n  if (d.financial_approach === 'financial_experimental') {\n    score += 15;\n    indicators.financial_adaptability = 'experimental';\n  }\n  \n  // Emotional resilience\n  if (d.psychological_pattern === 'naturally_optimistic' || d.psychological_pattern === 'emotionally_balanced') {\n    score += 10;\n    indicators.emotional_resilience = 'strong';\n  }\n  \n  return {\n    score: score,\n    max_score: 100,\n    confidence: score / 100,\n    indicators: indicators,\n    archetype_description: 'Flexible, resilient, thrives in uncertainty. Adapts quickly to changing circumstances and constraints.'\n  };\n}\n\nfunction assignOptimalPathways(d) {\n  const scores = calculateArchetypeScores(d);\n  \n  // Sort archetypes by score\n  const sortedArchetypes = Object.entries(scores)\n    .sort(([,a], [,b]) => b.score - a.score)\n    .map(([name, data]) => ({ name, ...data }));\n  \n  const primary = sortedArchetypes[0];\n  const secondary = sortedArchetypes[1];\n  \n  // Calculate hybrid pathway if scores are close\n  const scoreGap = primary.score - secondary.score;\n  const isHybrid = scoreGap < 15;\n  \n  return {\n    primary_pathway: {\n      archetype: primary.name,\n      score: primary.score,\n      confidence: primary.confidence,\n      description: primary.archetype_description,\n      indicators: primary.indicators\n    },\n    secondary_pathway: {\n      archetype: secondary.name,\n      score: secondary.score,\n      confidence: secondary.confidence,\n      description: secondary.archetype_description,\n      indicators: secondary.indicators\n    },\n    pathway_type: isHybrid ? 'hybrid' : 'dominant',\n    hybrid_description: isHybrid ? `${primary.name}-${secondary.name} hybrid with balanced traits` : null,\n    score_gap: scoreGap,\n    pathway_evolution: predictPathwayEvolution(primary, secondary, d)\n  };\n}\n\nfunction createBehavioralDNA(d) {\n  return {\n    execution_drive: calculateExecutionDrive(d),\n    risk_tolerance: calculateRiskTolerance(d),\n    social_orientation: calculateSocialOrientation(d),\n    learning_speed: calculateLearningSpeed(d),\n    complexity_tolerance: calculateComplexityTolerance(d),\n    urgency_sensitivity: calculateUrgencySensitivity(d),\n    communication_preference: determineCommunicationPreference(d),\n    constraint_resilience: calculateConstraintResilience(d)\n  };\n}\n\nfunction calculateExecutionDrive(d) {\n  let drive = 5; // Base level\n  \n  if (d.execution_style === 'execution_strong') drive += 3;\n  if (d.achievement_style === 'high_achiever') drive += 2;\n  if (d.business_revenue > 10000) drive += 2;\n  if (d.goal_achievement > d.goal_volume * 0.7) drive += 2;\n  if (d.lifestyle_discipline > 0.7) drive += 1;\n  \n  return Math.min(10, drive);\n}\n\nfunction calculateRiskTolerance(d) {\n  let tolerance = 5;\n  \n  if (d.financial_approach === 'growth_aggressive') tolerance += 3;\n  if (d.sales_style === 'enterprise_hunter') tolerance += 2;\n  if (d.product_approach === 'ship_fast_iterate') tolerance += 2;\n  if (d.execution_style === 'perfectionist_paralyzed') tolerance -= 2;\n  if (d.psychological_pattern === 'money_trauma_carrier') tolerance -= 3;\n  \n  return Math.max(1, Math.min(10, tolerance));\n}\n\nfunction calculateSocialOrientation(d) {\n  let social = 5;\n  \n  if (d.communication_style === 'help_seeker') social += 3;\n  if (d.sales_style === 'selective_closer') social += 2;\n  if (d.product_approach === 'customer_obsessed') social += 2;\n  if (d.communication_frequency > 20) social += 1;\n  if (d.psychological_pattern === 'naturally_optimistic') social += 1;\n  \n  return Math.min(10, social);\n}\n\nfunction calculateLearningSpeed(d) {\n  let speed = 5;\n  \n  if (d.leverage_sophistication === 'leverage_master') speed += 3;\n  if (d.execution_style === 'execution_strong') speed += 2;\n  if (d.communication_style === 'guidance_seeker') speed += 1;\n  if (d.goal_achievement > 5) speed += 1;\n  if (d.execution_style === 'analysis_paralysis_prone') speed -= 2;\n  \n  return Math.max(1, Math.min(10, speed));\n}\n\nfunction calculateComplexityTolerance(d) {\n  let tolerance = 5;\n  \n  if (d.operational_style === 'systems_builder') tolerance += 3;\n  if (d.financial_approach === 'unit_economics_sophisticated') tolerance += 2;\n  if (d.communication_style === 'detailed_communicator') tolerance += 2;\n  if (d.leverage_sophistication === 'simple_leverage_preferrer') tolerance -= 2;\n  if (d.lifestyle_pattern === 'lifestyle_chaotic') tolerance -= 1;\n  \n  return Math.max(1, Math.min(10, tolerance));\n}\n\nfunction calculateUrgencySensitivity(d) {\n  let sensitivity = 5;\n  \n  if (d.execution_style === 'execution_strong') sensitivity += 2;\n  if (d.product_approach === 'ship_fast_iterate') sensitivity += 2;\n  if (d.sales_style === 'volume_spray_pray') sensitivity += 1;\n  if (d.execution_style === 'perfectionist_paralyzed') sensitivity -= 2;\n  if (d.execution_style === 'analysis_paralysis_prone') sensitivity -= 3;\n  \n  return Math.max(1, Math.min(10, sensitivity));\n}\n\nfunction determineCommunicationPreference(d) {\n  const preferences = {\n    direct_challenge: d.execution_style === 'execution_strong' && d.business_revenue > 5000,\n    supportive_guidance: d.communication_style === 'help_seeker' || d.psychological_pattern === 'imposter_syndrome_sufferer',\n    analytical_detail: d.communication_style === 'detailed_communicator' || d.execution_style === 'analysis_paralysis_prone',\n    inspirational_vision: d.achievement_style === 'big_dreamer' || d.product_approach === 'feature_obsessed',\n    practical_steps: d.achievement_style === 'realistic_planner' || d.leverage_sophistication === 'simple_leverage_preferrer'\n  };\n  \n  return Object.entries(preferences)\n    .filter(([key, value]) => value)\n    .map(([key]) => key);\n}\n\nfunction calculateConstraintResilience(d) {\n  let resilience = 5;\n  \n  if (d.lifestyle_pattern === 'lifestyle_optimized') resilience += 2;\n  if (d.psychological_pattern === 'naturally_optimistic') resilience += 2;\n  if (d.business_revenue > 10000) resilience += 1;\n  if (d.lifestyle_health > 7.5) resilience += 1;\n  if (d.lifestyle_pattern === 'lifestyle_overwhelmed') resilience -= 2;\n  if (d.psychological_pattern === 'chronic_overwhelm_pattern') resilience -= 3;\n  \n  return Math.max(1, Math.min(10, resilience));\n}\n\nfunction optimizeCommunicationStyle(d) {\n  const pathways = assignOptimalPathways(d);\n  const primary = pathways.primary_pathway.archetype;\n  \n  const communicationStyles = {\n    systematic_builder: {\n      tone: 'structured_supportive',\n      depth: 'detailed_process_oriented',\n      timing: 'scheduled_consistent',\n      format: 'step_by_step_frameworks'\n    },\n    intuitive_maverick: {\n      tone: 'direct_challenging',\n      depth: 'high_level_strategic',\n      timing: 'real_time_urgent',\n      format: 'quick_insights_provocative'\n    },\n    analytical_optimizer: {\n      tone: 'data_driven_logical',\n      depth: 'comprehensive_analytical',\n      timing: 'when_analysis_complete',\n      format: 'detailed_reports_metrics'\n    },\n    relationship_leverager: {\n      tone: 'collaborative_warm',\n      depth: 'relationship_context_rich',\n      timing: 'socially_appropriate',\n      format: 'story_based_testimonials'\n    },\n    creative_visionary: {\n      tone: 'inspirational_expansive',\n      depth: 'big_picture_visionary',\n      timing: 'inspiration_moments',\n      format: 'metaphors_possibilities'\n    },\n    pragmatic_executor: {\n      tone: 'direct_results_focused',\n      depth: 'actionable_practical',\n      timing: 'implementation_ready',\n      format: 'clear_next_steps'\n    },\n    strategic_planner: {\n      tone: 'strategic_comprehensive',\n      depth: 'long_term_strategic',\n      timing: 'planning_cycles',\n      format: 'strategic_frameworks'\n    },\n    adaptive_survivor: {\n      tone: 'flexible_supportive',\n      depth: 'context_adaptive',\n      timing: 'situation_responsive',\n      format: 'multiple_options_flexible'\n    }\n  };\n  \n  return communicationStyles[primary] || communicationStyles.pragmatic_executor;\n}\n\nfunction customizeInterventionStrategy(d) {\n  const pathways = assignOptimalPathways(d);\n  const dna = createBehavioralDNA(d);\n  \n  return {\n    intervention_timing: dna.urgency_sensitivity > 7 ? 'immediate' : dna.urgency_sensitivity > 4 ? 'planned' : 'gradual',\n    intervention_intensity: dna.constraint_resilience > 7 ? 'high_intensity' : 'moderate_intensity',\n    intervention_style: pathways.primary_pathway.archetype === 'analytical_optimizer' ? 'data_driven' : \n                      pathways.primary_pathway.archetype === 'relationship_leverager' ? 'collaborative' : 'direct',\n    breakthrough_acceleration: dna.execution_drive > 7 && dna.risk_tolerance > 6 ? 'aggressive' : 'supportive',\n    constraint_handling: dna.constraint_resilience < 4 ? 'constraint_first' : 'goal_first'\n  };\n}\n\nfunction analyzeConstraintPatterns(d) {\n  return {\n    primary_constraints: identifyPrimaryConstraints(d),\n    constraint_tolerance: d.lifestyle_pattern === 'lifestyle_optimized' ? 'high' : 'moderate',\n    constraint_adaptation: d.leverage_sophistication === 'leverage_master' ? 'sophisticated' : 'basic',\n    breakthrough_blockers: identifyBreakthroughBlockers(d)\n  };\n}\n\nfunction identifyPrimaryConstraints(d) {\n  const constraints = [];\n  \n  if (d.lifestyle_health < 6.5) constraints.push('health_energy_constraints');\n  if (d.lifestyle_discipline < 0.4) constraints.push('routine_discipline_constraints');\n  if (d.psychological_pattern === 'money_trauma_carrier') constraints.push('money_psychology_constraints');\n  if (d.execution_style === 'time_management_challenged') constraints.push('time_management_constraints');\n  if (d.business_revenue < 5000 && d.goal_volume > 10) constraints.push('resource_focus_constraints');\n  \n  return constraints;\n}\n\nfunction identifyBreakthroughBlockers(d) {\n  const blockers = [];\n  \n  if (d.execution_style === 'perfectionist_paralyzed') blockers.push('perfectionism_paralysis');\n  if (d.execution_style === 'analysis_paralysis_prone') blockers.push('analysis_paralysis');\n  if (d.psychological_pattern === 'imposter_syndrome_sufferer') blockers.push('imposter_syndrome');\n  if (d.achievement_style === 'chronic_overcommitter') blockers.push('goal_overcommitment');\n  \n  return blockers;\n}\n\nfunction predictBreakthroughPathway(d) {\n  const pathways = assignOptimalPathways(d);\n  const dna = createBehavioralDNA(d);\n  \n  // Predict most likely breakthrough path based on archetype and DNA\n  const breakthroughPaths = {\n    systematic_builder: 'systems_optimization_breakthrough',\n    intuitive_maverick: 'rapid_scaling_breakthrough', \n    analytical_optimizer: 'efficiency_optimization_breakthrough',\n    relationship_leverager: 'network_effect_breakthrough',\n    creative_visionary: 'innovation_breakthrough',\n    pragmatic_executor: 'execution_excellence_breakthrough',\n    strategic_planner: 'strategic_advantage_breakthrough',\n    adaptive_survivor: 'resilience_breakthrough'\n  };\n  \n  return {\n    primary_breakthrough_path: breakthroughPaths[pathways.primary_pathway.archetype],\n    breakthrough_timing: dna.execution_drive > 7 ? 'rapid' : 'gradual',\n    breakthrough_triggers: identifyBreakthroughTriggers(d, pathways.primary_pathway.archetype),\n    success_probability: calculateSuccessProbability(d, dna)\n  };\n}\n\nfunction identifyBreakthroughTriggers(d, archetype) {\n  const triggers = {\n    systematic_builder: ['process_optimization', 'system_automation', 'workflow_refinement'],\n    intuitive_maverick: ['market_opportunity', 'rapid_execution', 'bold_decision'],\n    analytical_optimizer: ['data_insight', 'efficiency_gain', 'optimization_breakthrough'],\n    relationship_leverager: ['network_expansion', 'partnership_opportunity', 'referral_system'],\n    creative_visionary: ['creative_breakthrough', 'innovation_opportunity', 'vision_clarity'],\n    pragmatic_executor: ['execution_consistency', 'result_momentum', 'practical_breakthrough'],\n    strategic_planner: ['strategic_insight', 'competitive_advantage', 'long_term_positioning'],\n    adaptive_survivor: ['constraint_navigation', 'resilience_building', 'adaptation_mastery']\n  };\n  \n  return triggers[archetype] || ['general_breakthrough'];\n}\n\nfunction calculateSuccessProbability(d, dna) {\n  let probability = 0.5; // Base 50%\n  \n  // Positive factors\n  if (dna.execution_drive > 7) probability += 0.2;\n  if (d.business_revenue > 5000) probability += 0.15;\n  if (d.achievement_style === 'high_achiever') probability += 0.1;\n  if (dna.constraint_resilience > 6) probability += 0.1;\n  if (d.leverage_sophistication === 'leverage_master') probability += 0.05;\n  \n  // Negative factors\n  if (d.execution_style === 'perfectionist_paralyzed') probability -= 0.15;\n  if (d.psychological_pattern === 'chronic_overwhelm_pattern') probability -= 0.1;\n  if (d.lifestyle_pattern === 'lifestyle_overwhelmed') probability -= 0.1;\n  \n  return Math.max(0.1, Math.min(0.95, probability));\n}\n\nfunction predictPathwayEvolution(primary, secondary, d) {\n  // Predict how pathway might evolve over time\n  const evolutionPatterns = {\n    high_execution: 'pathway_intensification',\n    moderate_execution: 'pathway_refinement', \n    low_execution: 'pathway_exploration'\n  };\n  \n  const executionLevel = d.execution_style === 'execution_strong' ? 'high_execution' :\n                        d.execution_style === 'execution_moderate' ? 'moderate_execution' : 'low_execution';\n  \n  return {\n    evolution_pattern: evolutionPatterns[executionLevel],\n    evolution_timeline: d.business_revenue > 10000 ? 'rapid_evolution' : 'gradual_evolution',\n    pathway_stability: primary.score - secondary.score > 20 ? 'stable' : 'evolving',\n    next_evolution_trigger: identifyEvolutionTrigger(primary, d)\n  };\n}\n\nfunction identifyEvolutionTrigger(primary, d) {\n  if (d.business_revenue > 25000) return 'scaling_pressure';\n  if (d.goal_achievement > 8) return 'success_momentum';\n  if (d.lifestyle_pattern === 'lifestyle_overwhelmed') return 'constraint_pressure';\n  return 'natural_growth';\n}\n\nfunction calculatePathwayConfidence(d) {\n  const pathways = assignOptimalPathways(d);\n  \n  // Base confidence on data richness and pattern consistency\n  let confidence = 0.5;\n  \n  // Data richness factors\n  if (d.goal_volume > 5) confidence += 0.1;\n  if (d.communication_frequency > 10) confidence += 0.1;\n  if (d.business_revenue > 1000) confidence += 0.1;\n  if (d.performance_strength > 5) confidence += 0.05;\n  \n  // Pattern consistency factors\n  if (pathways.score_gap > 20) confidence += 0.1; // Clear dominant pattern\n  if (pathways.primary_pathway.confidence > 0.7) confidence += 0.1;\n  \n  // Time depth factors\n  confidence += 0.05; // Weekly analysis provides good depth\n  \n  return Math.min(0.95, confidence);\n}\n\n// Execute the comprehensive analysis\nconst result = classifyUserArchetypes(userData);\n\nreturn {\n  total_users_analyzed: result.length,\n  pathway_analyses: result,\n  analysis_timestamp: new Date().toISOString(),\n  archetype_distribution: calculateArchetypeDistribution(result)\n};\n\nfunction calculateArchetypeDistribution(analyses) {\n  const distribution = {};\n  \n  analyses.forEach(analysis => {\n    const primary = analysis.pathway_assignment.primary_pathway.archetype;\n    distribution[primary] = (distribution[primary] || 0) + 1;\n  });\n  \n  return distribution;\n}"
      },
      "name": "PhD Archetype Classification Engine",
      "type": "n8n-nodes-base.code",
      "position": [
        -960,
        -1460
      ],
      "id": "16070422-6241-44c8-b211-63bc5f41320f",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store comprehensive pathway assignments\nINSERT INTO user_pathway_assignments (\n  user_id,\n  pathway_id,\n  confidence_score,\n  classification_date,\n  drive_level,\n  execution_style,\n  risk_tolerance,\n  social_orientation,\n  learning_speed,\n  communication_preference,\n  complexity_tolerance,\n  urgency_sensitivity\n)\nSELECT \n  '{{ $json.pathway_analyses[0].user_id }}',\n  '{{ $json.pathway_analyses[0].pathway_assignment.primary_pathway.archetype }}',\n  {{ $json.pathway_analyses[0].pathway_confidence }},\n  NOW(),\n  {{ $json.pathway_analyses[0].behavioral_dna.execution_drive }},\n  {{ $json.pathway_analyses[0].behavioral_dna.execution_drive }},\n  {{ $json.pathway_analyses[0].behavioral_dna.risk_tolerance }},\n  {{ $json.pathway_analyses[0].behavioral_dna.social_orientation }},\n  {{ $json.pathway_analyses[0].behavioral_dna.learning_speed }},\n  '{{ $json.pathway_analyses[0].communication_optimization.tone }}',\n  {{ $json.pathway_analyses[0].behavioral_dna.complexity_tolerance }},\n  {{ $json.pathway_analyses[0].behavioral_dna.urgency_sensitivity }}\nWHERE '{{ $json.pathway_analyses[0].user_id }}' IS NOT NULL\nON CONFLICT (user_id) DO UPDATE SET\n  pathway_id = EXCLUDED.pathway_id,\n  confidence_score = EXCLUDED.confidence_score,\n  classification_date = EXCLUDED.classification_date,\n  drive_level = EXCLUDED.drive_level,\n  risk_tolerance = EXCLUDED.risk_tolerance,\n  social_orientation = EXCLUDED.social_orientation,\n  learning_speed = EXCLUDED.learning_speed,\n  communication_preference = EXCLUDED.communication_preference,\n  complexity_tolerance = EXCLUDED.complexity_tolerance,\n  urgency_sensitivity = EXCLUDED.urgency_sensitivity",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -760,
        -1460
      ],
      "id": "5b8647b8-6105-460c-b01c-6d7e2222c5df",
      "name": "Store Pathway Assignments",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Update user dynamic profile with pathway intelligence\nINSERT INTO user_dynamic_profile (\n  user_id,\n  behavioral_dna,\n  blind_spots,\n  kryptonite,\n  superpower,\n  intervention_playbook,\n  vocabulary_complexity,\n  emotional_expression_depth,\n  certainty_language_ratio,\n  ownership_language_score,\n  signature_phrases,\n  current_altitude,\n  current_momentum,\n  energy_reserves,\n  confidence_level,\n  clarity_score\n)\nSELECT \n  '{{ $json.pathway_analyses[0].user_id }}',\n  '{{ JSON.stringify($json.pathway_analyses[0].behavioral_dna) }}'::jsonb,\n  '{{ JSON.stringify($json.pathway_analyses[0].constraint_patterns.breakthrough_blockers) }}'::jsonb,\n  jsonb_build_object(\n    'primary_weakness', '{{ $json.pathway_analyses[0].constraint_patterns.primary_constraints[0] }}',\n    'intervention_resistance', '{{ $json.pathway_analyses[0].intervention_strategy.constraint_handling }}'\n  ),\n  jsonb_build_object(\n    'archetype_strength', '{{ $json.pathway_analyses[0].pathway_assignment.primary_pathway.archetype }}',\n    'execution_drive', {{ $json.pathway_analyses[0].behavioral_dna.execution_drive }},\n    'natural_advantage', '{{ $json.pathway_analyses[0].breakthrough_pathway.primary_breakthrough_path }}'\n  ),\n  '{{ JSON.stringify($json.pathway_analyses[0].intervention_strategy) }}'::jsonb,\n  {{ $json.pathway_analyses[0].behavioral_dna.complexity_tolerance / 10.0 }},\n  {{ $json.pathway_analyses[0].behavioral_dna.social_orientation / 10.0 }},\n  {{ $json.pathway_analyses[0].behavioral_dna.urgency_sensitivity / 10.0 }},\n  {{ $json.pathway_analyses[0].behavioral_dna.execution_drive / 10.0 }},\n  '{{ JSON.stringify($json.pathway_analyses[0].communication_optimization) }}'::jsonb,\n  {{ $json.pathway_analyses[0].behavioral_dna.execution_drive }},\n  {{ $json.pathway_analyses[0].breakthrough_pathway.success_probability }},\n  {{ $json.pathway_analyses[0].behavioral_dna.constraint_resilience }},\n  {{ $json.pathway_analyses[0].pathway_confidence }},\n  {{ $json.pathway_analyses[0].behavioral_dna.complexity_tolerance / 10.0 }}\nWHERE '{{ $json.pathway_analyses[0].user_id }}' IS NOT NULL\nON CONFLICT (user_id) DO UPDATE SET\n  behavioral_dna = EXCLUDED.behavioral_dna,\n  blind_spots = EXCLUDED.blind_spots,\n  kryptonite = EXCLUDED.kryptonite,\n  superpower = EXCLUDED.superpower,\n  intervention_playbook = EXCLUDED.intervention_playbook,\n  vocabulary_complexity = EXCLUDED.vocabulary_complexity,\n  emotional_expression_depth = EXCLUDED.emotional_expression_depth,\n  certainty_language_ratio = EXCLUDED.certainty_language_ratio,\n  ownership_language_score = EXCLUDED.ownership_language_score,\n  signature_phrases = EXCLUDED.signature_phrases,\n  current_altitude = EXCLUDED.current_altitude,\n  current_momentum = EXCLUDED.current_momentum,\n  energy_reserves = EXCLUDED.energy_reserves,\n  confidence_level = EXCLUDED.confidence_level,\n  clarity_score = EXCLUDED.clarity_score",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -560,
        -1460
      ],
      "id": "6d371bb4-1518-48a4-9a58-ca55fe464590",
      "name": "Update Dynamic Profile",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store archetype-specific pathway data\nINSERT INTO user_pathways (\n  pathway_id,\n  pathway_name,\n  core_problems,\n  core_solutions,\n  behavioral_signature,\n  assumption_priorities\n)\nSELECT \n  '{{ $json.pathway_analyses[0].pathway_assignment.primary_pathway.archetype }}',\n  '{{ $json.pathway_analyses[0].pathway_assignment.primary_pathway.archetype }}',\n  ARRAY[\n    '{{ $json.pathway_analyses[0].constraint_patterns.primary_constraints[0] }}',\n    '{{ $json.pathway_analyses[0].constraint_patterns.breakthrough_blockers[0] }}'\n  ],\n  ARRAY[\n    '{{ $json.pathway_analyses[0].breakthrough_pathway.primary_breakthrough_path }}',\n    '{{ $json.pathway_analyses[0].intervention_strategy.intervention_style }}'\n  ],\n  '{{ JSON.stringify($json.pathway_analyses[0].pathway_assignment.primary_pathway.indicators) }}'::jsonb,\n  jsonb_build_object(\n    'communication_style', '{{ $json.pathway_analyses[0].communication_optimization.tone }}',\n    'intervention_timing', '{{ $json.pathway_analyses[0].intervention_strategy.intervention_timing }}',\n    'breakthrough_triggers', '{{ JSON.stringify($json.pathway_analyses[0].breakthrough_pathway.breakthrough_triggers) }}'\n  )\nWHERE '{{ $json.pathway_analyses[0].user_id }}' IS NOT NULL\nON CONFLICT (pathway_id) DO UPDATE SET\n  core_problems = EXCLUDED.core_problems,\n  core_solutions = EXCLUDED.core_solutions,\n  behavioral_signature = EXCLUDED.behavioral_signature,\n  assumption_priorities = EXCLUDED.assumption_priorities",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -360,
        -1460
      ],
      "id": "9239e75b-3368-440e-bb21-b7117c92a6b5",
      "name": "Store Pathway Data",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "c7/feedback-loop",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "name": "Real-time Feedback Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -1400,
        -2600
      ],
      "id": "d3069330-97fd-4a37-a2fb-8738bb5febbc",
      "typeVersion": 2,
      "webhookId": "bb921743-6f0f-4600-b83a-9b9b0287dccf"
    },
    {
      "parameters": {},
      "name": "Daily Summary Analysis",
      "type": "n8n-nodes-base.cron",
      "position": [
        -1000,
        -2780
      ],
      "id": "03f231f5-b5ed-4317-97fa-5c6df0f326f5",
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- ULTIMATE FEEDBACK INTELLIGENCE SYSTEM\n-- This tracks EVERYTHING to create the most sophisticated learning loop ever built\n\nWITH assumption_performance_reality AS (\n  SELECT \n    aul.user_id,\n    aul.assumption_id,\n    aul.assumption_pattern_type,\n    aul.confidence_score as original_confidence,\n    aul.shock_value,\n    aul.delivered_at,\n    aul.user_stage,\n    aul.session_id,\n    aul.user_engaged,\n    aul.effectiveness_pending,\n    \n    -- USER ENGAGEMENT DETECTION\n    CASE \n      WHEN EXISTS (\n        SELECT 1 FROM conversations c \n        WHERE c.user_id = aul.user_id \n        AND c.created_at >= aul.delivered_at \n        AND c.created_at <= aul.delivered_at + INTERVAL '2 hours'\n        AND (c.message ILIKE '%screenshot%' OR c.message ILIKE '%shared%' OR c.message ILIKE '%exactly%' OR c.message ILIKE '%spot on%')\n      ) THEN 'high_engagement'\n      WHEN EXISTS (\n        SELECT 1 FROM conversations c \n        WHERE c.user_id = aul.user_id \n        AND c.created_at >= aul.delivered_at \n        AND c.created_at <= aul.delivered_at + INTERVAL '1 hour'\n        AND LENGTH(c.message) > 50\n      ) THEN 'medium_engagement'\n      WHEN EXISTS (\n        SELECT 1 FROM conversations c \n        WHERE c.user_id = aul.user_id \n        AND c.created_at >= aul.delivered_at \n        AND c.created_at <= aul.delivered_at + INTERVAL '30 minutes'\n      ) THEN 'low_engagement'\n      ELSE 'no_engagement'\n    END as engagement_level,\n    \n    -- ACCURACY VERIFICATION\n    CASE \n      WHEN EXISTS (\n        SELECT 1 FROM conversations c \n        WHERE c.user_id = aul.user_id \n        AND c.created_at >= aul.delivered_at + INTERVAL '12 hours'\n        AND c.created_at <= aul.delivered_at + INTERVAL '72 hours'\n        AND (c.message ILIKE '%happened exactly%' OR c.message ILIKE '%you were right%' OR c.message ILIKE '%predicted%')\n      ) THEN 'verified_accurate'\n      WHEN EXISTS (\n        SELECT 1 FROM conversations c \n        WHERE c.user_id = aul.user_id \n        AND c.created_at >= aul.delivered_at + INTERVAL '24 hours'\n        AND c.created_at <= aul.delivered_at + INTERVAL '7 days'\n        AND (c.message ILIKE '%breakthrough%' OR c.message ILIKE '%figured out%' OR c.message ILIKE '%clarity%')\n      ) THEN 'indirectly_accurate'\n      WHEN EXISTS (\n        SELECT 1 FROM conversations c \n        WHERE c.user_id = aul.user_id \n        AND c.created_at >= aul.delivered_at + INTERVAL '1 hour'\n        AND c.created_at <= aul.delivered_at + INTERVAL '48 hours'\n        AND (c.message ILIKE '%not really%' OR c.message ILIKE '%wrong%' OR c.message ILIKE '%disagree%')\n      ) THEN 'inaccurate'\n      ELSE 'pending_verification'\n    END as accuracy_status,\n    \n    -- BEHAVIORAL IMPACT DETECTION\n    CASE \n      WHEN EXISTS (\n        SELECT 1 FROM goals g \n        WHERE g.user_id = aul.user_id \n        AND g.created_at >= aul.delivered_at \n        AND g.created_at <= aul.delivered_at + INTERVAL '48 hours'\n      ) THEN 'goal_creation_triggered'\n      WHEN EXISTS (\n        SELECT 1 FROM \"business:sales\" bs \n        WHERE bs.user_id = aul.user_id \n        AND bs.created_at >= aul.delivered_at \n        AND bs.created_at <= aul.delivered_at + INTERVAL '24 hours'\n      ) THEN 'sales_action_triggered'\n      WHEN EXISTS (\n        SELECT 1 FROM performance p \n        WHERE p.user_id = aul.user_id \n        AND p.created_at >= aul.delivered_at \n        AND p.created_at <= aul.delivered_at + INTERVAL '24 hours'\n        AND p.\"WhatWentWell\" IS NOT NULL\n        AND LENGTH(p.\"WhatWentWell\") > 20\n      ) THEN 'performance_improvement'\n      ELSE 'no_behavioral_change'\n    END as behavioral_impact,\n    \n    -- TIME TO IMPACT MEASUREMENT\n    (\n      SELECT MIN(c.created_at - aul.delivered_at) \n      FROM conversations c \n      WHERE c.user_id = aul.user_id \n      AND c.created_at >= aul.delivered_at \n      AND (c.message ILIKE '%breakthrough%' OR c.message ILIKE '%realized%' OR c.message ILIKE '%exactly%')\n    ) as time_to_impact,\n    \n    -- USER STAGE AT DELIVERY\n    upa.pathway_id as user_archetype,\n    upa.confidence_score as user_pathway_confidence\n    \n  FROM assumption_usage_log aul\n  LEFT JOIN user_pathway_assignments upa ON aul.user_id = upa.user_id\n  WHERE aul.delivered_at >= NOW() - INTERVAL '7 days'\n),\n\npattern_prediction_tracking AS (\n  SELECT \n    pp.user_id,\n    pp.pattern_id,\n    pp.pattern_type,\n    pp.prediction_text,\n    pp.confidence_score as original_confidence,\n    pp.prediction_timestamp,\n    pp.outcome_recorded,\n    pp.outcome_accuracy,\n    \n    -- PREDICTION VERIFICATION ANALYSIS\n    CASE \n      WHEN pp.pattern_type = 'breakthrough_proximity' THEN (\n        CASE \n          WHEN EXISTS (\n            SELECT 1 FROM user_breakthroughs ub \n            WHERE ub.user_id = pp.user_id \n            AND ub.breakthrough_date >= pp.prediction_timestamp \n            AND ub.breakthrough_date <= pp.prediction_timestamp + INTERVAL '7 days'\n          ) THEN 'prediction_verified'\n          WHEN pp.prediction_timestamp < NOW() - INTERVAL '7 days' THEN 'prediction_failed'\n          ELSE 'prediction_pending'\n        END\n      )\n      WHEN pp.pattern_type = 'temporal_pattern' THEN (\n        CASE \n          WHEN EXISTS (\n            SELECT 1 FROM conversations c \n            WHERE c.user_id = pp.user_id \n            AND c.created_at >= pp.prediction_timestamp + INTERVAL '12 hours'\n            AND c.created_at <= pp.prediction_timestamp + INTERVAL '48 hours'\n            AND (c.message ILIKE '%energy%' OR c.message ILIKE '%productive%' OR c.message ILIKE '%focus%')\n          ) THEN 'prediction_verified'\n          WHEN pp.prediction_timestamp < NOW() - INTERVAL '48 hours' THEN 'prediction_failed'\n          ELSE 'prediction_pending'\n        END\n      )\n      WHEN pp.pattern_type = 'linguistic_pattern' THEN (\n        CASE \n          WHEN EXISTS (\n            SELECT 1 FROM conversations c \n            WHERE c.user_id = pp.user_id \n            AND c.created_at >= pp.prediction_timestamp \n            AND c.created_at <= pp.prediction_timestamp + INTERVAL '24 hours'\n            AND (c.message ILIKE '%breakthrough%' OR c.message ILIKE '%clarity%')\n          ) THEN 'prediction_verified'\n          WHEN pp.prediction_timestamp < NOW() - INTERVAL '24 hours' THEN 'prediction_failed'\n          ELSE 'prediction_pending'\n        END\n      )\n      ELSE 'prediction_unknown'\n    END as verification_status,\n    \n    -- TIME TO VERIFICATION\n    CASE \n      WHEN pp.pattern_type = 'breakthrough_proximity' THEN (\n        SELECT MIN(ub.breakthrough_date - pp.prediction_timestamp) \n        FROM user_breakthroughs ub \n        WHERE ub.user_id = pp.user_id \n        AND ub.breakthrough_date >= pp.prediction_timestamp\n      )\n      ELSE NULL\n    END as time_to_verification\n    \n  FROM pattern_predictions pp\n  WHERE pp.prediction_timestamp >= NOW() - INTERVAL '14 days'\n),\n\nuser_feedback_intelligence AS (\n  SELECT \n    uf.user_id,\n    uf.assumption_id,\n    uf.assumption_confidence,\n    uf.assumption_delivered,\n    uf.pattern_detected,\n    uf.user_stage,\n    uf.metadata,\n    \n    -- FEEDBACK SENTIMENT ANALYSIS\n    CASE \n      WHEN uf.ai_response ILIKE '%accurate%' OR uf.ai_response ILIKE '%exactly%' OR uf.ai_response ILIKE '%spot on%' THEN 'positive_feedback'\n      WHEN uf.ai_response ILIKE '%helpful%' OR uf.ai_response ILIKE '%useful%' OR uf.ai_response ILIKE '%insightful%' THEN 'constructive_feedback'\n      WHEN uf.ai_response ILIKE '%wrong%' OR uf.ai_response ILIKE '%disagree%' OR uf.ai_response ILIKE '%not really%' THEN 'negative_feedback'\n      ELSE 'neutral_feedback'\n    END as feedback_sentiment,\n    \n    -- FEEDBACK SOPHISTICATION LEVEL\n    CASE \n      WHEN LENGTH(uf.user_input) > 100 AND uf.user_input ILIKE '%because%' THEN 'detailed_reasoning'\n      WHEN LENGTH(uf.user_input) > 50 THEN 'moderate_detail'\n      ELSE 'simple_feedback'\n    END as feedback_sophistication\n    \n  FROM user_feedback uf\n  WHERE uf.created_at >= NOW() - INTERVAL '7 days'\n  AND uf.assumption_delivered = true\n),\n\ncomprehensive_performance_analysis AS (\n  SELECT \n    COALESCE(apr.user_id, ppt.user_id, ufi.user_id) as user_id,\n    \n    -- ASSUMPTION PERFORMANCE METRICS\n    COALESCE(apr.assumption_id, ufi.assumption_id) as assumption_id,\n    COALESCE(apr.assumption_pattern_type, ufi.pattern_detected) as pattern_type,\n    COALESCE(apr.original_confidence, ufi.assumption_confidence, ppt.original_confidence) as original_confidence,\n    COALESCE(apr.shock_value, 5) as shock_value,\n    COALESCE(apr.user_stage, ufi.user_stage, 'unknown') as user_stage,\n    COALESCE(apr.user_archetype, 'unknown') as user_archetype,\n    \n    -- ENGAGEMENT METRICS\n    COALESCE(apr.engagement_level, 'unknown') as engagement_level,\n    COALESCE(apr.behavioral_impact, 'unknown') as behavioral_impact,\n    apr.time_to_impact,\n    \n    -- ACCURACY METRICS\n    COALESCE(apr.accuracy_status, ppt.verification_status, 'unknown') as accuracy_status,\n    COALESCE(ppt.time_to_verification, apr.time_to_impact) as verification_time,\n    \n    -- FEEDBACK METRICS\n    COALESCE(ufi.feedback_sentiment, 'no_feedback') as feedback_sentiment,\n    COALESCE(ufi.feedback_sophistication, 'no_feedback') as feedback_sophistication,\n    \n    -- PATTERN PREDICTION METRICS\n    ppt.pattern_id as prediction_pattern_id,\n    ppt.pattern_type as prediction_pattern_type,\n    ppt.verification_status as prediction_verification,\n    \n    NOW() as analysis_timestamp\n    \n  FROM assumption_performance_reality apr\n  FULL OUTER JOIN pattern_prediction_tracking ppt ON apr.user_id = ppt.user_id\n  FULL OUTER JOIN user_feedback_intelligence ufi ON COALESCE(apr.user_id, ppt.user_id) = ufi.user_id\n  WHERE COALESCE(apr.user_id, ppt.user_id, ufi.user_id) IS NOT NULL\n)\n\nSELECT * FROM comprehensive_performance_analysis\nORDER BY analysis_timestamp DESC",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1200,
        -2600
      ],
      "id": "be6d16d5-4483-42f0-9b98-dadc5010432c",
      "name": "Comprehensive Feedback Scan",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ULTIMATE PERFORMANCE FEEDBACK LEARNING ENGINE\n// The most sophisticated assumption accuracy and confidence adjustment system ever built\n\nconst feedbackData = $input.all();\n\nfunction analyzePerformanceFeedback(data) {\n  const analyses = [];\n  \n  for (const feedback of data) {\n    const d = feedback.json;\n    \n    const analysis = {\n      user_id: d.user_id,\n      assumption_id: d.assumption_id,\n      analysis_timestamp: d.analysis_timestamp,\n      \n      // ACCURACY ANALYSIS\n      accuracy_analysis: analyzeAccuracy(d),\n      \n      // ENGAGEMENT ANALYSIS\n      engagement_analysis: analyzeEngagement(d),\n      \n      // CONFIDENCE ADJUSTMENT CALCULATION\n      confidence_adjustment: calculateConfidenceAdjustment(d),\n      \n      // PATTERN EFFECTIVENESS SCORING\n      pattern_effectiveness: scorePatternEffectiveness(d),\n      \n      // USER ARCHETYPE PERFORMANCE\n      archetype_performance: analyzeArchetypePerformance(d),\n      \n      // TIMING OPTIMIZATION\n      timing_optimization: analyzeTimingOptimization(d),\n      \n      // SHOCK VALUE OPTIMIZATION\n      shock_value_optimization: analyzeShockValueOptimization(d),\n      \n      // LEARNING INSIGHTS\n      learning_insights: generateLearningInsights(d),\n      \n      // FUTURE OPTIMIZATION RECOMMENDATIONS\n      optimization_recommendations: generateOptimizationRecommendations(d)\n    };\n    \n    analyses.push(analysis);\n  }\n  \n  return analyses;\n}\n\nfunction analyzeAccuracy(d) {\n  let accuracyScore = 0.5; // Default neutral\n  let accuracyConfidence = 0.3; // Low confidence initially\n  \n  // Direct accuracy indicators\n  switch(d.accuracy_status) {\n    case 'verified_accurate':\n      accuracyScore = 0.95;\n      accuracyConfidence = 0.9;\n      break;\n    case 'indirectly_accurate':\n      accuracyScore = 0.8;\n      accuracyConfidence = 0.7;\n      break;\n    case 'inaccurate':\n      accuracyScore = 0.1;\n      accuracyConfidence = 0.8;\n      break;\n    case 'pending_verification':\n      accuracyScore = d.original_confidence || 0.5;\n      accuracyConfidence = 0.3;\n      break;\n  }\n  \n  // Prediction verification indicators\n  if (d.prediction_verification === 'prediction_verified') {\n    accuracyScore = Math.max(accuracyScore, 0.85);\n    accuracyConfidence = Math.max(accuracyConfidence, 0.8);\n  } else if (d.prediction_verification === 'prediction_failed') {\n    accuracyScore = Math.min(accuracyScore, 0.2);\n    accuracyConfidence = 0.9;\n  }\n  \n  // Feedback sentiment reinforcement\n  if (d.feedback_sentiment === 'positive_feedback') {\n    accuracyScore = Math.min(0.95, accuracyScore + 0.1);\n    accuracyConfidence = Math.max(accuracyConfidence, 0.7);\n  } else if (d.feedback_sentiment === 'negative_feedback') {\n    accuracyScore = Math.max(0.05, accuracyScore - 0.2);\n    accuracyConfidence = Math.max(accuracyConfidence, 0.8);\n  }\n  \n  // Time to verification impact\n  if (d.verification_time) {\n    const hoursToVerification = parseFloat(d.verification_time.replace(/[^0-9.]/g, '')) || 24;\n    if (hoursToVerification < 12) {\n      accuracyScore = Math.min(0.95, accuracyScore + 0.05); // Quick verification bonus\n    } else if (hoursToVerification > 72) {\n      accuracyScore = Math.max(0.1, accuracyScore - 0.1); // Delayed verification penalty\n    }\n  }\n  \n  return {\n    accuracy_score: accuracyScore,\n    accuracy_confidence: accuracyConfidence,\n    accuracy_classification: accuracyScore > 0.8 ? 'highly_accurate' : accuracyScore > 0.6 ? 'moderately_accurate' : accuracyScore > 0.4 ? 'somewhat_accurate' : 'inaccurate',\n    verification_speed: d.verification_time ? calculateVerificationSpeed(d.verification_time) : 'unknown',\n    accuracy_factors: {\n      direct_verification: d.accuracy_status,\n      prediction_verification: d.prediction_verification,\n      feedback_sentiment: d.feedback_sentiment,\n      timing_factor: d.verification_time\n    }\n  };\n}\n\nfunction calculateVerificationSpeed(timeString) {\n  const hours = parseFloat(timeString.replace(/[^0-9.]/g, '')) || 24;\n  if (hours < 6) return 'immediate';\n  if (hours < 24) return 'fast';\n  if (hours < 72) return 'moderate';\n  return 'slow';\n}\n\nfunction analyzeEngagement(d) {\n  let engagementScore = 0;\n  const engagementFactors = [];\n  \n  // Direct engagement level\n  switch(d.engagement_level) {\n    case 'high_engagement':\n      engagementScore += 40;\n      engagementFactors.push('screenshot_or_share_behavior');\n      break;\n    case 'medium_engagement':\n      engagementScore += 25;\n      engagementFactors.push('detailed_response');\n      break;\n    case 'low_engagement':\n      engagementScore += 10;\n      engagementFactors.push('immediate_response');\n      break;\n    case 'no_engagement':\n      engagementScore += 0;\n      engagementFactors.push('no_immediate_response');\n      break;\n  }\n  \n  // Behavioral impact\n  switch(d.behavioral_impact) {\n    case 'goal_creation_triggered':\n      engagementScore += 30;\n      engagementFactors.push('goal_setting_triggered');\n      break;\n    case 'sales_action_triggered':\n      engagementScore += 35;\n      engagementFactors.push('sales_action_taken');\n      break;\n    case 'performance_improvement':\n      engagementScore += 25;\n      engagementFactors.push('performance_boost');\n      break;\n  }\n  \n  // Feedback sophistication\n  switch(d.feedback_sophistication) {\n    case 'detailed_reasoning':\n      engagementScore += 20;\n      engagementFactors.push('thoughtful_feedback');\n      break;\n    case 'moderate_detail':\n      engagementScore += 10;\n      engagementFactors.push('considered_feedback');\n      break;\n  }\n  \n  // Time to impact bonus\n  if (d.time_to_impact) {\n    const hours = parseFloat(d.time_to_impact.replace(/[^0-9.]/g, '')) || 24;\n    if (hours < 2) {\n      engagementScore += 15;\n      engagementFactors.push('immediate_impact');\n    } else if (hours < 12) {\n      engagementScore += 10;\n      engagementFactors.push('rapid_impact');\n    }\n  }\n  \n  return {\n    engagement_score: Math.min(100, engagementScore),\n    engagement_classification: engagementScore > 70 ? 'highly_engaging' : engagementScore > 40 ? 'moderately_engaging' : engagementScore > 15 ? 'somewhat_engaging' : 'not_engaging',\n    engagement_factors: engagementFactors,\n    behavioral_change_triggered: d.behavioral_impact !== 'no_behavioral_change',\n    immediate_response: d.engagement_level !== 'no_engagement',\n    feedback_provided: d.feedback_sentiment !== 'no_feedback'\n  };\n}\n\nfunction calculateConfidenceAdjustment(d) {\n  const accuracy = analyzeAccuracy(d);\n  const engagement = analyzeEngagement(d);\n  \n  let adjustment = 0;\n  const adjustmentFactors = [];\n  \n  // Accuracy-based adjustment (primary factor)\n  if (accuracy.accuracy_score > 0.8) {\n    adjustment += 0.15;\n    adjustmentFactors.push('high_accuracy_boost');\n  } else if (accuracy.accuracy_score > 0.6) {\n    adjustment += 0.05;\n    adjustmentFactors.push('moderate_accuracy_boost');\n  } else if (accuracy.accuracy_score < 0.4) {\n    adjustment -= 0.2;\n    adjustmentFactors.push('low_accuracy_penalty');\n  } else if (accuracy.accuracy_score < 0.2) {\n    adjustment -= 0.3;\n    adjustmentFactors.push('inaccuracy_penalty');\n  }\n  \n  // Engagement-based adjustment (secondary factor)\n  if (engagement.engagement_score > 70) {\n    adjustment += 0.1;\n    adjustmentFactors.push('high_engagement_boost');\n  } else if (engagement.engagement_score > 40) {\n    adjustment += 0.05;\n    adjustmentFactors.push('moderate_engagement_boost');\n  } else if (engagement.engagement_score < 15) {\n    adjustment -= 0.1;\n    adjustmentFactors.push('low_engagement_penalty');\n  }\n  \n  // Verification speed bonus/penalty\n  if (accuracy.verification_speed === 'immediate') {\n    adjustment += 0.05;\n    adjustmentFactors.push('immediate_verification_bonus');\n  } else if (accuracy.verification_speed === 'slow') {\n    adjustment -= 0.05;\n    adjustmentFactors.push('slow_verification_penalty');\n  }\n  \n  // Shock value effectiveness\n  const shockValue = d.shock_value || 5;\n  if (engagement.engagement_score > 50 && shockValue > 8) {\n    adjustment += 0.05;\n    adjustmentFactors.push('high_shock_value_effective');\n  } else if (engagement.engagement_score < 20 && shockValue > 7) {\n    adjustment -= 0.05;\n    adjustmentFactors.push('high_shock_value_backfired');\n  }\n  \n  // User stage appropriateness\n  if (d.user_stage === 'early' && engagement.engagement_score > 60) {\n    adjustment += 0.03;\n    adjustmentFactors.push('early_stage_effectiveness');\n  } else if (d.user_stage === 'advanced' && accuracy.accuracy_score > 0.8) {\n    adjustment += 0.05;\n    adjustmentFactors.push('advanced_stage_precision');\n  }\n  \n  const newConfidence = Math.max(0.1, Math.min(0.95, (d.original_confidence || 0.5) + adjustment));\n  \n  return {\n    confidence_adjustment: adjustment,\n    new_confidence: newConfidence,\n    original_confidence: d.original_confidence || 0.5,\n    adjustment_magnitude: Math.abs(adjustment) > 0.15 ? 'major' : Math.abs(adjustment) > 0.05 ? 'moderate' : 'minor',\n    adjustment_direction: adjustment > 0 ? 'increase' : adjustment < 0 ? 'decrease' : 'stable',\n    adjustment_factors: adjustmentFactors,\n    confidence_classification: newConfidence > 0.8 ? 'high_confidence' : newConfidence > 0.6 ? 'moderate_confidence' : 'low_confidence'\n  };\n}\n\nfunction scorePatternEffectiveness(d) {\n  const accuracy = analyzeAccuracy(d);\n  const engagement = analyzeEngagement(d);\n  \n  // Weighted effectiveness score\n  const effectivenessScore = (\n    (accuracy.accuracy_score * 0.5) +\n    (engagement.engagement_score / 100 * 0.3) +\n    ((d.original_confidence || 0.5) * 0.2)\n  );\n  \n  return {\n    effectiveness_score: effectivenessScore,\n    effectiveness_classification: effectivenessScore > 0.8 ? 'highly_effective' : effectivenessScore > 0.6 ? 'moderately_effective' : effectivenessScore > 0.4 ? 'somewhat_effective' : 'ineffective',\n    pattern_type: d.pattern_type,\n    pattern_strengths: identifyPatternStrengths(d, accuracy, engagement),\n    pattern_weaknesses: identifyPatternWeaknesses(d, accuracy, engagement),\n    optimization_potential: calculateOptimizationPotential(d, accuracy, engagement)\n  };\n}\n\nfunction identifyPatternStrengths(d, accuracy, engagement) {\n  const strengths = [];\n  \n  if (accuracy.accuracy_score > 0.8) strengths.push('high_prediction_accuracy');\n  if (engagement.engagement_score > 70) strengths.push('high_user_engagement');\n  if (engagement.behavioral_change_triggered) strengths.push('drives_behavioral_change');\n  if (accuracy.verification_speed === 'immediate') strengths.push('rapid_verification');\n  if (d.shock_value > 8 && engagement.engagement_score > 50) strengths.push('effective_shock_value');\n  \n  return strengths;\n}\n\nfunction identifyPatternWeaknesses(d, accuracy, engagement) {\n  const weaknesses = [];\n  \n  if (accuracy.accuracy_score < 0.4) weaknesses.push('low_prediction_accuracy');\n  if (engagement.engagement_score < 20) weaknesses.push('low_user_engagement');\n  if (!engagement.behavioral_change_triggered) weaknesses.push('no_behavioral_impact');\n  if (accuracy.verification_speed === 'slow') weaknesses.push('slow_verification');\n  if (d.feedback_sentiment === 'negative_feedback') weaknesses.push('negative_user_feedback');\n  \n  return weaknesses;\n}\n\nfunction calculateOptimizationPotential(d, accuracy, engagement) {\n  let potential = 0;\n  \n  // High engagement but low accuracy = timing/delivery optimization potential\n  if (engagement.engagement_score > 50 && accuracy.accuracy_score < 0.6) {\n    potential += 0.3;\n  }\n  \n  // High accuracy but low engagement = presentation optimization potential\n  if (accuracy.accuracy_score > 0.7 && engagement.engagement_score < 40) {\n    potential += 0.2;\n  }\n  \n  // Moderate performance across board = general optimization potential\n  if (accuracy.accuracy_score > 0.4 && accuracy.accuracy_score < 0.7 && engagement.engagement_score > 20 && engagement.engagement_score < 60) {\n    potential += 0.4;\n  }\n  \n  return Math.min(1, potential);\n}\n\nfunction analyzeArchetypePerformance(d) {\n  // Analyze how patterns perform for different user archetypes\n  return {\n    user_archetype: d.user_archetype,\n    archetype_pattern_fit: calculateArchetypePatternFit(d),\n    archetype_optimization: getArchetypeOptimization(d),\n    cross_archetype_insights: generateCrossArchetypeInsights(d)\n  };\n}\n\nfunction calculateArchetypePatternFit(d) {\n  const accuracy = analyzeAccuracy(d);\n  const engagement = analyzeEngagement(d);\n  \n  // Calculate how well this pattern type fits this archetype\n  const fitScore = (accuracy.accuracy_score * 0.6) + (engagement.engagement_score / 100 * 0.4);\n  \n  return {\n    fit_score: fitScore,\n    fit_classification: fitScore > 0.7 ? 'excellent_fit' : fitScore > 0.5 ? 'good_fit' : fitScore > 0.3 ? 'moderate_fit' : 'poor_fit',\n    archetype_pattern_combination: `${d.user_archetype}_${d.pattern_type}`\n  };\n}\n\nfunction getArchetypeOptimization(d) {\n  const optimizations = {\n    'systematic_builder': {\n      communication_style: 'structured_detailed',\n      timing: 'scheduled_consistent',\n      shock_value_preference: 'moderate_factual'\n    },\n    'intuitive_maverick': {\n      communication_style: 'direct_provocative',\n      timing: 'real_time_urgent',\n      shock_value_preference: 'high_challenging'\n    },\n    'analytical_optimizer': {\n      communication_style: 'data_driven_comprehensive',\n      timing: 'analysis_complete',\n      shock_value_preference: 'moderate_logical'\n    },\n    'relationship_leverager': {\n      communication_style: 'story_based_warm',\n      timing: 'socially_appropriate',\n      shock_value_preference: 'low_supportive'\n    }\n  };\n  \n  return optimizations[d.user_archetype] || optimizations['systematic_builder'];\n}\n\nfunction generateCrossArchetypeInsights(d) {\n  // Generate insights about how this pattern performs across different archetypes\n  return {\n    pattern_universality: d.pattern_type === 'universal_assumption' ? 'high' : 'moderate',\n    archetype_specific_performance: `${d.pattern_type}_performs_${analyzeAccuracy(d).accuracy_classification}_for_${d.user_archetype}`,\n    cross_training_potential: analyzeAccuracy(d).accuracy_score > 0.7 ? 'high' : 'moderate'\n  };\n}\n\nfunction analyzeTimingOptimization(d) {\n  const timeToImpact = d.time_to_impact ? parseFloat(d.time_to_impact.replace(/[^0-9.]/g, '')) : null;\n  \n  return {\n    optimal_timing_window: timeToImpact ? calculateOptimalTiming(timeToImpact) : 'unknown',\n    timing_effectiveness: timeToImpact ? scoreTimingEffectiveness(timeToImpact) : 'unknown',\n    timing_recommendations: generateTimingRecommendations(d, timeToImpact)\n  };\n}\n\nfunction calculateOptimalTiming(hours) {\n  if (hours < 2) return 'immediate_delivery_optimal';\n  if (hours < 12) return 'same_day_optimal';\n  if (hours < 48) return 'next_day_optimal';\n  return 'delayed_delivery_acceptable';\n}\n\nfunction scoreTimingEffectiveness(hours) {\n  if (hours < 2) return 0.95; // Immediate impact = excellent\n  if (hours < 12) return 0.8; // Same day = good\n  if (hours < 48) return 0.6; // Next day = moderate\n  return 0.3; // Delayed = poor\n}\n\nfunction generateTimingRecommendations(d, timeToImpact) {\n  const recommendations = [];\n  \n  if (timeToImpact && timeToImpact < 2) {\n    recommendations.push('maintain_immediate_delivery_strategy');\n  } else if (timeToImpact && timeToImpact > 48) {\n    recommendations.push('consider_earlier_delivery_timing');\n  }\n  \n  if (d.user_archetype === 'intuitive_maverick') {\n    recommendations.push('prioritize_real_time_delivery');\n  } else if (d.user_archetype === 'analytical_optimizer') {\n    recommendations.push('allow_processing_time_before_delivery');\n  }\n  \n  return recommendations;\n}\n\nfunction analyzeShockValueOptimization(d) {\n  const engagement = analyzeEngagement(d);\n  const shockValue = d.shock_value || 5;\n  \n  return {\n    current_shock_value: shockValue,\n    shock_effectiveness: calculateShockEffectiveness(shockValue, engagement.engagement_score),\n    optimal_shock_range: calculateOptimalShockRange(d.user_archetype, engagement.engagement_score),\n    shock_adjustment_recommendation: generateShockAdjustmentRecommendation(shockValue, engagement.engagement_score, d.user_archetype)\n  };\n}\n\nfunction calculateShockEffectiveness(shockValue, engagementScore) {\n  // Ideal shock value creates engagement without backfire\n  if (shockValue >= 8 && engagementScore > 60) return 'highly_effective';\n  if (shockValue >= 6 && engagementScore > 40) return 'moderately_effective';\n  if (shockValue >= 8 && engagementScore < 20) return 'backfired';\n  return 'needs_optimization';\n}\n\nfunction calculateOptimalShockRange(archetype, engagementScore) {\n  const ranges = {\n    'intuitive_maverick': [7, 10],\n    'analytical_optimizer': [4, 7],\n    'relationship_leverager': [3, 6],\n    'systematic_builder': [5, 8]\n  };\n  \n  return ranges[archetype] || [5, 8];\n}\n\nfunction generateShockAdjustmentRecommendation(currentShock, engagement, archetype) {\n  const optimalRange = calculateOptimalShockRange(archetype, engagement);\n  \n  if (currentShock < optimalRange[0]) {\n    return 'increase_shock_value';\n  } else if (currentShock > optimalRange[1]) {\n    return 'decrease_shock_value';\n  } else if (engagement < 30 && currentShock > 7) {\n    return 'reduce_shock_increase_support';\n  }\n  \n  return 'maintain_current_shock_level';\n}\n\nfunction generateLearningInsights(d) {\n  const accuracy = analyzeAccuracy(d);\n  const engagement = analyzeEngagement(d);\n  \n  const insights = [];\n  \n  // Pattern-specific insights\n  if (d.pattern_type === 'universal_assumption' && accuracy.accuracy_score > 0.8) {\n    insights.push('Universal assumptions highly effective for this user profile');\n  }\n  \n  if (d.pattern_type === 'breakthrough_proximity' && engagement.engagement_score > 70) {\n    insights.push('Breakthrough predictions create high engagement for this archetype');\n  }\n  \n  // Cross-pattern insights\n  if (engagement.behavioral_change_triggered && accuracy.accuracy_score > 0.7) {\n    insights.push('High accuracy predictions successfully drive behavioral change');\n  }\n  \n  // Archetype-specific insights\n  if (d.user_archetype === 'analytical_optimizer' && d.feedback_sophistication === 'detailed_reasoning') {\n    insights.push('Analytical users provide valuable detailed feedback for system improvement');\n  }\n  \n  return insights;\n}\n\nfunction generateOptimizationRecommendations(d) {\n  const accuracy = analyzeAccuracy(d);\n  const engagement = analyzeEngagement(d);\n  const confidence = calculateConfidenceAdjustment(d);\n  \n  const recommendations = [];\n  \n  // Confidence adjustment recommendations\n  if (confidence.adjustment_magnitude === 'major') {\n    recommendations.push({\n      type: 'confidence_adjustment',\n      priority: 'high',\n      action: `${confidence.adjustment_direction}_confidence_significantly`,\n      rationale: `Major ${confidence.adjustment_direction} needed based on ${accuracy.accuracy_classification} accuracy and ${engagement.engagement_classification} engagement`\n    });\n  }\n  \n  // Pattern optimization recommendations\n  if (engagement.engagement_score < 30 && accuracy.accuracy_score > 0.7) {\n    recommendations.push({\n      type: 'presentation_optimization',\n      priority: 'medium',\n      action: 'improve_delivery_style',\n      rationale: 'High accuracy but low engagement suggests delivery optimization needed'\n    });\n  }\n  \n  // Timing optimization recommendations\n  if (d.time_to_impact && parseFloat(d.time_to_impact.replace(/[^0-9.]/g, '')) > 48) {\n    recommendations.push({\n      type: 'timing_optimization',\n      priority: 'medium',\n      action: 'deliver_earlier_in_cycle',\n      rationale: 'Delayed impact suggests earlier delivery might be more effective'\n    });\n  }\n  \n  // Archetype-specific recommendations\n  if (d.user_archetype === 'intuitive_maverick' && d.shock_value < 7) {\n    recommendations.push({\n      type: 'shock_value_optimization',\n      priority: 'low',\n      action: 'increase_shock_value',\n      rationale: 'Mavericks respond well to higher shock value assumptions'\n    });\n  }\n  \n  return recommendations;\n}\n\n// Execute the comprehensive feedback analysis\nconst result = analyzePerformanceFeedback(feedbackData);\n\nreturn {\n  total_feedback_analyzed: result.length,\n  performance_analyses: result,\n  analysis_timestamp: new Date().toISOString(),\n  learning_summary: generateLearningSummary(result),\n  system_health_metrics: calculateSystemHealthMetrics(result)\n};\n\nfunction generateLearningSummary(analyses) {\n  const totalAnalyses = analyses.length;\n  const highAccuracy = analyses.filter(a => a.accuracy_analysis.accuracy_score > 0.8).length;\n  const highEngagement = analyses.filter(a => a.engagement_analysis.engagement_score > 70).length;\n  const majorAdjustments = analyses.filter(a => a.confidence_adjustment.adjustment_magnitude === 'major').length;\n  \n  return {\n    total_assumptions_analyzed: totalAnalyses,\n    high_accuracy_rate: totalAnalyses > 0 ? (highAccuracy / totalAnalyses) : 0,\n    high_engagement_rate: totalAnalyses > 0 ? (highEngagement / totalAnalyses) : 0,\n    major_confidence_adjustments: majorAdjustments,\n    system_learning_velocity: majorAdjustments > totalAnalyses * 0.1 ? 'high' : 'moderate'\n  };\n}\n\nfunction calculateSystemHealthMetrics(analyses) {\n  const totalAnalyses = analyses.length;\n  const avgAccuracy = analyses.reduce((sum, a) => sum + a.accuracy_analysis.accuracy_score, 0) / totalAnalyses;\n  const avgEngagement = analyses.reduce((sum, a) => sum + a.engagement_analysis.engagement_score, 0) / totalAnalyses;\n  const avgEffectiveness = analyses.reduce((sum, a) => sum + a.pattern_effectiveness.effectiveness_score, 0) / totalAnalyses;\n  \n  return {\n    overall_system_accuracy: avgAccuracy,\n    overall_system_engagement: avgEngagement / 100,\n    overall_system_effectiveness: avgEffectiveness,\n    system_health_score: (avgAccuracy * 0.4) + ((avgEngagement / 100) * 0.3) + (avgEffectiveness * 0.3),\n    system_status: avgAccuracy > 0.8 && avgEngagement > 60 ? 'excellent' : avgAccuracy > 0.6 && avgEngagement > 40 ? 'good' : 'needs_improvement'\n  };\n}"
      },
      "name": "Ultimate Feedback Learning Engine",
      "type": "n8n-nodes-base.code",
      "position": [
        -1000,
        -2600
      ],
      "id": "70a9c444-35e6-4e88-bfff-06b41d74f3a7",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Update assumption performance with comprehensive feedback analysis\nINSERT INTO assumption_performance (\n  assumption_id,\n  date,\n  business_context,\n  times_triggered,\n  times_engaged,\n  times_accurate,\n  times_shared,\n  avg_confidence\n)\nSELECT \n  pa.assumption_id::uuid,\n  CURRENT_DATE,\n  pa.user_archetype,\n  1,\n  CASE WHEN pa.engagement_score > 40 THEN 1 ELSE 0 END,\n  CASE WHEN pa.accuracy_score > 0.6 THEN 1 ELSE 0 END,\n  CASE WHEN pa.engagement_level = 'high_engagement' THEN 1 ELSE 0 END,\n  pa.new_confidence\nFROM (\n  SELECT \n    '{{ $json.performance_analyses[0].assumption_id }}' as assumption_id,\n    '{{ $json.performance_analyses[0].user_archetype }}' as user_archetype,\n    {{ $json.performance_analyses[0].engagement_analysis.engagement_score }} as engagement_score,\n    {{ $json.performance_analyses[0].accuracy_analysis.accuracy_score }} as accuracy_score,\n    '{{ $json.performance_analyses[0].engagement_analysis.engagement_classification }}' as engagement_level,\n    {{ $json.performance_analyses[0].confidence_adjustment.new_confidence }} as new_confidence\n  WHERE '{{ $json.performance_analyses[0].assumption_id }}' IS NOT NULL\n  AND '{{ $json.performance_analyses[0].assumption_id }}' != 'null'\n) pa\nON CONFLICT (assumption_id, date) DO UPDATE SET\n  times_triggered = assumption_performance.times_triggered + 1,\n  times_engaged = assumption_performance.times_engaged + EXCLUDED.times_engaged,\n  times_accurate = assumption_performance.times_accurate + EXCLUDED.times_accurate,\n  times_shared = assumption_performance.times_shared + EXCLUDED.times_shared,\n  avg_confidence = (assumption_performance.avg_confidence + EXCLUDED.avg_confidence) / 2",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -800,
        -2600
      ],
      "id": "ecfb598c-e0af-4d7e-b5d5-81d5c4fff14a",
      "name": "Update Assumption Performance",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Update pattern predictions with verification outcomes\nUPDATE pattern_predictions \nSET \n  outcome_recorded = true,\n  outcome_accuracy = {{ $json.performance_analyses[0].accuracy_analysis.accuracy_score }},\n  user_feedback = '{{ $json.performance_analyses[0].accuracy_analysis.accuracy_classification }}'\nWHERE user_id = '{{ $json.performance_analyses[0].user_id }}'\nAND pattern_type = '{{ $json.performance_analyses[0].pattern_type }}'\nAND prediction_timestamp >= NOW() - INTERVAL '7 days'\nAND outcome_recorded = false",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -600,
        -2600
      ],
      "id": "640887ff-0d8f-45a5-bc6f-be76e64fbf8b",
      "name": "Update Pattern Predictions",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store comprehensive feedback learning insights\nINSERT INTO intelligence_synthesis (\n  user_id,\n  synthesis_date,\n  behavioral_dna,\n  growth_formula,\n  blind_spots,\n  breakthrough_recipe,\n  kryptonite,\n  superpower,\n  next_level_unlock,\n  intervention_playbook,\n  prediction_model\n)\nSELECT \n  '{{ $json.performance_analyses[0].user_id }}',\n  NOW(),\n  jsonb_build_object(\n    'accuracy_profile', '{{ $json.performance_analyses[0].accuracy_analysis.accuracy_classification }}',\n    'engagement_profile', '{{ $json.performance_analyses[0].engagement_analysis.engagement_classification }}',\n    'archetype_pattern_fit', '{{ $json.performance_analyses[0].archetype_performance.archetype_pattern_fit.fit_classification }}'\n  ),\n  jsonb_build_object(\n    'pattern_effectiveness', {{ $json.performance_analyses[0].pattern_effectiveness.effectiveness_score }},\n    'optimal_shock_value', {{ $json.performance_analyses[0].shock_value_optimization.current_shock_value }},\n    'timing_optimization', '{{ $json.performance_analyses[0].timing_optimization.optimal_timing_window }}'\n  ),\n  '{{ JSON.stringify($json.performance_analyses[0].pattern_effectiveness.pattern_weaknesses) }}'::jsonb,\n  jsonb_build_object(\n    'confidence_adjustment_pattern', '{{ $json.performance_analyses[0].confidence_adjustment.adjustment_direction }}',\n    'feedback_learning_velocity', '{{ $json.system_health_metrics.system_learning_velocity }}'\n  ),\n  jsonb_build_object(\n    'low_effectiveness_patterns', '{{ JSON.stringify($json.performance_analyses[0].pattern_effectiveness.pattern_weaknesses) }}'\n  ),\n  jsonb_build_object(\n    'high_effectiveness_patterns', '{{ JSON.stringify($json.performance_analyses[0].pattern_effectiveness.pattern_strengths) }}'\n  ),\n  jsonb_build_object(\n    'optimization_recommendations', '{{ JSON.stringify($json.performance_analyses[0].optimization_recommendations) }}'\n  ),\n  jsonb_build_object(\n    'archetype_optimization', '{{ JSON.stringify($json.performance_analyses[0].archetype_performance.archetype_optimization) }}',\n    'timing_preferences', '{{ JSON.stringify($json.performance_analyses[0].timing_optimization.timing_recommendations) }}'\n  ),\n  jsonb_build_object(\n    'accuracy_confidence', {{ $json.performance_analyses[0].accuracy_analysis.accuracy_confidence }},\n    'system_health_score', {{ $json.system_health_metrics.system_health_score }},\n    'learning_insights', '{{ JSON.stringify($json.performance_analyses[0].learning_insights) }}'\n  )\nWHERE '{{ $json.performance_analyses[0].user_id }}' IS NOT NULL\nON CONFLICT (user_id) DO UPDATE SET\n  behavioral_dna = intelligence_synthesis.behavioral_dna || EXCLUDED.behavioral_dna,\n  growth_formula = EXCLUDED.growth_formula,\n  intervention_playbook = EXCLUDED.intervention_playbook,\n  prediction_model = EXCLUDED.prediction_model,\n  synthesis_date = EXCLUDED.synthesis_date",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -400,
        -2600
      ],
      "id": "ee2b439e-2a4b-46ae-b9ad-4a20e3c7d9f2",
      "name": "Store Learning Insights",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.performance_analyses[0].confidence_adjustment.adjustment_magnitude }}",
              "rightValue": "major",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {}
      },
      "name": "Major Adjustment?",
      "type": "n8n-nodes-base.if",
      "position": [
        -200,
        -2600
      ],
      "id": "7cbec0ce-8c9c-4877-b9f3-51a140cef85a",
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Queue system optimization intervention for major confidence adjustments\nINSERT INTO intervention_queue (\n  user_id,\n  intervention_type,\n  reasons,\n  scheduled_for,\n  message,\n  expected_impact,\n  breakthrough_potential,\n  priority,\n  status,\n  metadata,\n  created_at\n)\nVALUES (\n  '{{ $json.performance_analyses[0].user_id }}',\n  'system_optimization_feedback',\n  'Major confidence adjustment detected: {{ $json.performance_analyses[0].confidence_adjustment.adjustment_direction }} based on {{ $json.performance_analyses[0].accuracy_analysis.accuracy_classification }} accuracy',\n  NOW() + INTERVAL '2 hours',\n  CASE \n    WHEN '{{ $json.performance_analyses[0].confidence_adjustment.adjustment_direction }}' = 'increase'\n    THEN 'System learning update: My predictions for your archetype are getting more accurate. Confidence in similar patterns increased to {{ Math.round($json.performance_analyses[0].confidence_adjustment.new_confidence * 100) }}%.'\n    ELSE 'System learning update: Adjusting prediction confidence based on feedback. Improving accuracy for your {{ $json.performance_analyses[0].user_archetype }} profile.'\n  END,\n  'system_optimization',\n  0.7,\n  3,\n  'scheduled',\n  jsonb_build_object(\n    'confidence_adjustment', {{ $json.performance_analyses[0].confidence_adjustment.confidence_adjustment }},\n    'accuracy_score', {{ $json.performance_analyses[0].accuracy_analysis.accuracy_score }},\n    'engagement_score', {{ $json.performance_analyses[0].engagement_analysis.engagement_score }},\n    'pattern_effectiveness', {{ $json.performance_analyses[0].pattern_effectiveness.effectiveness_score }}\n  ),\n  NOW()\n)",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        -2500
      ],
      "id": "3e4670f0-40d9-43e1-ad50-8d3b9c6f8f8a",
      "name": "Queue Optimization Feedback",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"type\": \"feedback_processed\",\n  \"feedback_analysis\": {\n    \"accuracy_score\": {{ $json.performance_analyses[0].accuracy_analysis.accuracy_score }},\n    \"engagement_score\": {{ $json.performance_analyses[0].engagement_analysis.engagement_score }},\n    \"confidence_adjustment\": {{ $json.performance_analyses[0].confidence_adjustment.confidence_adjustment }},\n    \"new_confidence\": {{ $json.performance_analyses[0].confidence_adjustment.new_confidence }},\n    \"pattern_effectiveness\": {{ $json.performance_analyses[0].pattern_effectiveness.effectiveness_score }}\n  },\n  \"system_health\": {\n    \"overall_accuracy\": {{ $json.system_health_metrics.overall_system_accuracy }},\n    \"overall_engagement\": {{ $json.system_health_metrics.overall_system_engagement }},\n    \"system_status\": \"{{ $json.system_health_metrics.system_status }}\"\n  },\n  \"learning_summary\": {{ JSON.stringify($json.learning_summary) }},\n  \"success\": true\n}",
        "options": {}
      },
      "name": "Respond Feedback Analysis",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        0,
        -2700
      ],
      "id": "70958df5-dd56-4fdf-b369-58d31ff57d4a",
      "typeVersion": 1
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "oracle-receive",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET,POST,OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type,Authorization"
              }
            ]
          }
        }
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -1380,
        -3500
      ],
      "id": "61eaf2e7-aed2-457b-8a38-0578a4e60ec1",
      "typeVersion": 2,
      "webhookId": "b9cae43c-593d-4cc6-843f-a6f7f34e4e18"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.should_deliver }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Should Deliver?",
      "type": "n8n-nodes-base.if",
      "position": [
        -760,
        -3500
      ],
      "id": "cd7235e7-9aab-4502-a23a-1c92f145567e",
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"type\": \"pattern_assumption\",\n  \"content\": {{ JSON.stringify($json.assumption) }},\n  \"confidence\": {{ $json.confidence }},\n  \"pattern_id\": {{ JSON.stringify($json.pattern_id) }},\n  \"metadata\": {\n    \"patterns_found\": {{ $json.patterns_found }},\n    \"match_score\": {{ $json.match_score }},\n    \"user_id\": {{ JSON.stringify($json.user_id) }},\n    \"timestamp\": {{ JSON.stringify(new Date().toISOString()) }}\n  },\n  \"success\": true\n}",
        "options": {}
      },
      "name": "Deliver Assumption",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        60,
        -3480
      ],
      "id": "173fb985-582b-4f39-8445-f0ddfe5494c2",
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"type\": \"no_pattern\",\n  \"content\": null,\n  \"confidence\": 0,\n  \"metadata\": {\n    \"patterns_found\": {{ $json.patterns_found }},\n    \"user_id\": {{ JSON.stringify($json.user_id) }},\n    \"reason\": \"No high-confidence patterns detected\"\n  },\n  \"success\": true\n}",
        "options": {}
      },
      "name": "No Pattern Response1",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -520,
        -3440
      ],
      "id": "911daf25-5829-4ead-ba76-c90896aaa480",
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## PHASE 2",
        "height": 1900,
        "width": 1720,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1520,
        -3160
      ],
      "id": "d34b26e3-99df-443f-8b17-d2db5691cebe",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "## PHASE 1",
        "height": 400,
        "width": 1720,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1520,
        -3640
      ],
      "id": "0b59495a-ca28-48a4-98dc-383dbc62d5d6",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "jsCode": "// ONE ORACLE: SIMPLIFIED PATTERN RECOGNITION ENGINE\n// Replaces 7 complex workflows with 1 sophisticated system\n\nclass OneOracleEngine {\n  constructor(supabase) {\n    this.supabase = supabase;\n    this.CONFIDENCE_THRESHOLD = 0.80; // NEVER deliver below 80%\n    this.patterns = new Map();\n    this.userProfiles = new Map();\n  }\n\n  // SINGLE ENTRY POINT: All interactions flow here\n  async processUserMessage(userId, message, context = {}) {\n    try {\n      // 1. Load user context (simplified)\n      const userProfile = await this.getUserProfile(userId);\n      \n      // 2. Pattern matching (simplified but powerful)\n      const patternMatch = await this.matchPatterns(message, userProfile, context);\n      \n      // 3. Confidence gating (CRITICAL)\n      if (patternMatch.confidence < this.CONFIDENCE_THRESHOLD) {\n        return { \n          delivered: false, \n          reason: 'Below confidence threshold',\n          confidence: patternMatch.confidence \n        };\n      }\n      \n      // 4. Generate personalized assumption\n      const assumption = await this.generateAssumption(patternMatch, userProfile);\n      \n      // 5. Log and deliver\n      await this.logPrediction(userId, patternMatch, assumption);\n      \n      return {\n        delivered: true,\n        assumption: assumption.text,\n        confidence: patternMatch.confidence,\n        pattern_id: patternMatch.pattern_id\n      };\n      \n    } catch (error) {\n      console.error('Oracle processing error:', error);\n      return { delivered: false, reason: 'Processing error' };\n    }\n  }\n\n  // UNIFIED USER PROFILE: Simplified but comprehensive\n  async getUserProfile(userId) {\n    // Check cache first\n    if (this.userProfiles.has(userId)) {\n      return this.userProfiles.get(userId);\n    }\n\n    // Load essential data only\n    const { data: profile } = await this.supabase\n      .from('user_dynamic_profile')\n      .select(`\n        trust_level,\n        challenge_tolerance,\n        behavioral_health_score,\n        current_energy,\n        momentum_velocity,\n        breakthrough_proximity,\n        business_model_type,\n        growth_stage\n      `)\n      .eq('user_id', userId)\n      .single();\n\n    // Get recent conversation context\n    const { data: recentConversations } = await this.supabase\n      .from('conversations')\n      .select('message, ai_reply, created_at')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n      .limit(3);\n\n    // Get assumption performance for this user\n    const { data: performance } = await this.supabase\n      .from('assumption_usage_log')\n      .select('confidence_score, user_engaged, assumption_pattern_type')\n      .eq('user_id', userId)\n      .order('delivered_at', { ascending: false })\n      .limit(10);\n\n    const userProfile = {\n      userId,\n      trustLevel: profile?.trust_level || 5,\n      challengeTolerance: profile?.challenge_tolerance || 5,\n      behavioralHealth: profile?.behavioral_health_score || 50,\n      currentEnergy: profile?.current_energy || 'medium',\n      momentum: profile?.momentum_velocity || 'stable',\n      breakthroughProximity: profile?.breakthrough_proximity || 'distant',\n      businessModel: profile?.business_model_type || 'unknown',\n      growthStage: profile?.growth_stage || 'early',\n      recentContext: recentConversations || [],\n      accuracyHistory: this.calculateAccuracyHistory(performance || []),\n      lastUpdate: new Date()\n    };\n\n    // Cache for 10 minutes\n    this.userProfiles.set(userId, userProfile);\n    setTimeout(() => this.userProfiles.delete(userId), 600000);\n\n    return userProfile;\n  }\n\n  // PATTERN MATCHING: Sophisticated but single algorithm\n  async matchPatterns(message, userProfile, context) {\n    // Load behavioral assumptions (your existing table)\n    const { data: assumptions } = await this.supabase\n      .from('behavioral_assumptions')\n      .select('*')\n      .gte('base_accuracy', 0.70); // Only use patterns with proven accuracy\n\n    let bestMatch = {\n      pattern_id: null,\n      confidence: 0,\n      assumption: null,\n      triggers: []\n    };\n\n    for (const assumption of assumptions) {\n      const matchScore = this.calculatePatternMatch(\n        message, \n        assumption, \n        userProfile, \n        context\n      );\n\n      if (matchScore.confidence > bestMatch.confidence) {\n        bestMatch = {\n          pattern_id: assumption.assumption_id,\n          confidence: matchScore.confidence,\n          assumption: assumption,\n          triggers: matchScore.triggers,\n          reasoning: matchScore.reasoning\n        };\n      }\n    }\n\n    return bestMatch;\n  }\n\n  // PATTERN SCORING: The heart of the oracle\n  calculatePatternMatch(message, assumption, userProfile, context) {\n    let confidence = assumption.base_accuracy || 0.5;\n    const triggers = [];\n    const reasoning = [];\n\n    // 1. Linguistic pattern matching\n    if (assumption.linguistic_patterns) {\n      const linguisticMatch = this.matchLinguisticPatterns(\n        message, \n        assumption.linguistic_patterns\n      );\n      if (linguisticMatch.score > 0.3) {\n        confidence += linguisticMatch.score * 0.3;\n        triggers.push(...linguisticMatch.triggers);\n        reasoning.push(`Linguistic match: ${linguisticMatch.score.toFixed(2)}`);\n      }\n    }\n\n    // 2. Contextual triggers\n    if (assumption.contextual_triggers) {\n      const contextMatch = this.matchContextualTriggers(\n        context, \n        userProfile, \n        assumption.contextual_triggers\n      );\n      if (contextMatch.score > 0.2) {\n        confidence += contextMatch.score * 0.2;\n        triggers.push(...contextMatch.triggers);\n        reasoning.push(`Context match: ${contextMatch.score.toFixed(2)}`);\n      }\n    }\n\n    // 3. Business model alignment\n    if (assumption.business_model_context) {\n      const businessMatch = this.matchBusinessContext(\n        userProfile.businessModel,\n        assumption.business_model_context\n      );\n      if (businessMatch.score > 0.1) {\n        confidence += businessMatch.score * 0.15;\n        reasoning.push(`Business match: ${businessMatch.score.toFixed(2)}`);\n      }\n    }\n\n    // 4. User-specific accuracy adjustment\n    const personalAccuracy = this.getPersonalAccuracy(\n      assumption.assumption_key,\n      userProfile.accuracyHistory\n    );\n    if (personalAccuracy !== null) {\n      confidence = (confidence * 0.7) + (personalAccuracy * 0.3);\n      reasoning.push(`Personal accuracy: ${personalAccuracy.toFixed(2)}`);\n    }\n\n    // 5. Trust level adjustment\n    const trustAdjustment = this.calculateTrustAdjustment(\n      userProfile.trustLevel,\n      assumption.urgency_level\n    );\n    confidence += trustAdjustment;\n    \n    if (trustAdjustment !== 0) {\n      reasoning.push(`Trust adjustment: ${trustAdjustment.toFixed(2)}`);\n    }\n\n    return {\n      confidence: Math.min(0.95, Math.max(0.05, confidence)),\n      triggers,\n      reasoning\n    };\n  }\n\n  // ASSUMPTION GENERATION: Personalized but not overwhelming\n  async generateAssumption(patternMatch, userProfile) {\n    const assumption = patternMatch.assumption;\n    let text = assumption.personal_expression || assumption.universal_truth;\n\n    // Variable substitution\n    if (assumption.variable_templates) {\n      text = this.substituteVariables(\n        text, \n        assumption.variable_templates, \n        userProfile\n      );\n    }\n\n    // Business context adjustment\n    if (userProfile.businessModel !== 'unknown') {\n      const businessSuffix = this.getBusinessContextSuffix(\n        userProfile.businessModel,\n        assumption.assumption_category\n      );\n      if (businessSuffix) {\n        text += ` ${businessSuffix}`;\n      }\n    }\n\n    // Energy-based delivery tone\n    const energyTone = this.adjustForEnergyLevel(\n      text,\n      userProfile.currentEnergy,\n      userProfile.challengeTolerance\n    );\n\n    return {\n      text: energyTone,\n      shock_value: assumption.urgency_level || 5,\n      category: assumption.assumption_category,\n      intervention_type: assumption.intervention_type\n    };\n  }\n\n  // PREDICTION LOGGING: Simple but comprehensive\n  async logPrediction(userId, patternMatch, assumption) {\n    await this.supabase\n      .from('assumption_usage_log')\n      .insert({\n        user_id: userId,\n        assumption_id: patternMatch.pattern_id,\n        assumption_pattern_type: assumption.category,\n        confidence_score: patternMatch.confidence,\n        shock_value: assumption.shock_value,\n        delivered_at: new Date().toISOString(),\n        user_stage: 'active', // Simplified\n        effectiveness_pending: true\n      });\n\n    // Store in pattern_predictions for tracking\n    await this.supabase\n      .from('pattern_predictions')\n      .insert({\n        prediction_id: crypto.randomUUID(),\n        user_id: userId,\n        pattern_id: patternMatch.pattern_id,\n        pattern_type: assumption.category,\n        prediction_text: assumption.text,\n        confidence_score: patternMatch.confidence,\n        source_type: 'one_oracle',\n        triggered_by: patternMatch.triggers.join(', '),\n        prediction_timestamp: new Date().toISOString(),\n        outcome_recorded: false\n      });\n  }\n\n  // HELPER METHODS (implement based on your existing logic)\n  matchLinguisticPatterns(message, patterns) {\n    // Your existing linguistic pattern matching logic\n    return { score: 0.5, triggers: ['example_trigger'] };\n  }\n\n  matchContextualTriggers(context, userProfile, triggers) {\n    // Your existing contextual matching logic\n    return { score: 0.3, triggers: ['context_trigger'] };\n  }\n\n  matchBusinessContext(businessModel, businessContext) {\n    // Business model alignment scoring\n    return { score: 0.2 };\n  }\n\n  getPersonalAccuracy(assumptionKey, accuracyHistory) {\n    // Calculate user-specific accuracy for this pattern type\n    const relevant = accuracyHistory.filter(h => h.pattern === assumptionKey);\n    if (relevant.length === 0) return null;\n    \n    return relevant.reduce((sum, h) => sum + h.accuracy, 0) / relevant.length;\n  }\n\n  calculateTrustAdjustment(trustLevel, urgencyLevel) {\n    // Adjust confidence based on user trust and assumption urgency\n    if (trustLevel > 7 && urgencyLevel < 6) return 0.05;\n    if (trustLevel < 4 && urgencyLevel > 7) return -0.10;\n    return 0;\n  }\n\n  calculateAccuracyHistory(performanceData) {\n    // Convert assumption performance into accuracy scores\n    return performanceData.map(p => ({\n      pattern: p.assumption_pattern_type,\n      accuracy: p.user_engaged ? 0.8 : 0.3, // Simplified\n      date: p.delivered_at\n    }));\n  }\n\n  substituteVariables(text, templates, userProfile) {\n    // Your existing variable substitution logic\n    return text;\n  }\n\n  getBusinessContextSuffix(businessModel, category) {\n    const suffixes = {\n      'solopreneur': {\n        'procrastination': 'Managing everything solo amplifies this pattern.',\n        'decision_paralysis': 'Without a team to bounce ideas off, analysis paralysis intensifies.'\n      },\n      'agency': {\n        'revenue_psychology': 'Client pressure makes this revenue ceiling even more restrictive.',\n        'perfectionism': 'Client work perfectionism kills profitability.'\n      }\n      // Add more business model contexts\n    };\n\n    return suffixes[businessModel]?.[category] || null;\n  }\n\n  adjustForEnergyLevel(text, energyLevel, challengeTolerance) {\n    // Adjust delivery tone based on user's current energy\n    if (energyLevel === 'low' && challengeTolerance < 5) {\n      return text.replace(/\\!/g, '.').replace(/will happen/g, 'might happen');\n    }\n    \n    if (energyLevel === 'high' && challengeTolerance > 7) {\n      return text + ' Act on this immediately.';\n    }\n\n    return text;\n  }\n\n  // FEEDBACK PROCESSING: Learn from every interaction\n  async processFeedback(userId, predictionId, engagement, accuracy) {\n    // Update assumption performance\n    await this.supabase\n      .from('assumption_usage_log')\n      .update({\n        user_engaged: engagement,\n        effectiveness_pending: false\n      })\n      .eq('user_id', userId)\n      .eq('assumption_id', predictionId);\n\n    // Update pattern predictions outcome\n    await this.supabase\n      .from('pattern_predictions')\n      .update({\n        outcome_recorded: true,\n        outcome_accuracy: accuracy\n      })\n      .eq('prediction_id', predictionId);\n\n    // Adjust base accuracy in behavioral_assumptions\n    const { data: currentAssumption } = await this.supabase\n      .from('behavioral_assumptions')\n      .select('base_accuracy, usage_count')\n      .eq('assumption_id', predictionId)\n      .single();\n\n    if (currentAssumption) {\n      const newAccuracy = this.calculateNewBaseAccuracy(\n        currentAssumption.base_accuracy,\n        currentAssumption.usage_count,\n        accuracy\n      );\n\n      await this.supabase\n        .from('behavioral_assumptions')\n        .update({\n          base_accuracy: newAccuracy,\n          usage_count: (currentAssumption.usage_count || 0) + 1\n        })\n        .eq('assumption_id', predictionId);\n    }\n\n    // Clear user profile cache to force refresh\n    this.userProfiles.delete(userId);\n  }\n\n  calculateNewBaseAccuracy(currentAccuracy, usageCount, newAccuracy) {\n    // Weighted average with more weight on recent feedback\n    const weight = Math.min(usageCount + 1, 20); // Cap at 20 for stability\n    return ((currentAccuracy * weight) + newAccuracy) / (weight + 1);\n  }\n}\n\n// USAGE EXAMPLE\nconst oracle = new OneOracleEngine(supabase);\n\n// Single API endpoint for everything\napp.post('/api/oracle', async (req, res) => {\n  const { user_id, message, context } = req.body;\n  \n  const result = await oracle.processUserMessage(user_id, message, context);\n  \n  res.json(result);\n});\n\n// Feedback endpoint\napp.post('/api/oracle/feedback', async (req, res) => {\n  const { user_id, prediction_id, engagement, accuracy } = req.body;\n  \n  await oracle.processFeedback(user_id, prediction_id, engagement, accuracy);\n  \n  res.json({ success: true });\n});\n\nexport default OneOracleEngine;"
      },
      "name": "Oracle",
      "type": "n8n-nodes-base.code",
      "position": [
        -980,
        -3500
      ],
      "id": "9855fd13-d44b-4c42-a2e6-b3310639d26f",
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ventruk.app.n8n.cloud/webhook/oracle-send",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"userId\": \"={{ $json.user_id }}\",\n  \"message\": \"={{ $json.oracle_insight }}\",\n  \"user\": {\n    \"email\": \"={{ $json.user_email }}\",\n    \"displayName\": \"={{ $json.user_name }}\"\n  },\n  \"source\": \"oracle_injection\",\n  \"original_request\": \"={{ $json.original_message }}\",\n  \"confidence\": \"={{ $json.confidence }}\",\n  \"pattern_type\": \"={{ $json.pattern_id }}\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1
            }
          },
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "json"
            }
          },
          "timeout": 5000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -520,
        -3600
      ],
      "id": "126e5a7f-739a-4240-b85e-ff414ce12815",
      "name": "Trigger Async Processing",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH recent_context AS (\n  SELECT \n    c.user_id,\n    c.message as current_message,\n    c.ai_reply as current_ai_reply,\n    LAG(c.message) OVER (PARTITION BY c.user_id ORDER BY c.created_at) as previous_message,\n    LAG(c.ai_reply) OVER (PARTITION BY c.user_id ORDER BY c.created_at) as previous_ai_reply,\n    c.created_at,\n    ROW_NUMBER() OVER (PARTITION BY c.user_id ORDER BY c.created_at DESC) as recency\n  FROM conversations c\n  WHERE c.user_id = '{{ $json.body.userId }}'\n  ORDER BY c.created_at DESC\n  LIMIT 3\n),\nbusiness_context AS (\n  SELECT \n    user_id,\n    business_model_type,\n    growth_stage,\n    current_energy,\n    momentum_velocity,\n    breakthrough_proximity\n  FROM user_dynamic_profile\n  WHERE user_id = '{{ $json.body.userId }}'\n),\nuser_patterns AS (\n  SELECT \n    user_id,\n    trust_level,\n    challenge_tolerance,\n    preferred_intervention_style,\n    behavioral_health_score\n  FROM user_personalization\n  WHERE user_id = '{{ $json.body.userId }}'\n)\nSELECT \n  rc.*,\n  COALESCE(bc.business_model_type, 'unknown') as business_model,\n  COALESCE(bc.growth_stage, 'early') as growth_stage,\n  COALESCE(bc.current_energy, 'medium') as energy_level,\n  COALESCE(bc.momentum_velocity, 'stable') as momentum,\n  COALESCE(bc.breakthrough_proximity, 'distant') as breakthrough_proximity,\n  COALESCE(up.trust_level, 5) as trust_level,\n  COALESCE(up.challenge_tolerance, 5) as challenge_tolerance,\n  COALESCE(up.behavioral_health_score, 50) as health_score\nFROM recent_context rc\nLEFT JOIN business_context bc ON rc.user_id = bc.user_id\nLEFT JOIN user_patterns up ON rc.user_id = up.user_id\nWHERE rc.recency = 1",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1180,
        -3500
      ],
      "id": "0b267105-f32d-4d34-8f80-722c92027443",
      "name": "Get Context",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT c.user_id, c.message as current_message, c.ai_reply, LAG(c.message, 1) OVER (ORDER BY c.created_at) as prev_message_1, LAG(c.message, 2) OVER (ORDER BY c.created_at) as prev_message_2, COALESCE(le.vocabulary_complexity, 0.5) as baseline_vocabulary, COALESCE(le.emotional_expression_depth, 0.5) as baseline_emotion, COALESCE(up.trust_level, 5) as trust_level FROM conversations c LEFT JOIN linguistic_evolution le ON c.user_id = le.user_id LEFT JOIN user_personalization up ON c.user_id = up.user_id WHERE c.user_id = '{{ $json.user_id }}' ORDER BY c.created_at DESC LIMIT 1",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1200,
        -3020
      ],
      "id": "e4cf9db9-7b2a-4790-9f12-60f8c1f1e9e3",
      "name": "Get Context1",
      "credentials": {
        "postgres": {
          "id": "AeWxukKxm7dtP7Wc",
          "name": "CelesteOS"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Temporal Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Temporal Data": {
      "main": [
        [
          {
            "node": "Analyze Patterns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Patterns": {
      "main": [
        [
          {
            "node": "Store Patterns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Patterns": {
      "main": [
        [
          {
            "node": "Store Predictions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Predictions": {
      "main": [
        [
          {
            "node": "Queue Interventions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Language": {
      "main": [
        [
          {
            "node": "Store Evolution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Evolution": {
      "main": [
        [
          {
            "node": "Breakthrough Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Breakthrough Check": {
      "main": [
        [
          {
            "node": "Queue Intervention1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Business Analysis": {
      "main": [
        [
          {
            "node": "Comprehensive Business Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comprehensive Business Analysis": {
      "main": [
        [
          {
            "node": "PhD Business Intelligence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PhD Business Intelligence": {
      "main": [
        [
          {
            "node": "Store Business Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Business Context": {
      "main": [
        [
          {
            "node": "Store Intelligence Synthesis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Intelligence Synthesis": {
      "main": [
        [
          {
            "node": "Queue Business Interventions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hourly Breakthrough Scan": {
      "main": [
        [
          {
            "node": "Comprehensive Breakthrough Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comprehensive Breakthrough Scan": {
      "main": [
        [
          {
            "node": "Breakthrough Intelligence Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Breakthrough Intelligence Engine": {
      "main": [
        [
          {
            "node": "Store Breakthrough Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Breakthrough Analysis": {
      "main": [
        [
          {
            "node": "Store Breakthrough Predictions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Breakthrough Predictions": {
      "main": [
        [
          {
            "node": "Breakthrough Approaching?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Breakthrough Approaching?": {
      "main": [
        [
          {
            "node": "Queue Breakthrough Intervention",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weekly Pathway Analysis": {
      "main": [
        [
          {
            "node": "Comprehensive Archetype Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comprehensive Archetype Scan": {
      "main": [
        [
          {
            "node": "PhD Archetype Classification Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PhD Archetype Classification Engine": {
      "main": [
        [
          {
            "node": "Store Pathway Assignments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Pathway Assignments": {
      "main": [
        [
          {
            "node": "Update Dynamic Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Dynamic Profile": {
      "main": [
        [
          {
            "node": "Store Pathway Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Real-time Feedback Webhook": {
      "main": [
        [
          {
            "node": "Comprehensive Feedback Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Summary Analysis": {
      "main": [
        [
          {
            "node": "Comprehensive Feedback Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comprehensive Feedback Scan": {
      "main": [
        [
          {
            "node": "Ultimate Feedback Learning Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ultimate Feedback Learning Engine": {
      "main": [
        [
          {
            "node": "Update Assumption Performance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Assumption Performance": {
      "main": [
        [
          {
            "node": "Update Pattern Predictions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Pattern Predictions": {
      "main": [
        [
          {
            "node": "Store Learning Insights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Learning Insights": {
      "main": [
        [
          {
            "node": "Major Adjustment?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Major Adjustment?": {
      "main": [
        [
          {
            "node": "Queue Optimization Feedback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Feedback Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Deliver?": {
      "main": [
        [
          {
            "node": "Trigger Async Processing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Pattern Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Oracle": {
      "main": [
        [
          {
            "node": "Should Deliver?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Context": {
      "main": [
        [
          {
            "node": "Oracle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Context1": {
      "main": [
        [
          {
            "node": "Analyze Language",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "068fcf99ddb3fd716c0b9e3d012c519dd8a4dfdbe854073434d3ac70e6f4cf11"
  }
}